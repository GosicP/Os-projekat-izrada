GAS LISTING /tmp/cc0qzoHg.s 			page 1


   1              		.file	"RiscV.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5RiscV10popSppSpieEv
   9              	_ZN5RiscV10popSppSpieEv:
  10              	.LFB48:
  11              		.file 1 "src/RiscV.cpp"
   1:src/RiscV.cpp **** //
   2:src/RiscV.cpp **** // Created by os on 8/14/22.
   3:src/RiscV.cpp **** //
   4:src/RiscV.cpp **** 
   5:src/RiscV.cpp **** #include "../h/RiscV.hpp"
   6:src/RiscV.cpp **** #include "../h/tcb.hpp"
   7:src/RiscV.cpp **** #include "../lib/console.h"
   8:src/RiscV.cpp **** #include "../h/MemoryAllocation.hpp"
   9:src/RiscV.cpp **** #include "../h/tcb.hpp"
  10:src/RiscV.cpp **** #include "../lib/console.h"
  11:src/RiscV.cpp **** 
  12:src/RiscV.cpp **** 
  13:src/RiscV.cpp **** void RiscV::popSppSpie() {
  12              		.loc 1 13 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/RiscV.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 14 5
  21              		.loc 1 14 39 is_stmt 0
  22              	#APP
  23              	# 14 "src/RiscV.cpp" 1
  15              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 15 5 is_stmt 1
  27              		.loc 1 15 30 is_stmt 0
  28              	# 15 "src/RiscV.cpp" 1
  16              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 16 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE48:
  42              		.align	2
  43              		.globl	_ZN5RiscV20handleSupervisorTrapEv
GAS LISTING /tmp/cc0qzoHg.s 			page 2


  45              	_ZN5RiscV20handleSupervisorTrapEv:
  46              	.LFB49:
  17:src/RiscV.cpp **** 
  18:src/RiscV.cpp **** void RiscV::handleSupervisorTrap() {
  47              		.loc 1 18 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FA 		addi	sp,sp,-96
  50              		.cfi_def_cfa_offset 96
  51 0024 233C1104 		sd	ra,88(sp)
  52 0028 23388104 		sd	s0,80(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040106 		addi	s0,sp,96
  56              		.cfi_def_cfa 8, 0
  19:src/RiscV.cpp ****     //class TCB;
  20:src/RiscV.cpp ****     typedef TCB* thread_t;
  57              		.loc 1 20 5
  21:src/RiscV.cpp ****     typedef semaphore* sem_t;
  58              		.loc 1 21 5
  22:src/RiscV.cpp ****     int ret_val=0;
  59              		.loc 1 22 5
  60              	.LVL0:
  23:src/RiscV.cpp ****     volatile uint64 a4;
  61              		.loc 1 23 5
  24:src/RiscV.cpp ****     volatile uint64 size;
  62              		.loc 1 24 5
  25:src/RiscV.cpp ****     volatile uint64 handle;
  63              		.loc 1 25 5
  26:src/RiscV.cpp ****     volatile uint64 start_routine;
  64              		.loc 1 26 5
  27:src/RiscV.cpp ****     volatile uint64 arg;
  65              		.loc 1 27 5
  28:src/RiscV.cpp ****     volatile uint64 ptr;
  66              		.loc 1 28 5
  29:src/RiscV.cpp ****     __asm__ volatile("sd a4, %0" : "=m"(a4));
  67              		.loc 1 29 5
  68              		.loc 1 29 45 is_stmt 0
  69              	#APP
  70              	# 29 "src/RiscV.cpp" 1
  30              	    __asm__ volatile("sd a3, %0" : "=m"(arg));
  71              		sd a4, -24(s0)
  72              	# 0 "" 2
  73              		.loc 1 30 5 is_stmt 1
  74              		.loc 1 30 46 is_stmt 0
  75              	# 30 "src/RiscV.cpp" 1
  31              	    __asm__ volatile("sd a2, %0" : "=m"(start_routine));
  76              		sd a3, -56(s0)
  77              	# 0 "" 2
  78              		.loc 1 31 5 is_stmt 1
  79              		.loc 1 31 56 is_stmt 0
  80              	# 31 "src/RiscV.cpp" 1
  32              	    __asm__ volatile("sd a1, %0" : "=m"(handle));
  81              		sd a2, -48(s0)
  82              	# 0 "" 2
  83              		.loc 1 32 5 is_stmt 1
  84              		.loc 1 32 49 is_stmt 0
  85              	# 32 "src/RiscV.cpp" 1
GAS LISTING /tmp/cc0qzoHg.s 			page 3


  33              	    //__asm__ volatile("sd a1, %0" : "=m"(size));
  34:src/RiscV.cpp ****     //__asm__ volatile("sd a1, %0" : "=m"(ptr));
  35:src/RiscV.cpp ****     uint64 sysCallNr;
  86              		sd a1, -40(s0)
  87              	# 0 "" 2
  88              		.loc 1 35 5 is_stmt 1
  36:src/RiscV.cpp ****     int ret_value_thr_exit;
  89              		.loc 1 36 5
  37:src/RiscV.cpp ****     uint64 scause = r_scause();
  90              		.loc 1 37 5
  91              	#NO_APP
  92              	.LBB100:
  93              	.LBB101:
  94              		.file 2 "src/../h/RiscV.hpp"
   1:src/../h/RiscV.hpp **** //
   2:src/../h/RiscV.hpp **** // Created by os on 8/14/22.
   3:src/../h/RiscV.hpp **** //
   4:src/../h/RiscV.hpp **** 
   5:src/../h/RiscV.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/RiscV.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/RiscV.hpp **** #include "../lib/hw.h"
   8:src/../h/RiscV.hpp **** 
   9:src/../h/RiscV.hpp **** class RiscV {
  10:src/../h/RiscV.hpp **** public:
  11:src/../h/RiscV.hpp ****     //pop sstatus.spp and sstatus.spie bits(mora da bude ne inline funkcija)
  12:src/../h/RiscV.hpp ****     static void popSppSpie();
  13:src/../h/RiscV.hpp **** 
  14:src/../h/RiscV.hpp ****     //push x3...x31 registers on stack
  15:src/../h/RiscV.hpp ****     static void pushRegisters();
  16:src/../h/RiscV.hpp **** 
  17:src/../h/RiscV.hpp ****     //pop x3...x31 registers on stack
  18:src/../h/RiscV.hpp ****     static void popRegisters();
  19:src/../h/RiscV.hpp **** 
  20:src/../h/RiscV.hpp ****     //read register scause
  21:src/../h/RiscV.hpp ****     static uint64 r_scause();
  22:src/../h/RiscV.hpp **** 
  23:src/../h/RiscV.hpp ****     //write register scause
  24:src/../h/RiscV.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/RiscV.hpp **** 
  26:src/../h/RiscV.hpp ****     //read register sepc
  27:src/../h/RiscV.hpp ****     static uint64 r_sepc();
  28:src/../h/RiscV.hpp **** 
  29:src/../h/RiscV.hpp ****     //write register sepc
  30:src/../h/RiscV.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/RiscV.hpp **** 
  32:src/../h/RiscV.hpp ****     //read register stvec
  33:src/../h/RiscV.hpp ****     static uint64 r_stvec();
  34:src/../h/RiscV.hpp **** 
  35:src/../h/RiscV.hpp ****     //write register stvec
  36:src/../h/RiscV.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/RiscV.hpp **** 
  38:src/../h/RiscV.hpp ****     //write register stval
  39:src/../h/RiscV.hpp ****     static uint64 r_stval();
  40:src/../h/RiscV.hpp **** 
  41:src/../h/RiscV.hpp ****     //write register stval
  42:src/../h/RiscV.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/RiscV.hpp **** 
GAS LISTING /tmp/cc0qzoHg.s 			page 4


  44:src/../h/RiscV.hpp ****     enum BitMaskSip{
  45:src/../h/RiscV.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/RiscV.hpp ****         SIP_STIP = (1 << 5),
  47:src/../h/RiscV.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/RiscV.hpp ****     };
  49:src/../h/RiscV.hpp **** 
  50:src/../h/RiscV.hpp ****     //mask set register sip
  51:src/../h/RiscV.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/RiscV.hpp **** 
  53:src/../h/RiscV.hpp ****     //mask clear register sip
  54:src/../h/RiscV.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/RiscV.hpp **** 
  56:src/../h/RiscV.hpp ****     //read register sip
  57:src/../h/RiscV.hpp ****     static uint64 r_sip();
  58:src/../h/RiscV.hpp **** 
  59:src/../h/RiscV.hpp ****     //write register sip
  60:src/../h/RiscV.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/RiscV.hpp **** 
  62:src/../h/RiscV.hpp ****     enum BitMaskSstatus{
  63:src/../h/RiscV.hpp ****         SSTATUS_SIE = (1<<1),
  64:src/../h/RiscV.hpp ****         SSTATUS_SPIE = (1<<5),
  65:src/../h/RiscV.hpp ****         SSTATUS_SPP=  (1<<8),
  66:src/../h/RiscV.hpp ****     };
  67:src/../h/RiscV.hpp **** 
  68:src/../h/RiscV.hpp ****     //mask set register sstatus
  69:src/../h/RiscV.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/RiscV.hpp **** 
  71:src/../h/RiscV.hpp ****     //mask clear register sstatus
  72:src/../h/RiscV.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/RiscV.hpp **** 
  74:src/../h/RiscV.hpp ****     //read register sstatus
  75:src/../h/RiscV.hpp ****     static uint64 r_sstatus();
  76:src/../h/RiscV.hpp **** 
  77:src/../h/RiscV.hpp ****     //write register sstatus
  78:src/../h/RiscV.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/RiscV.hpp **** 
  80:src/../h/RiscV.hpp ****     static void supervisorTrap();
  81:src/../h/RiscV.hpp **** 
  82:src/../h/RiscV.hpp **** private:
  83:src/../h/RiscV.hpp ****     //obradjuje trap handler
  84:src/../h/RiscV.hpp ****     static void handleSupervisorTrap();
  85:src/../h/RiscV.hpp **** };
  86:src/../h/RiscV.hpp **** 
  87:src/../h/RiscV.hpp **** inline uint64 RiscV::r_scause() {
  88:src/../h/RiscV.hpp ****     uint64 volatile scause;
  95              		.loc 2 88 5
  89:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[scause], scause" : [scause] "=r"(scause));
  96              		.loc 2 89 5
  97              		.loc 2 89 71 is_stmt 0
  98              	#APP
  99              	# 89 "src/../h/RiscV.hpp" 1
  90              	    return scause;
 100              		csrr a5, scause
 101              	# 0 "" 2
 102              	#NO_APP
 103 0044 2334F4FA 		sd	a5,-88(s0)
 104              		.loc 2 90 5 is_stmt 1
GAS LISTING /tmp/cc0qzoHg.s 			page 5


 105              		.loc 2 90 12 is_stmt 0
 106 0048 033784FA 		ld	a4,-88(s0)
 107              	.LVL1:
 108              	.LBE101:
 109              	.LBE100:
  38:src/RiscV.cpp ****     volatile uint64 sepc = r_sepc() + 4;
 110              		.loc 1 38 5 is_stmt 1
 111              	.LBB102:
 112              	.LBB103:
  91:src/../h/RiscV.hpp **** 
  92:src/../h/RiscV.hpp **** }
  93:src/../h/RiscV.hpp **** 
  94:src/../h/RiscV.hpp **** inline void RiscV::w_scause(uint64 scause){
  95:src/../h/RiscV.hpp ****     __asm__ volatile("csrw scause, %[scause]": : [scause] "r"(scause));
  96:src/../h/RiscV.hpp **** 
  97:src/../h/RiscV.hpp **** }
  98:src/../h/RiscV.hpp **** 
  99:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sepc(){
 100:src/../h/RiscV.hpp ****     uint64  sepc;
 113              		.loc 2 100 5
 101:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 114              		.loc 2 101 5
 115              		.loc 2 101 63 is_stmt 0
 116              	#APP
 117              	# 101 "src/../h/RiscV.hpp" 1
 102              	    return sepc;
 118              		csrr a5, sepc
 119              	# 0 "" 2
 120              	.LVL2:
 121              		.loc 2 102 5 is_stmt 1
 122              	#NO_APP
 123              	.LBE103:
 124              	.LBE102:
 125              		.loc 1 38 37 is_stmt 0
 126 0050 93874700 		addi	a5,a5,4
 127              		.loc 1 38 39
 128 0054 233CF4FA 		sd	a5,-72(s0)
  39:src/RiscV.cpp ****     volatile uint64 sstatus = r_sstatus();
 129              		.loc 1 39 5 is_stmt 1
 130              	.LBB104:
 131              	.LBB105:
 103:src/../h/RiscV.hpp **** }
 104:src/../h/RiscV.hpp **** 
 105:src/../h/RiscV.hpp **** inline void RiscV::w_sepc(uint64 volatile sepc){
 106:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]": : [sepc] "r"(sepc));
 107:src/../h/RiscV.hpp **** }
 108:src/../h/RiscV.hpp **** 
 109:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stvec() {
 110:src/../h/RiscV.hpp ****     uint64 volatile stvec;
 111:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 112:src/../h/RiscV.hpp ****     return stvec;
 113:src/../h/RiscV.hpp **** }
 114:src/../h/RiscV.hpp **** 
 115:src/../h/RiscV.hpp **** inline void RiscV::w_stvec(uint64 stvec){
 116:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]": : [stvec] "r"(stvec));
 117:src/../h/RiscV.hpp **** }
 118:src/../h/RiscV.hpp **** 
GAS LISTING /tmp/cc0qzoHg.s 			page 6


 119:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stval(){
 120:src/../h/RiscV.hpp ****     uint64 volatile stval;
 121:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[stval], stval" : [stval] "=r"(stval));
 122:src/../h/RiscV.hpp ****     return stval;
 123:src/../h/RiscV.hpp **** }
 124:src/../h/RiscV.hpp **** 
 125:src/../h/RiscV.hpp **** inline void RiscV::w_stval(uint64 stval) {
 126:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stval, %[stval]": : [stval] "r"(stval));
 127:src/../h/RiscV.hpp **** }
 128:src/../h/RiscV.hpp **** 
 129:src/../h/RiscV.hpp **** inline void RiscV::ms_sip(uint64 mask){
 130:src/../h/RiscV.hpp ****     __asm__ volatile("csrs sip, %[mask]": : [mask]"r"(mask));
 131:src/../h/RiscV.hpp **** }
 132:src/../h/RiscV.hpp **** 
 133:src/../h/RiscV.hpp **** inline void RiscV::mc_sip(uint64 mask) {
 134:src/../h/RiscV.hpp ****     __asm__ volatile("csrc sip, %[mask]" : : [mask] "r"(mask));
 135:src/../h/RiscV.hpp **** }
 136:src/../h/RiscV.hpp **** 
 137:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sip(){
 138:src/../h/RiscV.hpp ****     uint64 volatile sip;
 139:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sip], sip" : [sip] "=r"(sip));
 140:src/../h/RiscV.hpp ****     return sip;
 141:src/../h/RiscV.hpp **** }
 142:src/../h/RiscV.hpp **** 
 143:src/../h/RiscV.hpp **** inline void RiscV::w_sip(uint64 sip) {
 144:src/../h/RiscV.hpp ****     __asm__ volatile("csrw sip, %[sip]": : [sip] "r"(sip));
 145:src/../h/RiscV.hpp **** }
 146:src/../h/RiscV.hpp **** 
 147:src/../h/RiscV.hpp **** inline void RiscV::ms_sstatus(uint64 mask) {
 148:src/../h/RiscV.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]": : [mask] "r"(mask));
 149:src/../h/RiscV.hpp **** }
 150:src/../h/RiscV.hpp **** 
 151:src/../h/RiscV.hpp **** inline void RiscV::mc_sstatus(uint64 mask) {
 152:src/../h/RiscV.hpp ****     __asm__ volatile("csrc sstatus, %[mask]": : [mask] "r"(mask));
 153:src/../h/RiscV.hpp **** }
 154:src/../h/RiscV.hpp **** 
 155:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sstatus() {
 156:src/../h/RiscV.hpp ****     uint64 sstatus;
 132              		.loc 2 156 5
 157:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus": [sstatus] "=r"(sstatus));
 133              		.loc 2 157 5
 134              		.loc 2 157 75 is_stmt 0
 135              	#APP
 136              	# 157 "src/../h/RiscV.hpp" 1
 158              	    return sstatus;
 137              		csrr a5, sstatus
 138              	# 0 "" 2
 139              	.LVL3:
 140              		.loc 2 158 5 is_stmt 1
 141              	#NO_APP
 142              	.LBE105:
 143              	.LBE104:
 144              		.loc 1 39 41 is_stmt 0
 145 005c 2338F4FA 		sd	a5,-80(s0)
  40:src/RiscV.cpp ****     __asm__ volatile("mv %[sysCallNr], a0" : [sysCallNr] "=r"(sysCallNr));
 146              		.loc 1 40 5 is_stmt 1
 147              		.loc 1 40 74 is_stmt 0
GAS LISTING /tmp/cc0qzoHg.s 			page 7


 148              	#APP
 149              	# 40 "src/RiscV.cpp" 1
  41              	    if (scause == 0x000000000000009UL || scause == 0x000000000000008UL){
 150              		mv a5, a0
 151              	# 0 "" 2
 152              	.LVL4:
 153              		.loc 1 41 5 is_stmt 1
 154              	#NO_APP
 155              	.LBB106:
 156              		.loc 1 41 39 is_stmt 0
 157 0064 130687FF 		addi	a2,a4,-8
 158              		.loc 1 41 5
 159 0068 93061000 		li	a3,1
 160 006c 63F8C602 		bleu	a2,a3,.L46
  42:src/RiscV.cpp ****         if (sysCallNr == 0x01UL) {
  43:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
  44:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
  45:src/RiscV.cpp ****             //ja sam ovde spakovao argument koji se dobije, i saljem ga nazad u funkciju posle ecal
  46:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
  47:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  48:src/RiscV.cpp ****         } else if (sysCallNr == 0x02UL) {
  49:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
  50:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
  51:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
  52:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
  53:src/RiscV.cpp ****         }else if(sysCallNr == 0x11UL){
  54:src/RiscV.cpp ****             if((bool)a4==false){
  55:src/RiscV.cpp ****                 ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg,
  56:src/RiscV.cpp ****             }else {
  57:src/RiscV.cpp ****                 ret_val = TCB::createThread((TCB::Body) start_routine, (thread_t *) handle, (void *
  58:src/RiscV.cpp ****             }
  59:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
  60:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  61:src/RiscV.cpp ****         }else if(sysCallNr == 0x12UL){
  62:src/RiscV.cpp ****             ret_value_thr_exit=TCB::thread_exit();
  63:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
  64:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  65:src/RiscV.cpp ****         }else if(sysCallNr == 0x13UL){
  66:src/RiscV.cpp ****             TCB::thread_dispatch();
  67:src/RiscV.cpp ****         }else if(sysCallNr==0x16UL){
  68:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)a4, (thread_t*) handle, (void*)arg, false);
  69:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
  70:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  71:src/RiscV.cpp ****         }else if(sysCallNr==0x15UL){
  72:src/RiscV.cpp ****             TCB::startThread((thread_t*)handle, (TCB::Body)start_routine);
  73:src/RiscV.cpp ****         }else if(sysCallNr == 0x21UL){
  74:src/RiscV.cpp ****             int retval = semaphore::semOpen((sem_t*)handle, (unsigned)start_routine);
  75:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  76:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  77:src/RiscV.cpp ****         }else if(sysCallNr == 0x22UL){
  78:src/RiscV.cpp ****             int retval = semaphore::semClose((sem_t)handle);
  79:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  80:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  81:src/RiscV.cpp ****         }else if(sysCallNr == 0x23UL){
  82:src/RiscV.cpp ****             int retval = semaphore::semWait((sem_t)handle);
  83:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  84:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
GAS LISTING /tmp/cc0qzoHg.s 			page 8


  85:src/RiscV.cpp ****         }else if(sysCallNr == 0x24UL){
  86:src/RiscV.cpp ****             int retval = semaphore::semSignal((sem_t)handle);
  87:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  88:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  89:src/RiscV.cpp ****        }else if(sysCallNr==0x41UL){
  90:src/RiscV.cpp ****             char retval = __getc();
  91:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  92:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  93:src/RiscV.cpp ****         }else if(sysCallNr==0x42UL){
  94:src/RiscV.cpp ****             __putc((char)handle);
  95:src/RiscV.cpp ****         }
  96:src/RiscV.cpp ****         //enviroment call from s-mode
  97:src/RiscV.cpp **** 
  98:src/RiscV.cpp ****         /*TCB::timeSliceCounter = 0;
  99:src/RiscV.cpp ****         TCB::dispatch();*/
 100:src/RiscV.cpp ****         w_sstatus(sstatus);
 101:src/RiscV.cpp ****         w_sepc(sepc);
 102:src/RiscV.cpp ****     }
 103:src/RiscV.cpp ****     else if(scause == 0x8000000000000001UL){
 161              		.loc 1 103 10 is_stmt 1
 162 0070 9307F0FF 		li	a5,-1
 163              	.LVL5:
 164 0074 9397F703 		slli	a5,a5,63
 165 0078 93871700 		addi	a5,a5,1
 166 007c 6304F742 		beq	a4,a5,.L47
 104:src/RiscV.cpp **** //         TCB::timeSliceCounter++;
 105:src/RiscV.cpp **** //         if(TCB::timeSliceCounter>= TCB::running->getTimeSlice()){
 106:src/RiscV.cpp **** //             volatile uint64 sepc = r_sepc();
 107:src/RiscV.cpp **** //             volatile uint64 sstatus = r_sstatus();
 108:src/RiscV.cpp **** //             TCB::timeSliceCounter=0;
 109:src/RiscV.cpp **** //             TCB::dispatch();
 110:src/RiscV.cpp **** //             w_sstatus(sstatus);
 111:src/RiscV.cpp **** //             w_sepc(sepc);
 112:src/RiscV.cpp **** //         }
 113:src/RiscV.cpp ****         mc_sip(SIP_SSIP);
 114:src/RiscV.cpp ****     }else if(scause==0x8000000000000009UL){
 167              		.loc 1 114 11
 168 0080 9307F0FF 		li	a5,-1
 169 0084 9397F703 		slli	a5,a5,63
 170 0088 93879700 		addi	a5,a5,9
 171 008c 631EF72E 		bne	a4,a5,.L3
 115:src/RiscV.cpp ****         //supervisor external interrupt (console)
 116:src/RiscV.cpp ****         console_handler();
 172              		.loc 1 116 9
 173              		.loc 1 116 24 is_stmt 0
 174 0090 97000000 		call	console_handler@plt
 174      E7800000 
 175              	.LVL6:
 176              	.LBE106:
 117:src/RiscV.cpp ****     }else {
 118:src/RiscV.cpp ****         //unexpected trap cause
 119:src/RiscV.cpp ****         //print (scause)
 120:src/RiscV.cpp ****         //print sepc
 121:src/RiscV.cpp ****         //print sval
 122:src/RiscV.cpp **** 
 123:src/RiscV.cpp ****     }
 124:src/RiscV.cpp **** }...
GAS LISTING /tmp/cc0qzoHg.s 			page 9


 177              		.loc 1 124 1
 178 0098 6F00002F 		j	.L3
 179              	.LVL7:
 180              	.L46:
 181              	.LBB266:
 182              	.LBB107:
  42:src/RiscV.cpp ****         if (sysCallNr == 0x01UL) {
 183              		.loc 1 42 9 is_stmt 1
 184              	.LBB108:
 185 009c 13071000 		li	a4,1
 186              	.LVL8:
 187 00a0 638CE706 		beq	a5,a4,.L48
 188              	.LBE108:
 189              	.LBE107:
 190              	.LBE266:
  48:src/RiscV.cpp ****         } else if (sysCallNr == 0x02UL) {
 191              		.loc 1 48 16
 192              	.LBB267:
 193              	.LBB251:
 194              	.LBB234:
 195              	.LBB109:
 196 00a4 13072000 		li	a4,2
 197 00a8 6384E718 		beq	a5,a4,.L49
 198              	.LBE109:
 199              	.LBE234:
 200              	.LBE251:
 201              	.LBE267:
  53:src/RiscV.cpp ****         }else if(sysCallNr == 0x11UL){
 202              		.loc 1 53 15
 203              	.LBB268:
 204              	.LBB252:
 205              	.LBB235:
 206              	.LBB203:
 207              	.LBB110:
 208 00ac 13071001 		li	a4,17
 209 00b0 6380E72A 		beq	a5,a4,.L50
 210              	.LBE110:
 211              	.LBE203:
 212              	.LBE235:
 213              	.LBE252:
 214              	.LBE268:
  61:src/RiscV.cpp ****         }else if(sysCallNr == 0x12UL){
 215              		.loc 1 61 15
 216              	.LBB269:
 217              	.LBB253:
 218              	.LBB236:
 219              	.LBB204:
 220              	.LBB175:
 221              	.LBB111:
 222 00b4 13072001 		li	a4,18
 223 00b8 638EE72E 		beq	a5,a4,.L51
 224              	.LBE111:
 225              	.LBE175:
 226              	.LBE204:
 227              	.LBE236:
 228              	.LBE253:
 229              	.LBE269:
GAS LISTING /tmp/cc0qzoHg.s 			page 10


  65:src/RiscV.cpp ****         }else if(sysCallNr == 0x13UL){
 230              		.loc 1 65 15
 231              	.LBB270:
 232              	.LBB254:
 233              	.LBB237:
 234              	.LBB205:
 235              	.LBB176:
 236              	.LBB166:
 237              	.LBB112:
 238 00bc 13073001 		li	a4,19
 239 00c0 6382E732 		beq	a5,a4,.L52
 240              	.LBE112:
 241              	.LBE166:
 242              	.LBE176:
 243              	.LBE205:
 244              	.LBE237:
 245              	.LBE254:
 246              	.LBE270:
  67:src/RiscV.cpp ****         }else if(sysCallNr==0x16UL){
 247              		.loc 1 67 15
 248              	.LBB271:
 249              	.LBB255:
 250              	.LBB238:
 251              	.LBB206:
 252              	.LBB177:
 253              	.LBB167:
 254              	.LBB156:
 255              	.LBB113:
 256 00c4 13076001 		li	a4,22
 257 00c8 6384E732 		beq	a5,a4,.L53
 258              	.LBE113:
 259              	.LBE156:
 260              	.LBE167:
 261              	.LBE177:
 262              	.LBE206:
 263              	.LBE238:
 264              	.LBE255:
 265              	.LBE271:
  71:src/RiscV.cpp ****         }else if(sysCallNr==0x15UL){
 266              		.loc 1 71 15
 267              	.LBB272:
 268              	.LBB256:
 269              	.LBB239:
 270              	.LBB207:
 271              	.LBB178:
 272              	.LBB168:
 273              	.LBB157:
 274              	.LBB147:
 275              	.LBB114:
 276 00cc 13075001 		li	a4,21
 277 00d0 6382E734 		beq	a5,a4,.L54
 278              	.LBE114:
 279              	.LBE147:
 280              	.LBE157:
 281              	.LBE168:
 282              	.LBE178:
 283              	.LBE207:
GAS LISTING /tmp/cc0qzoHg.s 			page 11


 284              	.LBE239:
 285              	.LBE256:
 286              	.LBE272:
  73:src/RiscV.cpp ****         }else if(sysCallNr == 0x21UL){
 287              		.loc 1 73 15
 288              	.LBB273:
 289              	.LBB257:
 290              	.LBB240:
 291              	.LBB208:
 292              	.LBB179:
 293              	.LBB169:
 294              	.LBB158:
 295              	.LBB148:
 296              	.LBB140:
 297              	.LBB115:
 298 00d4 13071002 		li	a4,33
 299 00d8 6388E734 		beq	a5,a4,.L55
 300              	.LBE115:
 301              	.LBE140:
 302              	.LBE148:
 303              	.LBE158:
 304              	.LBE169:
 305              	.LBE179:
 306              	.LBE208:
 307              	.LBE240:
 308              	.LBE257:
 309              	.LBE273:
  77:src/RiscV.cpp ****         }else if(sysCallNr == 0x22UL){
 310              		.loc 1 77 15
 311              	.LBB274:
 312              	.LBB258:
 313              	.LBB241:
 314              	.LBB209:
 315              	.LBB180:
 316              	.LBB170:
 317              	.LBB159:
 318              	.LBB149:
 319              	.LBB141:
 320              	.LBB135:
 321              	.LBB116:
 322 00dc 13072002 		li	a4,34
 323 00e0 6384E736 		beq	a5,a4,.L56
 324              	.LBE116:
 325              	.LBE135:
 326              	.LBE141:
 327              	.LBE149:
 328              	.LBE159:
 329              	.LBE170:
 330              	.LBE180:
 331              	.LBE209:
 332              	.LBE241:
 333              	.LBE258:
 334              	.LBE274:
  81:src/RiscV.cpp ****         }else if(sysCallNr == 0x23UL){
 335              		.loc 1 81 15
 336              	.LBB275:
 337              	.LBB259:
GAS LISTING /tmp/cc0qzoHg.s 			page 12


 338              	.LBB242:
 339              	.LBB210:
 340              	.LBB181:
 341              	.LBB171:
 342              	.LBB160:
 343              	.LBB150:
 344              	.LBB142:
 345              	.LBB136:
 346              	.LBB130:
 347              	.LBB117:
 348 00e4 13073002 		li	a4,35
 349 00e8 638CE736 		beq	a5,a4,.L57
 350              	.LBE117:
 351              	.LBE130:
 352              	.LBE136:
 353              	.LBE142:
 354              	.LBE150:
 355              	.LBE160:
 356              	.LBE171:
 357              	.LBE181:
 358              	.LBE210:
 359              	.LBE242:
 360              	.LBE259:
 361              	.LBE275:
  85:src/RiscV.cpp ****         }else if(sysCallNr == 0x24UL){
 362              		.loc 1 85 15
 363              	.LBB276:
 364              	.LBB260:
 365              	.LBB243:
 366              	.LBB211:
 367              	.LBB182:
 368              	.LBB172:
 369              	.LBB161:
 370              	.LBB151:
 371              	.LBB143:
 372              	.LBB137:
 373              	.LBB131:
 374              	.LBB126:
 375              	.LBB118:
 376 00ec 13074002 		li	a4,36
 377 00f0 6384E738 		beq	a5,a4,.L58
 378              	.LBE118:
 379              	.LBE126:
 380              	.LBE131:
 381              	.LBE137:
 382              	.LBE143:
 383              	.LBE151:
 384              	.LBE161:
 385              	.LBE172:
 386              	.LBE182:
 387              	.LBE211:
 388              	.LBE243:
 389              	.LBE260:
 390              	.LBE276:
  89:src/RiscV.cpp ****        }else if(sysCallNr==0x41UL){
 391              		.loc 1 89 14
 392              	.LBB277:
GAS LISTING /tmp/cc0qzoHg.s 			page 13


 393              	.LBB261:
 394              	.LBB244:
 395              	.LBB212:
 396              	.LBB183:
 397              	.LBB173:
 398              	.LBB162:
 399              	.LBB152:
 400              	.LBB144:
 401              	.LBB138:
 402              	.LBB132:
 403              	.LBB127:
 404              	.LBB123:
 405              	.LBB119:
 406 00f4 13071004 		li	a4,65
 407 00f8 638CE738 		beq	a5,a4,.L59
  93:src/RiscV.cpp ****         }else if(sysCallNr==0x42UL){
 408              		.loc 1 93 15
 409 00fc 13072004 		li	a4,66
 410 0100 639CE726 		bne	a5,a4,.L15
  94:src/RiscV.cpp ****             __putc((char)handle);
 411              		.loc 1 94 13
  94:src/RiscV.cpp ****             __putc((char)handle);
 412              		.loc 1 94 19 is_stmt 0
 413 0104 033584FD 		ld	a0,-40(s0)
 414 0108 1375F50F 		andi	a0,a0,0xff
 415 010c 97000000 		call	__putc@plt
 415      E7800000 
 416              	.LVL9:
 417 0114 6F004026 		j	.L15
 418              	.LVL10:
 419              	.L48:
 420              	.LBE119:
 421              	.LBE123:
 422              	.LBE127:
 423              	.LBE132:
 424              	.LBE138:
 425              	.LBE144:
 426              	.LBE152:
 427              	.LBE162:
 428              	.LBE173:
 429              	.LBE183:
 430              	.LBE212:
 431              	.LBB213:
  43:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
 432              		.loc 1 43 13 is_stmt 1
  43:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
 433              		.loc 1 43 67 is_stmt 0
 434              	#APP
 435              	# 43 "src/RiscV.cpp" 1
 436              		mv a5, a1
 437              	# 0 "" 2
 438              	.LVL11:
 439              	#NO_APP
 440 011c 2330F4FE 		sd	a5,-32(s0)
  44:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
 441              		.loc 1 44 13 is_stmt 1
  44:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
GAS LISTING /tmp/cc0qzoHg.s 			page 14


 442              		.loc 1 44 86 is_stmt 0
 443 0120 833704FE 		ld	a5,-32(s0)
 444              	.LVL12:
 445              	.LBB214:
 446              	.LBB215:
 447              		.file 3 "src/../h/../h/../h/MemoryAllocation.hpp"
   1:src/../h/../h/../h/MemoryAllocation.hpp **** #include "../lib/hw.h"
   2:src/../h/../h/../h/MemoryAllocation.hpp **** 
   3:src/../h/../h/../h/MemoryAllocation.hpp **** 
   4:src/../h/../h/../h/MemoryAllocation.hpp **** #ifndef PROJECT_BASE_MEMORYALLOCATION_HPP
   5:src/../h/../h/../h/MemoryAllocation.hpp **** #define PROJECT_BASE_MEMORYALLOCATION_HPP
   6:src/../h/../h/../h/MemoryAllocation.hpp **** 
   7:src/../h/../h/../h/MemoryAllocation.hpp **** 
   8:src/../h/../h/../h/MemoryAllocation.hpp **** class MemoryAllocation {
   9:src/../h/../h/../h/MemoryAllocation.hpp **** 
  10:src/../h/../h/../h/MemoryAllocation.hpp ****     //===========================DEFINICIJA SINGLETON KLASE POCETAK=======================k
  11:src/../h/../h/../h/MemoryAllocation.hpp **** private:
  12:src/../h/../h/../h/MemoryAllocation.hpp **** 
  13:src/../h/../h/../h/MemoryAllocation.hpp ****     struct FreeMem {
  14:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *next;
  15:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *prev;
  16:src/../h/../h/../h/MemoryAllocation.hpp ****         size_t size;
  17:src/../h/../h/../h/MemoryAllocation.hpp ****     };
  18:src/../h/../h/../h/MemoryAllocation.hpp **** 
  19:src/../h/../h/../h/MemoryAllocation.hpp **** 
  20:src/../h/../h/../h/MemoryAllocation.hpp ****     static FreeMem *fmem_head; //koja pocetna vrednost?
  21:src/../h/../h/../h/MemoryAllocation.hpp **** 
  22:src/../h/../h/../h/MemoryAllocation.hpp **** 
  23:src/../h/../h/../h/MemoryAllocation.hpp **** 
  24:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *instance;
  25:src/../h/../h/../h/MemoryAllocation.hpp ****     int data;
  26:src/../h/../h/../h/MemoryAllocation.hpp **** 
  27:src/../h/../h/../h/MemoryAllocation.hpp **** 
  28:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation() { //OVO SE SADA NIGGDE
  29:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  30:src/../h/../h/../h/MemoryAllocation.hpp ****                                     (char *) HEAP_START_ADDR); //da li smem ovo da castujem u size_
  31:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->next = nullptr;
  32:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->prev = nullptr;
  33:src/../h/../h/../h/MemoryAllocation.hpp ****         data = 0;
  34:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  35:src/../h/../h/../h/MemoryAllocation.hpp **** 
  36:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation(MemoryAllocation const &);
  37:src/../h/../h/../h/MemoryAllocation.hpp **** 
  38:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const &);
  39:src/../h/../h/../h/MemoryAllocation.hpp **** 
  40:src/../h/../h/../h/MemoryAllocation.hpp **** public:
  41:src/../h/../h/../h/MemoryAllocation.hpp **** 
  42:src/../h/../h/../h/MemoryAllocation.hpp **** 
  43:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *getInstance() {
  44:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!instance) {
  45:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head =  (FreeMem*) HEAP_START_ADDR;
  46:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  47:src/../h/../h/../h/MemoryAllocation.hpp ****                                         (char *) HEAP_START_ADDR); //da li smem ovo da castujem u s
  48:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->next = nullptr;
  49:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->prev = nullptr;
  50:src/../h/../h/../h/MemoryAllocation.hpp ****             static MemoryAllocation* instance;
  51:src/../h/../h/../h/MemoryAllocation.hpp ****             return instance;
GAS LISTING /tmp/cc0qzoHg.s 			page 15


  52:src/../h/../h/../h/MemoryAllocation.hpp ****         }
  53:src/../h/../h/../h/MemoryAllocation.hpp ****         return instance;
  54:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  55:src/../h/../h/../h/MemoryAllocation.hpp **** 
  56:src/../h/../h/../h/MemoryAllocation.hpp **** 
  57:src/../h/../h/../h/MemoryAllocation.hpp ****     int getData() {
  58:src/../h/../h/../h/MemoryAllocation.hpp ****         return this->data;
  59:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  60:src/../h/../h/../h/MemoryAllocation.hpp **** 
  61:src/../h/../h/../h/MemoryAllocation.hpp ****     void setData(int data) {
  62:src/../h/../h/../h/MemoryAllocation.hpp ****         this->data = data;
  63:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  64:src/../h/../h/../h/MemoryAllocation.hpp **** 
  65:src/../h/../h/../h/MemoryAllocation.hpp ****     /*MemoryAllocation(MemoryAllocation const&) = delete;
  66:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const&)  = delete;*/
  67:src/../h/../h/../h/MemoryAllocation.hpp **** //===========================DEFINICIJA SINGLETON KLASE KRAJ========================
  68:src/../h/../h/../h/MemoryAllocation.hpp ****     static int bytesToBlocks(size_t size){
  69:src/../h/../h/../h/MemoryAllocation.hpp ****         return (size+sizeof(FreeMem)+MEM_BLOCK_SIZE-1)/MEM_BLOCK_SIZE;
 448              		.loc 3 69 9 is_stmt 1
 449              		.loc 3 69 52 is_stmt 0
 450 0124 93877705 		addi	a5,a5,87
 451              	.LVL13:
 452              		.loc 3 69 55
 453 0128 93D76700 		srli	a5,a5,6
 454              	.LVL14:
 455              		.loc 3 69 56
 456 012c 9B870700 		sext.w	a5,a5
 457              	.LVL15:
 458              	.LBE215:
 459              	.LBE214:
 460              	.LBB216:
 461              	.LBB217:
  70:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  71:src/../h/../h/../h/MemoryAllocation.hpp **** 
  72:src/../h/../h/../h/MemoryAllocation.hpp **** 
  73:src/../h/../h/../h/MemoryAllocation.hpp **** //===========================METODE ZA ALOKACIJU MEMORIJE===========================
  74:src/../h/../h/../h/MemoryAllocation.hpp ****     static void tryToJoin (FreeMem* curr) {
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!curr) return;
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
  77:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->size += curr->next->size;
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
  81:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
  82:src/../h/../h/../h/MemoryAllocation.hpp ****         }
  83:src/../h/../h/../h/MemoryAllocation.hpp **** 
  84:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  85:src/../h/../h/../h/MemoryAllocation.hpp **** 
  86:src/../h/../h/../h/MemoryAllocation.hpp ****     //===================================== mem_free, ali sa ptr ===============
  87:src/../h/../h/../h/MemoryAllocation.hpp ****         static int mem_free(void* ptr) { //radi i kada posaljem sa &
  88:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
  90:src/../h/../h/../h/MemoryAllocation.hpp ****         {
  91:src/../h/../h/../h/MemoryAllocation.hpp ****             cur=nullptr;
  92:src/../h/../h/../h/MemoryAllocation.hpp ****         }else {
  93:src/../h/../h/../h/MemoryAllocation.hpp ****                 for (cur=fmem_head; cur->next!=ptr && ptr>(char*)(cur->next); cur=cur->next); //moz
  94:src/../h/../h/../h/MemoryAllocation.hpp ****             }
GAS LISTING /tmp/cc0qzoHg.s 			page 16


  95:src/../h/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newSeg = (FreeMem*)ptr;
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
  97:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
  99:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=cur;
 101:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 103:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 104:src/../h/../h/../h/MemoryAllocation.hpp ****                 else {
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = fmem_head;
 106:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(newSeg->next) {
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 109:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 110:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur) {
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 112:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 113:src/../h/../h/../h/MemoryAllocation.hpp ****                 else {
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                     fmem_head = newSeg;
 115:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 116:src/../h/../h/../h/MemoryAllocation.hpp ****                 // Try to merge with the previous and next segments:
 117:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(newSeg);
 118:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 119:src/../h/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 120:src/../h/../h/../h/MemoryAllocation.hpp ****             if(newSeg==nullptr){
 121:src/../h/../h/../h/MemoryAllocation.hpp ****                 return -1;
 122:src/../h/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 123:src/../h/../h/../h/MemoryAllocation.hpp **** 
 124:src/../h/../h/../h/MemoryAllocation.hpp **** 
 125:src/../h/../h/../h/MemoryAllocation.hpp ****     }
 126:src/../h/../h/../h/MemoryAllocation.hpp ****     //===================================== kraj probe ==========================
 127:src/../h/../h/../h/MemoryAllocation.hpp **** 
 128:src/../h/../h/../h/MemoryAllocation.hpp **** 
 129:src/../h/../h/../h/MemoryAllocation.hpp **** 
 130:src/../h/../h/../h/MemoryAllocation.hpp ****     /*int mem_free(char* addr, size_t size) {
 131:src/../h/../h/../h/MemoryAllocation.hpp ****         // Find the place where to insert the new free segment (just after cur):
 132:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
 133:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!fmem_head || addr<(char*)fmem_head)
 134:src/../h/../h/../h/MemoryAllocation.hpp ****             cur = 0; // insert as the first
 135:src/../h/../h/../h/MemoryAllocation.hpp ****         else
 136:src/../h/../h/../h/MemoryAllocation.hpp ****             for (cur=fmem_head; cur->next!=0 && addr>(char*)(cur->next);
 137:src/../h/../h/../h/MemoryAllocation.hpp ****                  cur=cur->next);
 138:src/../h/../h/../h/MemoryAllocation.hpp ****             // Insert the new segment after cur:
 139:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* newSeg = (FreeMem*)addr;
 140:src/../h/../h/../h/MemoryAllocation.hpp ****         newSeg->size = size;
 141:src/../h/../h/../h/MemoryAllocation.hpp ****         newSeg->prev = cur;
 142:src/../h/../h/../h/MemoryAllocation.hpp ****         if (cur) newSeg->next = cur->next;
 143:src/../h/../h/../h/MemoryAllocation.hpp ****         else newSeg->next = fmem_head;
 144:src/../h/../h/../h/MemoryAllocation.hpp ****         if (newSeg->next) newSeg->next->prev = newSeg;
 145:src/../h/../h/../h/MemoryAllocation.hpp ****         if (cur) cur->next = newSeg;
 146:src/../h/../h/../h/MemoryAllocation.hpp ****         else fmem_head = newSeg;
 147:src/../h/../h/../h/MemoryAllocation.hpp ****             // Try to merge with the previous and next segments:
 148:src/../h/../h/../h/MemoryAllocation.hpp ****         tryToJoin(newSeg);
 149:src/../h/../h/../h/MemoryAllocation.hpp ****         tryToJoin(cur);
 150:src/../h/../h/../h/MemoryAllocation.hpp ****     }*/
 151:src/../h/../h/../h/MemoryAllocation.hpp **** 
GAS LISTING /tmp/cc0qzoHg.s 			page 17


 152:src/../h/../h/../h/MemoryAllocation.hpp ****     static void* mem_alloc(size_t size) {//uopste ne radi, iako u lotsofsmallmallocs pise da radi
 153:src/../h/../h/../h/MemoryAllocation.hpp ****         //size_t x=sizeof(fmem_head);
 154:src/../h/../h/../h/MemoryAllocation.hpp ****         //pozovi ovde samo bytes to blocks od size, da ne moras to da radis iz maina
 155:src/../h/../h/../h/MemoryAllocation.hpp ****         size=(size)*(size_t)MEM_BLOCK_SIZE; //kada je ovo ukljuceno, pravi problem u memfree, so il
 462              		.loc 3 155 9 is_stmt 1
 463              		.loc 3 155 13 is_stmt 0
 464 0130 93976700 		slli	a5,a5,6
 465              	.LVL16:
 156:src/../h/../h/../h/MemoryAllocation.hpp ****         for (FreeMem* cur = fmem_head; cur != nullptr; cur=cur->next){ // U DRUGOJ ITERACIJI FMEM_H
 466              		.loc 3 156 9 is_stmt 1
 467              	.LBB218:
 468              		.loc 3 156 23 is_stmt 0
 469 0134 17070000 		la	a4,_ZN16MemoryAllocation9fmem_headE
 469      03370700 
 470 013c 03370700 		ld	a4,0(a4)
 471              	.LVL17:
 472              	.L7:
 473              		.loc 3 156 44 is_stmt 1
 474 0140 6308070C 		beqz	a4,.L6
 475              	.LBB219:
 157:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 476              		.loc 3 157 13
 477              		.loc 3 157 34 is_stmt 0
 478 0144 97060000 		la	a3,_ZN16MemoryAllocation9fmem_headE
 478      83B60600 
 479 014c 03B60600 		ld	a2,0(a3)
 480 0150 03360600 		ld	a2,0(a2)
 481              		.loc 3 157 22
 482 0154 2330C700 		sd	a2,0(a4)
 158:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->prev=fmem_head->prev;
 483              		.loc 3 158 13 is_stmt 1
 484              		.loc 3 158 34 is_stmt 0
 485 0158 83B60600 		ld	a3,0(a3)
 486 015c 83B58600 		ld	a1,8(a3)
 487              		.loc 3 158 22
 488 0160 2334B700 		sd	a1,8(a4)
 159:src/../h/../h/../h/MemoryAllocation.hpp ****             if (cur->size<size) continue;
 489              		.loc 3 159 13 is_stmt 1
 490              		.loc 3 159 22 is_stmt 0
 491 0164 83360701 		ld	a3,16(a4)
 492              		.loc 3 159 13
 493 0168 63E6F602 		bgtu	a5,a3,.L41
 160:src/../h/../h/../h/MemoryAllocation.hpp ****             if (cur->size-size<=sizeof(FreeMem)){
 494              		.loc 3 160 13 is_stmt 1
 495              	.LBB220:
 496              		.loc 3 160 26 is_stmt 0
 497 016c B386F640 		sub	a3,a3,a5
 498              		.loc 3 160 13
 499 0170 13058001 		li	a0,24
 500 0174 636CD502 		bgtu	a3,a0,.L8
 161:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur->prev) cur->prev->next = cur->next;
 501              		.loc 3 161 17 is_stmt 1
 502 0178 63820502 		beqz	a1,.L9
 503              		.loc 3 161 32
 504              		.loc 3 161 48 is_stmt 0
 505 017c 23B0C500 		sd	a2,0(a1)
 506              	.LVL18:
GAS LISTING /tmp/cc0qzoHg.s 			page 18


 507              	.L10:
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 163:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur->next) cur->next->prev = cur->prev;
 508              		.loc 3 163 17 is_stmt 1
 509              		.loc 3 163 26 is_stmt 0
 510 0180 83370700 		ld	a5,0(a4)
 511              		.loc 3 163 17
 512 0184 63860708 		beqz	a5,.L6
 513              		.loc 3 163 32 is_stmt 1
 514              		.loc 3 163 55 is_stmt 0
 515 0188 83368700 		ld	a3,8(a4)
 516              		.loc 3 163 48
 517 018c 23B4D700 		sd	a3,8(a5)
 164:src/../h/../h/../h/MemoryAllocation.hpp ****                 return cur;
 518              		.loc 3 164 17 is_stmt 1
 519              		.loc 3 164 24 is_stmt 0
 520 0190 6F000008 		j	.L6
 521              	.LVL19:
 522              	.L41:
 523              	.LBE220:
 524              	.LBE219:
 156:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 525              		.loc 3 156 59
 526 0194 13070600 		mv	a4,a2
 527              	.LVL20:
 528 0198 6FF09FFA 		j	.L7
 529              	.LVL21:
 530              	.L9:
 531              	.LBB225:
 532              	.LBB223:
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 533              		.loc 3 162 22 is_stmt 1
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 534              		.loc 3 162 32 is_stmt 0
 535 019c 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 535      83B70700 
 536              	.LVL22:
 537 01a4 23B0C700 		sd	a2,0(a5)
 538 01a8 6FF09FFD 		j	.L10
 539              	.LVL23:
 540              	.L8:
 541              	.LBB221:
 165:src/../h/../h/../h/MemoryAllocation.hpp ****             }else {
 166:src/../h/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newfrgm = (FreeMem*)((char*)cur+size);
 542              		.loc 3 166 17 is_stmt 1
 543              		.loc 3 166 26 is_stmt 0
 544 01ac B306F700 		add	a3,a4,a5
 545              	.LVL24:
 167:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev=nullptr;
 546              		.loc 3 167 17 is_stmt 1
 547              		.loc 3 167 30 is_stmt 0
 548 01b0 23B40600 		sd	zero,8(a3)
 168:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next=nullptr;
 549              		.loc 3 168 17 is_stmt 1
 550              		.loc 3 168 30 is_stmt 0
 551 01b4 23B00600 		sd	zero,0(a3)
 169:src/../h/../h/../h/MemoryAllocation.hpp ****                 //newfrgm->size=cur->size-size;// DODATO TOKOM PROBE NITI
GAS LISTING /tmp/cc0qzoHg.s 			page 19


 170:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->prev) cur->prev->next = newfrgm;
 552              		.loc 3 170 17 is_stmt 1
 553              		.loc 3 170 33 is_stmt 0
 554 01b8 03368700 		ld	a2,8(a4)
 555              		.loc 3 170 25
 556 01bc 63000606 		beqz	a2,.L12
 557              		.loc 3 170 39 is_stmt 1
 558              		.loc 3 170 55 is_stmt 0
 559 01c0 2330D600 		sd	a3,0(a2)
 560              	.L13:
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = newfrgm+sizeof(fmem_head); // ovo sam dodao sizeof da bi mi radio 
 172:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 561              		.loc 3 172 17 is_stmt 1
 562              		.loc 3 172 33 is_stmt 0
 563 01c4 03360700 		ld	a2,0(a4)
 564              		.loc 3 172 25
 565 01c8 63040600 		beqz	a2,.L14
 566              		.loc 3 172 39 is_stmt 1
 567              		.loc 3 172 55 is_stmt 0
 568 01cc 2334D600 		sd	a3,8(a2)
 569              	.L14:
 173:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev = cur->prev;
 570              		.loc 3 173 17 is_stmt 1
 571              		.loc 3 173 38 is_stmt 0
 572 01d0 03368700 		ld	a2,8(a4)
 573              		.loc 3 173 31
 574 01d4 23B4C600 		sd	a2,8(a3)
 174:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next = cur->next;
 575              		.loc 3 174 17 is_stmt 1
 576              		.loc 3 174 38 is_stmt 0
 577 01d8 83350700 		ld	a1,0(a4)
 578              		.loc 3 174 31
 579 01dc 23B0B600 		sd	a1,0(a3)
 175:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->size = cur->size-size;
 580              		.loc 3 175 17 is_stmt 1
 581              		.loc 3 175 38 is_stmt 0
 582 01e0 03370701 		ld	a4,16(a4)
 583              	.LVL25:
 584              		.loc 3 175 42
 585 01e4 B307F740 		sub	a5,a4,a5
 586              	.LVL26:
 587              		.loc 3 175 31
 588 01e8 23B8F600 		sd	a5,16(a3)
 176:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head =newfrgm+sizeof(fmem_head);
 589              		.loc 3 176 17 is_stmt 1
 590              		.loc 3 176 35 is_stmt 0
 591 01ec 1387060C 		addi	a4,a3,192
 592              		.loc 3 176 27
 593 01f0 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 593      83B50500 
 594 01f8 23B0E500 		sd	a4,0(a1)
 177:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->next=newfrgm->next;
 595              		.loc 3 177 17 is_stmt 1
 596              		.loc 3 177 42 is_stmt 0
 597 01fc 83B50600 		ld	a1,0(a3)
 598              		.loc 3 177 32
 599 0200 23B0B60C 		sd	a1,192(a3)
GAS LISTING /tmp/cc0qzoHg.s 			page 20


 178:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->prev=newfrgm->prev;
 600              		.loc 3 178 17 is_stmt 1
 601              		.loc 3 178 32 is_stmt 0
 602 0204 23B4C60C 		sd	a2,200(a3)
 179:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->size=newfrgm->size;
 603              		.loc 3 179 17 is_stmt 1
 604              		.loc 3 179 32 is_stmt 0
 605 0208 23B8F60C 		sd	a5,208(a3)
 180:src/../h/../h/../h/MemoryAllocation.hpp ****                 //fmem_head = (FreeMem*) (char*)newfrgm;
 181:src/../h/../h/../h/MemoryAllocation.hpp ****                 return newfrgm;
 606              		.loc 3 181 17 is_stmt 1
 607              		.loc 3 181 24 is_stmt 0
 608 020c 13870600 		mv	a4,a3
 609              	.LVL27:
 610              	.L6:
 611              	.LBE221:
 612              	.LBE223:
 613              	.LBE225:
 614              	.LBE218:
 615              	.LBE217:
 616              	.LBE216:
  46:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
 617              		.loc 1 46 13 is_stmt 1
  46:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
 618              		.loc 1 46 69 is_stmt 0
 619              	#APP
 620              	# 46 "src/RiscV.cpp" 1
  47:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 621              		mv a1, a4
 622              	# 0 "" 2
 623              		.loc 1 47 13 is_stmt 1
  47:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 624              		.loc 1 47 46 is_stmt 0
 625              	# 47 "src/RiscV.cpp" 1
 626              		sd a1, 88(s0)
 627              	# 0 "" 2
 628              	#NO_APP
 629              	.LBE213:
 630 0218 6F000016 		j	.L15
 631              	.LVL28:
 632              	.L12:
 633              	.LBB230:
 634              	.LBB229:
 635              	.LBB228:
 636              	.LBB227:
 637              	.LBB226:
 638              	.LBB224:
 639              	.LBB222:
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 640              		.loc 3 171 22 is_stmt 1
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 641              		.loc 3 171 41 is_stmt 0
 642 021c 1386060C 		addi	a2,a3,192
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 643              		.loc 3 171 32
 644 0220 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 644      83B50500 
GAS LISTING /tmp/cc0qzoHg.s 			page 21


 645 0228 23B0C500 		sd	a2,0(a1)
 646 022c 6FF09FF9 		j	.L13
 647              	.LVL29:
 648              	.L49:
 649              	.LBE222:
 650              	.LBE224:
 651              	.LBE226:
 652              	.LBE227:
 653              	.LBE228:
 654              	.LBE229:
 655              	.LBE230:
 656              	.LBB231:
 657              	.LBB184:
  49:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
 658              		.loc 1 49 13 is_stmt 1
  49:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
 659              		.loc 1 49 64 is_stmt 0
 660              	#APP
 661              	# 49 "src/RiscV.cpp" 1
 662              		mv a5, a1
 663              	# 0 "" 2
 664              	.LVL30:
 665              	#NO_APP
 666 0234 2330F4FC 		sd	a5,-64(s0)
  50:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
 667              		.loc 1 50 13 is_stmt 1
  50:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
 668              		.loc 1 50 47 is_stmt 0
 669 0238 033704FC 		ld	a4,-64(s0)
 670              	.LVL31:
 671              	.LBB185:
 672              	.LBB186:
  88:src/../h/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
 673              		.loc 3 88 9 is_stmt 1
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 674              		.loc 3 89 9
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 675              		.loc 3 89 12 is_stmt 0
 676 023c 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 676      83B70700 
 677 0244 83B70700 		ld	a5,0(a5)
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 678              		.loc 3 89 9
 679 0248 638E0700 		beqz	a5,.L42
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 680              		.loc 3 89 23
 681 024c 6360F702 		bltu	a4,a5,.L43
 682              	.LVL32:
 683              	.L18:
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 684              		.loc 3 93 52 is_stmt 1
 685 0250 93860700 		mv	a3,a5
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 686              		.loc 3 93 42 is_stmt 0
 687 0254 83B70700 		ld	a5,0(a5)
 688              	.LVL33:
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
GAS LISTING /tmp/cc0qzoHg.s 			page 22


 689              		.loc 3 93 52
 690 0258 630CF700 		beq	a4,a5,.L17
 691 025c E3EAE7FE 		bgtu	a4,a5,.L18
 692 0260 6F000001 		j	.L17
 693              	.LVL34:
 694              	.L42:
  91:src/../h/../h/../h/MemoryAllocation.hpp ****         }else {
 695              		.loc 3 91 16
 696 0264 93860700 		mv	a3,a5
 697 0268 6F008000 		j	.L17
 698              	.L43:
 699 026c 93060000 		li	a3,0
 700              	.LVL35:
 701              	.L17:
  95:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
 702              		.loc 3 95 17 is_stmt 1
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
 703              		.loc 3 96 17
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
 704              		.loc 3 96 29 is_stmt 0
 705 0270 23300700 		sd	zero,0(a4)
  97:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
 706              		.loc 3 97 17 is_stmt 1
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 707              		.loc 3 98 17
 708              	.LVL36:
 709              	.LBE186:
 710              	.LBE185:
 711              	.LBE184:
 712              	.LBE231:
 713              	.LBE244:
 714              	.LBE261:
 715              	.LBE277:
  69:src/../h/../h/../h/MemoryAllocation.hpp ****     }
 716              		.loc 3 69 9
 717              	.LBB278:
 718              	.LBB262:
 719              	.LBB245:
 720              	.LBB232:
 721              	.LBB199:
 722              	.LBB197:
 723              	.LBB195:
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 724              		.loc 3 98 29 is_stmt 0
 725 0274 93070004 		li	a5,64
 726 0278 2338F700 		sd	a5,16(a4)
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 727              		.loc 3 100 17 is_stmt 1
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 728              		.loc 3 100 29 is_stmt 0
 729 027c 2334D700 		sd	a3,8(a4)
 101:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 730              		.loc 3 101 17 is_stmt 1
 731 0280 63820606 		beqz	a3,.L19
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 732              		.loc 3 102 21
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
GAS LISTING /tmp/cc0qzoHg.s 			page 23


 733              		.loc 3 102 41 is_stmt 0
 734 0284 83B70600 		ld	a5,0(a3)
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 735              		.loc 3 102 34
 736 0288 2330F700 		sd	a5,0(a4)
 737              	.L20:
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 738              		.loc 3 107 17 is_stmt 1
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 739              		.loc 3 107 28 is_stmt 0
 740 028c 83370700 		ld	a5,0(a4)
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 741              		.loc 3 107 17
 742 0290 63840700 		beqz	a5,.L21
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 743              		.loc 3 108 21 is_stmt 1
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 744              		.loc 3 108 39 is_stmt 0
 745 0294 23B4E700 		sd	a4,8(a5)
 746              	.L21:
 110:src/../h/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 747              		.loc 3 110 17 is_stmt 1
 748 0298 63800606 		beqz	a3,.L22
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 749              		.loc 3 111 21
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 750              		.loc 3 111 31 is_stmt 0
 751 029c 23B0E600 		sd	a4,0(a3)
 752              	.L23:
 117:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 753              		.loc 3 117 13 is_stmt 1
 754              	.LVL37:
 755              	.LBB187:
 756              	.LBB188:
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
 757              		.loc 3 75 9
 758 02a0 630C0700 		beqz	a4,.L24
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 759              		.loc 3 76 9
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 760              		.loc 3 76 19 is_stmt 0
 761 02a4 83370700 		ld	a5,0(a4)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 762              		.loc 3 76 9
 763 02a8 63880700 		beqz	a5,.L24
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 764              		.loc 3 76 45
 765 02ac 03360701 		ld	a2,16(a4)
 766              	.LVL38:
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 767              		.loc 3 76 38
 768 02b0 B305C700 		add	a1,a4,a2
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 769              		.loc 3 76 24
 770 02b4 638AB704 		beq	a5,a1,.L60
 771              	.L24:
 772              	.LVL39:
GAS LISTING /tmp/cc0qzoHg.s 			page 24


 773              	.LBE188:
 774              	.LBE187:
 118:src/../h/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 775              		.loc 3 118 13 is_stmt 1
 776              	.LBB190:
 777              	.LBB191:
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
 778              		.loc 3 75 9
 779 02b8 638C0600 		beqz	a3,.L25
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 780              		.loc 3 76 9
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 781              		.loc 3 76 19 is_stmt 0
 782 02bc 83B70600 		ld	a5,0(a3)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 783              		.loc 3 76 9
 784 02c0 63880700 		beqz	a5,.L25
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 785              		.loc 3 76 45
 786 02c4 03B60601 		ld	a2,16(a3)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 787              		.loc 3 76 38
 788 02c8 B385C600 		add	a1,a3,a2
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 789              		.loc 3 76 24
 790 02cc 638EB704 		beq	a5,a1,.L61
 791              	.L25:
 792              	.LVL40:
 793              	.LBE191:
 794              	.LBE190:
 120:src/../h/../h/../h/MemoryAllocation.hpp ****                 return -1;
 795              		.loc 3 120 13 is_stmt 1
 796 02d0 630C0706 		beqz	a4,.L62
 122:src/../h/../h/../h/MemoryAllocation.hpp **** 
 797              		.loc 3 122 26 is_stmt 0
 798 02d4 93070000 		li	a5,0
 799              	.L26:
 800              	.LVL41:
 801              	.LBE195:
 802              	.LBE197:
  51:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
 803              		.loc 1 51 13 is_stmt 1
  51:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
 804              		.loc 1 51 60 is_stmt 0
 805              	#APP
 806              	# 51 "src/RiscV.cpp" 1
  52:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
 807              		mv a1, a5
 808              	# 0 "" 2
 809              		.loc 1 52 13 is_stmt 1
  52:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
 810              		.loc 1 52 46 is_stmt 0
 811              	# 52 "src/RiscV.cpp" 1
 812              		sd a1, 88(s0)
 813              	# 0 "" 2
 814              	#NO_APP
 815              	.LBE199:
GAS LISTING /tmp/cc0qzoHg.s 			page 25


 816 02e0 6F008009 		j	.L15
 817              	.LVL42:
 818              	.L19:
 819              	.LBB200:
 820              	.LBB198:
 821              	.LBB196:
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 822              		.loc 3 105 21 is_stmt 1
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 823              		.loc 3 105 34 is_stmt 0
 824 02e4 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 824      83B70700 
 825 02ec 83B70700 		ld	a5,0(a5)
 826 02f0 2330F700 		sd	a5,0(a4)
 827 02f4 6FF09FF9 		j	.L20
 828              	.L22:
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 829              		.loc 3 114 21 is_stmt 1
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 830              		.loc 3 114 31 is_stmt 0
 831 02f8 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 831      83B70700 
 832 0300 23B0E700 		sd	a4,0(a5)
 833 0304 6FF0DFF9 		j	.L23
 834              	.LVL43:
 835              	.L60:
 836              	.LBB193:
 837              	.LBB189:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 838              		.loc 3 78 13 is_stmt 1
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 839              		.loc 3 78 39 is_stmt 0
 840 0308 83B50701 		ld	a1,16(a5)
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 841              		.loc 3 78 24
 842 030c 3306B600 		add	a2,a2,a1
 843 0310 2338C700 		sd	a2,16(a4)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 844              		.loc 3 79 13 is_stmt 1
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 845              		.loc 3 79 38 is_stmt 0
 846 0314 83B70700 		ld	a5,0(a5)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 847              		.loc 3 79 24
 848 0318 2330F700 		sd	a5,0(a4)
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 849              		.loc 3 80 13 is_stmt 1
 850 031c E38E07F8 		beqz	a5,.L24
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 851              		.loc 3 80 29
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 852              		.loc 3 80 46 is_stmt 0
 853 0320 23B4E700 		sd	a4,8(a5)
 854 0324 6FF05FF9 		j	.L24
 855              	.LVL44:
 856              	.L61:
 857              	.LBE189:
GAS LISTING /tmp/cc0qzoHg.s 			page 26


 858              	.LBE193:
 859              	.LBB194:
 860              	.LBB192:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 861              		.loc 3 78 13 is_stmt 1
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 862              		.loc 3 78 39 is_stmt 0
 863 0328 83B50701 		ld	a1,16(a5)
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 864              		.loc 3 78 24
 865 032c 3306B600 		add	a2,a2,a1
 866 0330 23B8C600 		sd	a2,16(a3)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 867              		.loc 3 79 13 is_stmt 1
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 868              		.loc 3 79 38 is_stmt 0
 869 0334 83B70700 		ld	a5,0(a5)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 870              		.loc 3 79 24
 871 0338 23B0F600 		sd	a5,0(a3)
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 872              		.loc 3 80 13 is_stmt 1
 873 033c E38A07F8 		beqz	a5,.L25
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 874              		.loc 3 80 29
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 875              		.loc 3 80 46 is_stmt 0
 876 0340 23B4D700 		sd	a3,8(a5)
 877 0344 6FF0DFF8 		j	.L25
 878              	.LVL45:
 879              	.L62:
 880              	.LBE192:
 881              	.LBE194:
 121:src/../h/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 882              		.loc 3 121 25
 883 0348 9307F0FF 		li	a5,-1
 884 034c 6FF0DFF8 		j	.L26
 885              	.LVL46:
 886              	.L50:
 887              	.LBE196:
 888              	.LBE198:
 889              	.LBE200:
 890              	.LBB201:
  54:src/RiscV.cpp ****             if((bool)a4==false){
 891              		.loc 1 54 13 is_stmt 1
  54:src/RiscV.cpp ****             if((bool)a4==false){
 892              		.loc 1 54 24 is_stmt 0
 893 0350 833784FE 		ld	a5,-24(s0)
 894              	.LVL47:
  54:src/RiscV.cpp ****             if((bool)a4==false){
 895              		.loc 1 54 13
 896 0354 63920704 		bnez	a5,.L28
  55:src/RiscV.cpp ****                 ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg,
 897              		.loc 1 55 17 is_stmt 1
  55:src/RiscV.cpp ****                 ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg,
 898              		.loc 1 55 42 is_stmt 0
 899 0358 033504FD 		ld	a0,-48(s0)
GAS LISTING /tmp/cc0qzoHg.s 			page 27


 900 035c 833584FD 		ld	a1,-40(s0)
 901 0360 033684FC 		ld	a2,-56(s0)
 902              	.LVL48:
 903 0364 93060000 		li	a3,0
 904 0368 97000000 		call	_ZN3TCB12createThreadEPFvPvEPPS_S0_b@plt
 904      E7800000 
 905              	.LVL49:
 906              	.L29:
  59:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 907              		.loc 1 59 13 is_stmt 1
  59:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 908              		.loc 1 59 68 is_stmt 0
 909              	#APP
 910              	# 59 "src/RiscV.cpp" 1
  60:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 911              		mv a1, a0
 912              	# 0 "" 2
 913              		.loc 1 60 13 is_stmt 1
  60:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 914              		.loc 1 60 46 is_stmt 0
 915              	# 60 "src/RiscV.cpp" 1
 916              		sd a1, 88(s0)
 917              	# 0 "" 2
 918              	.LVL50:
 919              	#NO_APP
 920              	.L15:
 921              	.LBE201:
 922              	.LBE232:
 923              	.LBE245:
 100:src/RiscV.cpp ****         w_sstatus(sstatus);
 924              		.loc 1 100 9 is_stmt 1
 100:src/RiscV.cpp ****         w_sstatus(sstatus);
 925              		.loc 1 100 18 is_stmt 0
 926 0378 833704FB 		ld	a5,-80(s0)
 927              	.LVL51:
 928              	.LBB246:
 929              	.LBB247:
 159:src/../h/RiscV.hpp **** }
 160:src/../h/RiscV.hpp **** 
 161:src/../h/RiscV.hpp **** inline void RiscV::w_sstatus(uint64 volatile sstatus) {
 162:src/../h/RiscV.hpp ****     __asm__ volatile("csrw sstatus, %[sstatus]": : [sstatus] "r"(sstatus));
 930              		.loc 2 162 5 is_stmt 1
 931              		.loc 2 162 75 is_stmt 0
 932              	#APP
 933              	# 162 "src/../h/RiscV.hpp" 1
 163              	}
 934              		csrw sstatus, a5
 935              	# 0 "" 2
 936              	.LVL52:
 937              	#NO_APP
 938              	.LBE247:
 939              	.LBE246:
 101:src/RiscV.cpp ****         w_sepc(sepc);
 940              		.loc 1 101 9 is_stmt 1
 101:src/RiscV.cpp ****         w_sepc(sepc);
 941              		.loc 1 101 15 is_stmt 0
 942 0380 833784FB 		ld	a5,-72(s0)
GAS LISTING /tmp/cc0qzoHg.s 			page 28


 943              	.LVL53:
 944              	.LBB248:
 945              	.LBB249:
 106:src/../h/RiscV.hpp **** }
 946              		.loc 2 106 5 is_stmt 1
 106:src/../h/RiscV.hpp **** }
 947              		.loc 2 106 64 is_stmt 0
 948              	#APP
 949              	# 106 "src/../h/RiscV.hpp" 1
 950              		csrw sepc, a5
 951              	# 0 "" 2
 952              	.LVL54:
 953              	#NO_APP
 954              	.L3:
 955              	.LBE249:
 956              	.LBE248:
 957              	.LBE262:
 958              	.LBE278:
 959              		.loc 1 124 1
 960 0388 83308105 		ld	ra,88(sp)
 961              		.cfi_remember_state
 962              		.cfi_restore 1
 963 038c 03340105 		ld	s0,80(sp)
 964              		.cfi_restore 8
 965              		.cfi_def_cfa 2, 96
 966 0390 13010106 		addi	sp,sp,96
 967              		.cfi_def_cfa_offset 0
 968 0394 67800000 		jr	ra
 969              	.LVL55:
 970              	.L28:
 971              		.cfi_restore_state
 972              	.LBB279:
 973              	.LBB263:
 974              	.LBB250:
 975              	.LBB233:
 976              	.LBB202:
  57:src/RiscV.cpp ****                 ret_val = TCB::createThread((TCB::Body) start_routine, (thread_t *) handle, (void *
 977              		.loc 1 57 17 is_stmt 1
  57:src/RiscV.cpp ****                 ret_val = TCB::createThread((TCB::Body) start_routine, (thread_t *) handle, (void *
 978              		.loc 1 57 44 is_stmt 0
 979 0398 033504FD 		ld	a0,-48(s0)
 980 039c 833584FD 		ld	a1,-40(s0)
 981 03a0 033684FC 		ld	a2,-56(s0)
 982              	.LVL56:
 983 03a4 93061000 		li	a3,1
 984 03a8 97000000 		call	_ZN3TCB12createThreadEPFvPvEPPS_S0_b@plt
 984      E7800000 
 985              	.LVL57:
 986 03b0 6FF01FFC 		j	.L29
 987              	.LVL58:
 988              	.L51:
 989              	.LBB174:
  62:src/RiscV.cpp ****             ret_value_thr_exit=TCB::thread_exit();
 990              		.loc 1 62 13 is_stmt 1
 991              	.LBB163:
 992              	.LBB164:
 993              		.file 4 "src/../h/tcb.hpp"
GAS LISTING /tmp/cc0qzoHg.s 			page 29


   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 8/14/22.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "../h/Scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "../h/MemoryAllocation.hpp"
  10:src/../h/tcb.hpp **** #include "../h/semaphore.hpp"
  11:src/../h/tcb.hpp **** #include "../h/printing.hpp"
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** class TCB {
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp **** public:
  16:src/../h/tcb.hpp ****     void* operator new(uint64 n){//promenjeno uint64 u size_t
  17:src/../h/tcb.hpp ****         return MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(n)); //njemu je samo __m
  18:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  19:src/../h/tcb.hpp ****     }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void* operator new[](uint64 n){
  22:src/../h/tcb.hpp ****         return MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(n));
  23:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  24:src/../h/tcb.hpp ****     }
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept {
  27:src/../h/tcb.hpp ****         MemoryAllocation::mem_free(p);
  28:src/../h/tcb.hpp ****         //__mem_free(p);
  29:src/../h/tcb.hpp ****     }
  30:src/../h/tcb.hpp **** 
  31:src/../h/tcb.hpp ****     void operator delete[] (void *p) noexcept{
  32:src/../h/tcb.hpp ****         MemoryAllocation::mem_free(p);
  33:src/../h/tcb.hpp ****         //__mem_free(p);
  34:src/../h/tcb.hpp ****     }
  35:src/../h/tcb.hpp **** 
  36:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  37:src/../h/tcb.hpp **** 
  38:src/../h/tcb.hpp ****     using Body = void (*)(void*); //mislim da mora da se promeni ovaj body sa nekim argumentima, i 
  39:src/../h/tcb.hpp **** 
  40:src/../h/tcb.hpp ****     static int createThread(Body body, TCB** handle, void* arguments, bool started);
  41:src/../h/tcb.hpp **** 
  42:src/../h/tcb.hpp ****     static void thread_dispatch(){dispatch();}
  43:src/../h/tcb.hpp **** 
  44:src/../h/tcb.hpp ****     static int thread_exit(){
  45:src/../h/tcb.hpp ****         running->setFinished(true);
 994              		.loc 4 45 9
 995              		.loc 4 45 29 is_stmt 0
 996 03b4 93051000 		li	a1,1
 997 03b8 97070000 		la	a5,_ZN3TCB7runningE
 997      83B70700 
 998              	.LVL59:
 999 03c0 03B50700 		ld	a0,0(a5)
 1000 03c4 97000000 		call	_ZN3TCB11setFinishedEb@plt
 1000      E7800000 
 1001              	.LVL60:
  46:src/../h/tcb.hpp ****         dispatch();
 1002              		.loc 4 46 9 is_stmt 1
GAS LISTING /tmp/cc0qzoHg.s 			page 30


 1003              		.loc 4 46 17 is_stmt 0
 1004 03cc 97000000 		call	_ZN3TCB8dispatchEv@plt
 1004      E7800000 
 1005              	.LVL61:
  47:src/../h/tcb.hpp ****         //running nullptr->negativna
  48:src/../h/tcb.hpp ****         return 0;
 1006              		.loc 4 48 9 is_stmt 1
 1007              	.LBE164:
 1008              	.LBE163:
  63:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
 1009              		.loc 1 63 13
  63:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
 1010              		.loc 1 63 91 is_stmt 0
 1011 03d4 93070000 		li	a5,0
 1012              	#APP
 1013              	# 63 "src/RiscV.cpp" 1
  64:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1014              		mv a1, a5
 1015              	# 0 "" 2
 1016              		.loc 1 64 13 is_stmt 1
  64:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1017              		.loc 1 64 46 is_stmt 0
 1018              	# 64 "src/RiscV.cpp" 1
 1019              		sd a1, 88(s0)
 1020              	# 0 "" 2
 1021              	#NO_APP
 1022 03e0 6FF09FF9 		j	.L15
 1023              	.LVL62:
 1024              	.L52:
 1025              	.LBB165:
  66:src/RiscV.cpp ****             TCB::thread_dispatch();
 1026              		.loc 1 66 13 is_stmt 1
 1027              	.LBB153:
 1028              	.LBB154:
  42:src/../h/tcb.hpp **** 
 1029              		.loc 4 42 35
  42:src/../h/tcb.hpp **** 
 1030              		.loc 4 42 43 is_stmt 0
 1031 03e4 97000000 		call	_ZN3TCB8dispatchEv@plt
 1031      E7800000 
 1032              	.LVL63:
  42:src/../h/tcb.hpp **** 
 1033              		.loc 4 42 46
 1034 03ec 6FF0DFF8 		j	.L15
 1035              	.LVL64:
 1036              	.L53:
 1037              	.LBE154:
 1038              	.LBE153:
 1039              	.LBB155:
 1040              	.LBB145:
  68:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)a4, (thread_t*) handle, (void*)arg, false);
 1041              		.loc 1 68 13 is_stmt 1
  68:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)a4, (thread_t*) handle, (void*)arg, false);
 1042              		.loc 1 68 42 is_stmt 0
 1043 03f0 033584FE 		ld	a0,-24(s0)
 1044 03f4 833584FD 		ld	a1,-40(s0)
 1045 03f8 033684FC 		ld	a2,-56(s0)
GAS LISTING /tmp/cc0qzoHg.s 			page 31


 1046              	.LVL65:
 1047 03fc 93060000 		li	a3,0
 1048 0400 97000000 		call	_ZN3TCB12createThreadEPFvPvEPPS_S0_b@plt
 1048      E7800000 
 1049              	.LVL66:
  69:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 1050              		.loc 1 69 13 is_stmt 1
  69:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 1051              		.loc 1 69 68 is_stmt 0
 1052              	#APP
 1053              	# 69 "src/RiscV.cpp" 1
  70:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1054              		mv a1, a0
 1055              	# 0 "" 2
 1056              		.loc 1 70 13 is_stmt 1
  70:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1057              		.loc 1 70 46 is_stmt 0
 1058              	# 70 "src/RiscV.cpp" 1
 1059              		sd a1, 88(s0)
 1060              	# 0 "" 2
 1061              	#NO_APP
 1062              	.LBE145:
 1063 0410 6FF09FF6 		j	.L15
 1064              	.LVL67:
 1065              	.L54:
 1066              	.LBB146:
  72:src/RiscV.cpp ****             TCB::startThread((thread_t*)handle, (TCB::Body)start_routine);
 1067              		.loc 1 72 13 is_stmt 1
  72:src/RiscV.cpp ****             TCB::startThread((thread_t*)handle, (TCB::Body)start_routine);
 1068              		.loc 1 72 29 is_stmt 0
 1069 0414 033584FD 		ld	a0,-40(s0)
 1070 0418 833504FD 		ld	a1,-48(s0)
 1071 041c 97000000 		call	_ZN3TCB11startThreadEPPS_PFvPvE@plt
 1071      E7800000 
 1072              	.LVL68:
 1073 0424 6FF05FF5 		j	.L15
 1074              	.LVL69:
 1075              	.L55:
 1076              	.LBB139:
 1077              	.LBB133:
  74:src/RiscV.cpp ****             int retval = semaphore::semOpen((sem_t*)handle, (unsigned)start_routine);
 1078              		.loc 1 74 13 is_stmt 1
  74:src/RiscV.cpp ****             int retval = semaphore::semOpen((sem_t*)handle, (unsigned)start_routine);
 1079              		.loc 1 74 44 is_stmt 0
 1080 0428 033584FD 		ld	a0,-40(s0)
 1081 042c 833504FD 		ld	a1,-48(s0)
 1082 0430 9B850500 		sext.w	a1,a1
 1083 0434 97000000 		call	_ZN9semaphore7semOpenEPPS_j@plt
 1083      E7800000 
 1084              	.LVL70:
  75:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1085              		.loc 1 75 13 is_stmt 1
  75:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1086              		.loc 1 75 67 is_stmt 0
 1087              	#APP
 1088              	# 75 "src/RiscV.cpp" 1
  76:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
GAS LISTING /tmp/cc0qzoHg.s 			page 32


 1089              		mv a1, a0
 1090              	# 0 "" 2
 1091              		.loc 1 76 13 is_stmt 1
  76:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1092              		.loc 1 76 46 is_stmt 0
 1093              	# 76 "src/RiscV.cpp" 1
 1094              		sd a1, 88(s0)
 1095              	# 0 "" 2
 1096              	#NO_APP
 1097              	.LBE133:
 1098 0444 6FF05FF3 		j	.L15
 1099              	.LVL71:
 1100              	.L56:
 1101              	.LBB134:
 1102              	.LBB128:
  78:src/RiscV.cpp ****             int retval = semaphore::semClose((sem_t)handle);
 1103              		.loc 1 78 13 is_stmt 1
  78:src/RiscV.cpp ****             int retval = semaphore::semClose((sem_t)handle);
 1104              		.loc 1 78 45 is_stmt 0
 1105 0448 033584FD 		ld	a0,-40(s0)
 1106 044c 97000000 		call	_ZN9semaphore8semCloseEPS_@plt
 1106      E7800000 
 1107              	.LVL72:
  79:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1108              		.loc 1 79 13 is_stmt 1
  79:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1109              		.loc 1 79 67 is_stmt 0
 1110              	#APP
 1111              	# 79 "src/RiscV.cpp" 1
  80:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1112              		mv a1, a0
 1113              	# 0 "" 2
 1114              		.loc 1 80 13 is_stmt 1
  80:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1115              		.loc 1 80 46 is_stmt 0
 1116              	# 80 "src/RiscV.cpp" 1
 1117              		sd a1, 88(s0)
 1118              	# 0 "" 2
 1119              	#NO_APP
 1120              	.LBE128:
 1121 045c 6FF0DFF1 		j	.L15
 1122              	.LVL73:
 1123              	.L57:
 1124              	.LBB129:
 1125              	.LBB124:
  82:src/RiscV.cpp ****             int retval = semaphore::semWait((sem_t)handle);
 1126              		.loc 1 82 13 is_stmt 1
  82:src/RiscV.cpp ****             int retval = semaphore::semWait((sem_t)handle);
 1127              		.loc 1 82 44 is_stmt 0
 1128 0460 033584FD 		ld	a0,-40(s0)
 1129 0464 97000000 		call	_ZN9semaphore7semWaitEPS_@plt
 1129      E7800000 
 1130              	.LVL74:
  83:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1131              		.loc 1 83 13 is_stmt 1
  83:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1132              		.loc 1 83 67 is_stmt 0
GAS LISTING /tmp/cc0qzoHg.s 			page 33


 1133              	#APP
 1134              	# 83 "src/RiscV.cpp" 1
  84:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1135              		mv a1, a0
 1136              	# 0 "" 2
 1137              		.loc 1 84 13 is_stmt 1
  84:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1138              		.loc 1 84 46 is_stmt 0
 1139              	# 84 "src/RiscV.cpp" 1
 1140              		sd a1, 88(s0)
 1141              	# 0 "" 2
 1142              	#NO_APP
 1143              	.LBE124:
 1144 0474 6FF05FF0 		j	.L15
 1145              	.LVL75:
 1146              	.L58:
 1147              	.LBB125:
 1148              	.LBB121:
  86:src/RiscV.cpp ****             int retval = semaphore::semSignal((sem_t)handle);
 1149              		.loc 1 86 13 is_stmt 1
  86:src/RiscV.cpp ****             int retval = semaphore::semSignal((sem_t)handle);
 1150              		.loc 1 86 46 is_stmt 0
 1151 0478 033584FD 		ld	a0,-40(s0)
 1152 047c 97000000 		call	_ZN9semaphore9semSignalEPS_@plt
 1152      E7800000 
 1153              	.LVL76:
  87:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1154              		.loc 1 87 13 is_stmt 1
  87:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1155              		.loc 1 87 67 is_stmt 0
 1156              	#APP
 1157              	# 87 "src/RiscV.cpp" 1
  88:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1158              		mv a1, a0
 1159              	# 0 "" 2
 1160              		.loc 1 88 13 is_stmt 1
  88:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1161              		.loc 1 88 46 is_stmt 0
 1162              	# 88 "src/RiscV.cpp" 1
 1163              		sd a1, 88(s0)
 1164              	# 0 "" 2
 1165              	#NO_APP
 1166              	.LBE121:
 1167 048c 6FF0DFEE 		j	.L15
 1168              	.LVL77:
 1169              	.L59:
 1170              	.LBB122:
 1171              	.LBB120:
  90:src/RiscV.cpp ****             char retval = __getc();
 1172              		.loc 1 90 13 is_stmt 1
  90:src/RiscV.cpp ****             char retval = __getc();
 1173              		.loc 1 90 33 is_stmt 0
 1174 0490 97000000 		call	__getc@plt
 1174      E7800000 
 1175              	.LVL78:
  91:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1176              		.loc 1 91 13 is_stmt 1
GAS LISTING /tmp/cc0qzoHg.s 			page 34


  91:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1177              		.loc 1 91 67 is_stmt 0
 1178              	#APP
 1179              	# 91 "src/RiscV.cpp" 1
  92:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1180              		mv a1, a0
 1181              	# 0 "" 2
 1182              		.loc 1 92 13 is_stmt 1
  92:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1183              		.loc 1 92 46 is_stmt 0
 1184              	# 92 "src/RiscV.cpp" 1
 1185              		sd a1, 88(s0)
 1186              	# 0 "" 2
 1187              	#NO_APP
 1188              	.LBE120:
 1189 04a0 6FF09FED 		j	.L15
 1190              	.LVL79:
 1191              	.L47:
 1192              	.LBE122:
 1193              	.LBE125:
 1194              	.LBE129:
 1195              	.LBE134:
 1196              	.LBE139:
 1197              	.LBE146:
 1198              	.LBE155:
 1199              	.LBE165:
 1200              	.LBE174:
 1201              	.LBE202:
 1202              	.LBE233:
 1203              	.LBE250:
 1204              	.LBE263:
 113:src/RiscV.cpp ****         mc_sip(SIP_SSIP);
 1205              		.loc 1 113 9 is_stmt 1
 1206              	.LBB264:
 1207              	.LBB265:
 134:src/../h/RiscV.hpp **** }
 1208              		.loc 2 134 5
 134:src/../h/RiscV.hpp **** }
 1209              		.loc 2 134 63 is_stmt 0
 1210 04a4 93072000 		li	a5,2
 1211              	#APP
 1212              	# 134 "src/../h/RiscV.hpp" 1
 135:src/../h/RiscV.hpp **** 
 1213              		csrc sip, a5
 1214              	# 0 "" 2
 1215              		.loc 2 135 1
 1216              	#NO_APP
 1217 04ac 6FF0DFED 		j	.L3
 1218              	.LBE265:
 1219              	.LBE264:
 1220              	.LBE279:
 1221              		.cfi_endproc
 1222              	.LFE49:
 1224              	.Letext0:
 1225              		.file 5 "src/../h/../lib/hw.h"
 1226              		.file 6 "src/../h/../h/semaphore.hpp"
 1227              		.file 7 "src/../h/../h/../h/syscall_c.hpp"
GAS LISTING /tmp/cc0qzoHg.s 			page 35


 1228              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/cc0qzoHg.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 RiscV.cpp
     /tmp/cc0qzoHg.s:9      .text:0000000000000000 _ZN5RiscV10popSppSpieEv
     /tmp/cc0qzoHg.s:13     .text:0000000000000000 .L0 
     /tmp/cc0qzoHg.s:14     .text:0000000000000000 .L0 
     /tmp/cc0qzoHg.s:15     .text:0000000000000004 .L0 
     /tmp/cc0qzoHg.s:17     .text:0000000000000008 .L0 
     /tmp/cc0qzoHg.s:19     .text:000000000000000c .L0 
     /tmp/cc0qzoHg.s:21     .text:000000000000000c .L0 
       src/RiscV.cpp:14     .text:000000000000000c .L0 
     /tmp/cc0qzoHg.s:27     .text:0000000000000010 .L0 
       src/RiscV.cpp:15     .text:0000000000000010 .L0 
     /tmp/cc0qzoHg.s:33     .text:0000000000000014 .L0 
     /tmp/cc0qzoHg.s:34     .text:0000000000000018 .L0 
     /tmp/cc0qzoHg.s:35     .text:0000000000000018 .L0 
     /tmp/cc0qzoHg.s:37     .text:000000000000001c .L0 
     /tmp/cc0qzoHg.s:39     .text:0000000000000020 .L0 
     /tmp/cc0qzoHg.s:45     .text:0000000000000020 _ZN5RiscV20handleSupervisorTrapEv
     /tmp/cc0qzoHg.s:48     .text:0000000000000020 .L0 
     /tmp/cc0qzoHg.s:49     .text:0000000000000020 .L0 
     /tmp/cc0qzoHg.s:50     .text:0000000000000024 .L0 
     /tmp/cc0qzoHg.s:53     .text:000000000000002c .L0 
     /tmp/cc0qzoHg.s:54     .text:000000000000002c .L0 
     /tmp/cc0qzoHg.s:56     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:58     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:59     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:61     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:62     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:63     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:64     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:65     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:66     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:67     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:68     .text:0000000000000030 .L0 
       src/RiscV.cpp:29     .text:0000000000000030 .L0 
     /tmp/cc0qzoHg.s:74     .text:0000000000000034 .L0 
       src/RiscV.cpp:30     .text:0000000000000034 .L0 
     /tmp/cc0qzoHg.s:79     .text:0000000000000038 .L0 
       src/RiscV.cpp:31     .text:0000000000000038 .L0 
     /tmp/cc0qzoHg.s:84     .text:000000000000003c .L0 
       src/RiscV.cpp:32     .text:000000000000003c .L0 
     /tmp/cc0qzoHg.s:89     .text:0000000000000040 .L0 
     /tmp/cc0qzoHg.s:90     .text:0000000000000040 .L0 
     /tmp/cc0qzoHg.s:95     .text:0000000000000040 .L0 
     /tmp/cc0qzoHg.s:96     .text:0000000000000040 .L0 
     /tmp/cc0qzoHg.s:97     .text:0000000000000040 .L0 
  src/../h/RiscV.hpp:89     .text:0000000000000040 .L0 
     /tmp/cc0qzoHg.s:105    .text:0000000000000048 .L0 
     /tmp/cc0qzoHg.s:106    .text:0000000000000048 .L0 
     /tmp/cc0qzoHg.s:113    .text:000000000000004c .L0 
     /tmp/cc0qzoHg.s:114    .text:000000000000004c .L0 
     /tmp/cc0qzoHg.s:115    .text:000000000000004c .L0 
  src/../h/RiscV.hpp:101    .text:000000000000004c .L0 
     /tmp/cc0qzoHg.s:125    .text:0000000000000050 .L0 
     /tmp/cc0qzoHg.s:126    .text:0000000000000050 .L0 
     /tmp/cc0qzoHg.s:128    .text:0000000000000054 .L0 
     /tmp/cc0qzoHg.s:132    .text:0000000000000058 .L0 
GAS LISTING /tmp/cc0qzoHg.s 			page 37


     /tmp/cc0qzoHg.s:133    .text:0000000000000058 .L0 
     /tmp/cc0qzoHg.s:134    .text:0000000000000058 .L0 
  src/../h/RiscV.hpp:157    .text:0000000000000058 .L0 
     /tmp/cc0qzoHg.s:144    .text:000000000000005c .L0 
     /tmp/cc0qzoHg.s:145    .text:000000000000005c .L0 
     /tmp/cc0qzoHg.s:147    .text:0000000000000060 .L0 
       src/RiscV.cpp:40     .text:0000000000000060 .L0 
     /tmp/cc0qzoHg.s:156    .text:0000000000000064 .L0 
     /tmp/cc0qzoHg.s:157    .text:0000000000000064 .L0 
     /tmp/cc0qzoHg.s:159    .text:0000000000000068 .L0 
     /tmp/cc0qzoHg.s:162    .text:0000000000000070 .L0 
     /tmp/cc0qzoHg.s:168    .text:0000000000000080 .L0 
     /tmp/cc0qzoHg.s:173    .text:0000000000000090 .L0 
     /tmp/cc0qzoHg.s:174    .text:0000000000000090 .L0 
     /tmp/cc0qzoHg.s:178    .text:0000000000000098 .L0 
     /tmp/cc0qzoHg.s:185    .text:000000000000009c .L0 
     /tmp/cc0qzoHg.s:196    .text:00000000000000a4 .L0 
     /tmp/cc0qzoHg.s:208    .text:00000000000000ac .L0 
     /tmp/cc0qzoHg.s:222    .text:00000000000000b4 .L0 
     /tmp/cc0qzoHg.s:238    .text:00000000000000bc .L0 
     /tmp/cc0qzoHg.s:256    .text:00000000000000c4 .L0 
     /tmp/cc0qzoHg.s:276    .text:00000000000000cc .L0 
     /tmp/cc0qzoHg.s:298    .text:00000000000000d4 .L0 
     /tmp/cc0qzoHg.s:322    .text:00000000000000dc .L0 
     /tmp/cc0qzoHg.s:348    .text:00000000000000e4 .L0 
     /tmp/cc0qzoHg.s:376    .text:00000000000000ec .L0 
     /tmp/cc0qzoHg.s:406    .text:00000000000000f4 .L0 
     /tmp/cc0qzoHg.s:409    .text:00000000000000fc .L0 
     /tmp/cc0qzoHg.s:412    .text:0000000000000104 .L0 
     /tmp/cc0qzoHg.s:413    .text:0000000000000104 .L0 
     /tmp/cc0qzoHg.s:433    .text:0000000000000118 .L0 
       src/RiscV.cpp:43     .text:0000000000000118 .L0 
     /tmp/cc0qzoHg.s:442    .text:0000000000000120 .L0 
     /tmp/cc0qzoHg.s:443    .text:0000000000000120 .L0 
     /tmp/cc0qzoHg.s:449    .text:0000000000000124 .L0 
     /tmp/cc0qzoHg.s:450    .text:0000000000000124 .L0 
     /tmp/cc0qzoHg.s:453    .text:0000000000000128 .L0 
     /tmp/cc0qzoHg.s:456    .text:000000000000012c .L0 
     /tmp/cc0qzoHg.s:463    .text:0000000000000130 .L0 
     /tmp/cc0qzoHg.s:464    .text:0000000000000130 .L0 
     /tmp/cc0qzoHg.s:468    .text:0000000000000134 .L0 
     /tmp/cc0qzoHg.s:469    .text:0000000000000134 .L0 
     /tmp/cc0qzoHg.s:474    .text:0000000000000140 .L0 
     /tmp/cc0qzoHg.s:477    .text:0000000000000144 .L0 
     /tmp/cc0qzoHg.s:478    .text:0000000000000144 .L0 
     /tmp/cc0qzoHg.s:482    .text:0000000000000154 .L0 
     /tmp/cc0qzoHg.s:484    .text:0000000000000158 .L0 
     /tmp/cc0qzoHg.s:485    .text:0000000000000158 .L0 
     /tmp/cc0qzoHg.s:488    .text:0000000000000160 .L0 
     /tmp/cc0qzoHg.s:490    .text:0000000000000164 .L0 
     /tmp/cc0qzoHg.s:491    .text:0000000000000164 .L0 
     /tmp/cc0qzoHg.s:493    .text:0000000000000168 .L0 
     /tmp/cc0qzoHg.s:496    .text:000000000000016c .L0 
     /tmp/cc0qzoHg.s:497    .text:000000000000016c .L0 
     /tmp/cc0qzoHg.s:499    .text:0000000000000170 .L0 
     /tmp/cc0qzoHg.s:502    .text:0000000000000178 .L0 
     /tmp/cc0qzoHg.s:504    .text:000000000000017c .L0 
GAS LISTING /tmp/cc0qzoHg.s 			page 38


     /tmp/cc0qzoHg.s:505    .text:000000000000017c .L0 
     /tmp/cc0qzoHg.s:509    .text:0000000000000180 .L0 
     /tmp/cc0qzoHg.s:510    .text:0000000000000180 .L0 
     /tmp/cc0qzoHg.s:512    .text:0000000000000184 .L0 
     /tmp/cc0qzoHg.s:514    .text:0000000000000188 .L0 
     /tmp/cc0qzoHg.s:515    .text:0000000000000188 .L0 
     /tmp/cc0qzoHg.s:517    .text:000000000000018c .L0 
     /tmp/cc0qzoHg.s:519    .text:0000000000000190 .L0 
     /tmp/cc0qzoHg.s:520    .text:0000000000000190 .L0 
     /tmp/cc0qzoHg.s:526    .text:0000000000000194 .L0 
     /tmp/cc0qzoHg.s:534    .text:000000000000019c .L0 
     /tmp/cc0qzoHg.s:535    .text:000000000000019c .L0 
     /tmp/cc0qzoHg.s:543    .text:00000000000001ac .L0 
     /tmp/cc0qzoHg.s:544    .text:00000000000001ac .L0 
     /tmp/cc0qzoHg.s:547    .text:00000000000001b0 .L0 
     /tmp/cc0qzoHg.s:548    .text:00000000000001b0 .L0 
     /tmp/cc0qzoHg.s:550    .text:00000000000001b4 .L0 
     /tmp/cc0qzoHg.s:551    .text:00000000000001b4 .L0 
     /tmp/cc0qzoHg.s:553    .text:00000000000001b8 .L0 
     /tmp/cc0qzoHg.s:554    .text:00000000000001b8 .L0 
     /tmp/cc0qzoHg.s:556    .text:00000000000001bc .L0 
     /tmp/cc0qzoHg.s:558    .text:00000000000001c0 .L0 
     /tmp/cc0qzoHg.s:559    .text:00000000000001c0 .L0 
     /tmp/cc0qzoHg.s:562    .text:00000000000001c4 .L0 
     /tmp/cc0qzoHg.s:563    .text:00000000000001c4 .L0 
     /tmp/cc0qzoHg.s:565    .text:00000000000001c8 .L0 
     /tmp/cc0qzoHg.s:567    .text:00000000000001cc .L0 
     /tmp/cc0qzoHg.s:568    .text:00000000000001cc .L0 
     /tmp/cc0qzoHg.s:571    .text:00000000000001d0 .L0 
     /tmp/cc0qzoHg.s:572    .text:00000000000001d0 .L0 
     /tmp/cc0qzoHg.s:574    .text:00000000000001d4 .L0 
     /tmp/cc0qzoHg.s:576    .text:00000000000001d8 .L0 
     /tmp/cc0qzoHg.s:577    .text:00000000000001d8 .L0 
     /tmp/cc0qzoHg.s:579    .text:00000000000001dc .L0 
     /tmp/cc0qzoHg.s:581    .text:00000000000001e0 .L0 
     /tmp/cc0qzoHg.s:582    .text:00000000000001e0 .L0 
     /tmp/cc0qzoHg.s:585    .text:00000000000001e4 .L0 
     /tmp/cc0qzoHg.s:588    .text:00000000000001e8 .L0 
     /tmp/cc0qzoHg.s:590    .text:00000000000001ec .L0 
     /tmp/cc0qzoHg.s:591    .text:00000000000001ec .L0 
     /tmp/cc0qzoHg.s:593    .text:00000000000001f0 .L0 
     /tmp/cc0qzoHg.s:596    .text:00000000000001fc .L0 
     /tmp/cc0qzoHg.s:597    .text:00000000000001fc .L0 
     /tmp/cc0qzoHg.s:599    .text:0000000000000200 .L0 
     /tmp/cc0qzoHg.s:601    .text:0000000000000204 .L0 
     /tmp/cc0qzoHg.s:602    .text:0000000000000204 .L0 
     /tmp/cc0qzoHg.s:604    .text:0000000000000208 .L0 
     /tmp/cc0qzoHg.s:605    .text:0000000000000208 .L0 
     /tmp/cc0qzoHg.s:607    .text:000000000000020c .L0 
     /tmp/cc0qzoHg.s:608    .text:000000000000020c .L0 
     /tmp/cc0qzoHg.s:618    .text:0000000000000210 .L0 
       src/RiscV.cpp:46     .text:0000000000000210 .L0 
     /tmp/cc0qzoHg.s:624    .text:0000000000000214 .L0 
       src/RiscV.cpp:47     .text:0000000000000214 .L0 
     /tmp/cc0qzoHg.s:641    .text:000000000000021c .L0 
     /tmp/cc0qzoHg.s:642    .text:000000000000021c .L0 
     /tmp/cc0qzoHg.s:644    .text:0000000000000220 .L0 
GAS LISTING /tmp/cc0qzoHg.s 			page 39


     /tmp/cc0qzoHg.s:659    .text:0000000000000230 .L0 
       src/RiscV.cpp:49     .text:0000000000000230 .L0 
     /tmp/cc0qzoHg.s:668    .text:0000000000000238 .L0 
     /tmp/cc0qzoHg.s:669    .text:0000000000000238 .L0 
     /tmp/cc0qzoHg.s:674    .text:000000000000023c .L0 
     /tmp/cc0qzoHg.s:675    .text:000000000000023c .L0 
     /tmp/cc0qzoHg.s:676    .text:000000000000023c .L0 
     /tmp/cc0qzoHg.s:679    .text:0000000000000248 .L0 
     /tmp/cc0qzoHg.s:681    .text:000000000000024c .L0 
     /tmp/cc0qzoHg.s:685    .text:0000000000000250 .L0 
     /tmp/cc0qzoHg.s:687    .text:0000000000000254 .L0 
     /tmp/cc0qzoHg.s:690    .text:0000000000000258 .L0 
     /tmp/cc0qzoHg.s:696    .text:0000000000000264 .L0 
     /tmp/cc0qzoHg.s:703    .text:0000000000000270 .L0 
     /tmp/cc0qzoHg.s:704    .text:0000000000000270 .L0 
     /tmp/cc0qzoHg.s:705    .text:0000000000000270 .L0 
     /tmp/cc0qzoHg.s:707    .text:0000000000000274 .L0 
     /tmp/cc0qzoHg.s:716    .text:0000000000000274 .L0 
     /tmp/cc0qzoHg.s:724    .text:0000000000000274 .L0 
     /tmp/cc0qzoHg.s:725    .text:0000000000000274 .L0 
     /tmp/cc0qzoHg.s:728    .text:000000000000027c .L0 
     /tmp/cc0qzoHg.s:729    .text:000000000000027c .L0 
     /tmp/cc0qzoHg.s:731    .text:0000000000000280 .L0 
     /tmp/cc0qzoHg.s:733    .text:0000000000000284 .L0 
     /tmp/cc0qzoHg.s:734    .text:0000000000000284 .L0 
     /tmp/cc0qzoHg.s:736    .text:0000000000000288 .L0 
     /tmp/cc0qzoHg.s:739    .text:000000000000028c .L0 
     /tmp/cc0qzoHg.s:740    .text:000000000000028c .L0 
     /tmp/cc0qzoHg.s:742    .text:0000000000000290 .L0 
     /tmp/cc0qzoHg.s:744    .text:0000000000000294 .L0 
     /tmp/cc0qzoHg.s:745    .text:0000000000000294 .L0 
     /tmp/cc0qzoHg.s:748    .text:0000000000000298 .L0 
     /tmp/cc0qzoHg.s:750    .text:000000000000029c .L0 
     /tmp/cc0qzoHg.s:751    .text:000000000000029c .L0 
     /tmp/cc0qzoHg.s:757    .text:00000000000002a0 .L0 
     /tmp/cc0qzoHg.s:758    .text:00000000000002a0 .L0 
     /tmp/cc0qzoHg.s:760    .text:00000000000002a4 .L0 
     /tmp/cc0qzoHg.s:761    .text:00000000000002a4 .L0 
     /tmp/cc0qzoHg.s:763    .text:00000000000002a8 .L0 
     /tmp/cc0qzoHg.s:765    .text:00000000000002ac .L0 
     /tmp/cc0qzoHg.s:768    .text:00000000000002b0 .L0 
     /tmp/cc0qzoHg.s:770    .text:00000000000002b4 .L0 
     /tmp/cc0qzoHg.s:778    .text:00000000000002b8 .L0 
     /tmp/cc0qzoHg.s:779    .text:00000000000002b8 .L0 
     /tmp/cc0qzoHg.s:781    .text:00000000000002bc .L0 
     /tmp/cc0qzoHg.s:782    .text:00000000000002bc .L0 
     /tmp/cc0qzoHg.s:784    .text:00000000000002c0 .L0 
     /tmp/cc0qzoHg.s:786    .text:00000000000002c4 .L0 
     /tmp/cc0qzoHg.s:788    .text:00000000000002c8 .L0 
     /tmp/cc0qzoHg.s:790    .text:00000000000002cc .L0 
     /tmp/cc0qzoHg.s:796    .text:00000000000002d0 .L0 
     /tmp/cc0qzoHg.s:798    .text:00000000000002d4 .L0 
     /tmp/cc0qzoHg.s:804    .text:00000000000002d8 .L0 
       src/RiscV.cpp:51     .text:00000000000002d8 .L0 
     /tmp/cc0qzoHg.s:810    .text:00000000000002dc .L0 
       src/RiscV.cpp:52     .text:00000000000002dc .L0 
     /tmp/cc0qzoHg.s:823    .text:00000000000002e4 .L0 
GAS LISTING /tmp/cc0qzoHg.s 			page 40


     /tmp/cc0qzoHg.s:824    .text:00000000000002e4 .L0 
     /tmp/cc0qzoHg.s:830    .text:00000000000002f8 .L0 
     /tmp/cc0qzoHg.s:831    .text:00000000000002f8 .L0 
     /tmp/cc0qzoHg.s:839    .text:0000000000000308 .L0 
     /tmp/cc0qzoHg.s:840    .text:0000000000000308 .L0 
     /tmp/cc0qzoHg.s:842    .text:000000000000030c .L0 
     /tmp/cc0qzoHg.s:845    .text:0000000000000314 .L0 
     /tmp/cc0qzoHg.s:846    .text:0000000000000314 .L0 
     /tmp/cc0qzoHg.s:848    .text:0000000000000318 .L0 
     /tmp/cc0qzoHg.s:850    .text:000000000000031c .L0 
     /tmp/cc0qzoHg.s:852    .text:0000000000000320 .L0 
     /tmp/cc0qzoHg.s:853    .text:0000000000000320 .L0 
     /tmp/cc0qzoHg.s:862    .text:0000000000000328 .L0 
     /tmp/cc0qzoHg.s:863    .text:0000000000000328 .L0 
     /tmp/cc0qzoHg.s:865    .text:000000000000032c .L0 
     /tmp/cc0qzoHg.s:868    .text:0000000000000334 .L0 
     /tmp/cc0qzoHg.s:869    .text:0000000000000334 .L0 
     /tmp/cc0qzoHg.s:871    .text:0000000000000338 .L0 
     /tmp/cc0qzoHg.s:873    .text:000000000000033c .L0 
     /tmp/cc0qzoHg.s:875    .text:0000000000000340 .L0 
     /tmp/cc0qzoHg.s:876    .text:0000000000000340 .L0 
     /tmp/cc0qzoHg.s:883    .text:0000000000000348 .L0 
     /tmp/cc0qzoHg.s:892    .text:0000000000000350 .L0 
     /tmp/cc0qzoHg.s:893    .text:0000000000000350 .L0 
     /tmp/cc0qzoHg.s:896    .text:0000000000000354 .L0 
     /tmp/cc0qzoHg.s:898    .text:0000000000000358 .L0 
     /tmp/cc0qzoHg.s:899    .text:0000000000000358 .L0 
     /tmp/cc0qzoHg.s:908    .text:0000000000000370 .L0 
       src/RiscV.cpp:59     .text:0000000000000370 .L0 
     /tmp/cc0qzoHg.s:914    .text:0000000000000374 .L0 
       src/RiscV.cpp:60     .text:0000000000000374 .L0 
     /tmp/cc0qzoHg.s:925    .text:0000000000000378 .L0 
     /tmp/cc0qzoHg.s:926    .text:0000000000000378 .L0 
     /tmp/cc0qzoHg.s:931    .text:000000000000037c .L0 
  src/../h/RiscV.hpp:162    .text:000000000000037c .L0 
     /tmp/cc0qzoHg.s:941    .text:0000000000000380 .L0 
     /tmp/cc0qzoHg.s:942    .text:0000000000000380 .L0 
     /tmp/cc0qzoHg.s:947    .text:0000000000000384 .L0 
  src/../h/RiscV.hpp:106    .text:0000000000000384 .L0 
     /tmp/cc0qzoHg.s:960    .text:0000000000000388 .L0 
     /tmp/cc0qzoHg.s:961    .text:000000000000038c .L0 
     /tmp/cc0qzoHg.s:962    .text:000000000000038c .L0 
     /tmp/cc0qzoHg.s:964    .text:0000000000000390 .L0 
     /tmp/cc0qzoHg.s:965    .text:0000000000000390 .L0 
     /tmp/cc0qzoHg.s:967    .text:0000000000000394 .L0 
     /tmp/cc0qzoHg.s:971    .text:0000000000000398 .L0 
     /tmp/cc0qzoHg.s:978    .text:0000000000000398 .L0 
     /tmp/cc0qzoHg.s:979    .text:0000000000000398 .L0 
     /tmp/cc0qzoHg.s:994    .text:00000000000003b4 .L0 
     /tmp/cc0qzoHg.s:995    .text:00000000000003b4 .L0 
     /tmp/cc0qzoHg.s:996    .text:00000000000003b4 .L0 
     /tmp/cc0qzoHg.s:1003   .text:00000000000003cc .L0 
     /tmp/cc0qzoHg.s:1004   .text:00000000000003cc .L0 
     /tmp/cc0qzoHg.s:1009   .text:00000000000003d4 .L0 
     /tmp/cc0qzoHg.s:1010   .text:00000000000003d4 .L0 
     /tmp/cc0qzoHg.s:1011   .text:00000000000003d4 .L0 
     /tmp/cc0qzoHg.s:1017   .text:00000000000003dc .L0 
GAS LISTING /tmp/cc0qzoHg.s 			page 41


       src/RiscV.cpp:64     .text:00000000000003dc .L0 
     /tmp/cc0qzoHg.s:1029   .text:00000000000003e4 .L0 
     /tmp/cc0qzoHg.s:1030   .text:00000000000003e4 .L0 
     /tmp/cc0qzoHg.s:1031   .text:00000000000003e4 .L0 
     /tmp/cc0qzoHg.s:1034   .text:00000000000003ec .L0 
     /tmp/cc0qzoHg.s:1042   .text:00000000000003f0 .L0 
     /tmp/cc0qzoHg.s:1043   .text:00000000000003f0 .L0 
     /tmp/cc0qzoHg.s:1051   .text:0000000000000408 .L0 
       src/RiscV.cpp:69     .text:0000000000000408 .L0 
     /tmp/cc0qzoHg.s:1057   .text:000000000000040c .L0 
       src/RiscV.cpp:70     .text:000000000000040c .L0 
     /tmp/cc0qzoHg.s:1068   .text:0000000000000414 .L0 
     /tmp/cc0qzoHg.s:1069   .text:0000000000000414 .L0 
     /tmp/cc0qzoHg.s:1079   .text:0000000000000428 .L0 
     /tmp/cc0qzoHg.s:1080   .text:0000000000000428 .L0 
     /tmp/cc0qzoHg.s:1086   .text:000000000000043c .L0 
       src/RiscV.cpp:75     .text:000000000000043c .L0 
     /tmp/cc0qzoHg.s:1092   .text:0000000000000440 .L0 
       src/RiscV.cpp:76     .text:0000000000000440 .L0 
     /tmp/cc0qzoHg.s:1104   .text:0000000000000448 .L0 
     /tmp/cc0qzoHg.s:1105   .text:0000000000000448 .L0 
     /tmp/cc0qzoHg.s:1109   .text:0000000000000454 .L0 
       src/RiscV.cpp:79     .text:0000000000000454 .L0 
     /tmp/cc0qzoHg.s:1115   .text:0000000000000458 .L0 
       src/RiscV.cpp:80     .text:0000000000000458 .L0 
     /tmp/cc0qzoHg.s:1127   .text:0000000000000460 .L0 
     /tmp/cc0qzoHg.s:1128   .text:0000000000000460 .L0 
     /tmp/cc0qzoHg.s:1132   .text:000000000000046c .L0 
       src/RiscV.cpp:83     .text:000000000000046c .L0 
     /tmp/cc0qzoHg.s:1138   .text:0000000000000470 .L0 
       src/RiscV.cpp:84     .text:0000000000000470 .L0 
     /tmp/cc0qzoHg.s:1150   .text:0000000000000478 .L0 
     /tmp/cc0qzoHg.s:1151   .text:0000000000000478 .L0 
     /tmp/cc0qzoHg.s:1155   .text:0000000000000484 .L0 
       src/RiscV.cpp:87     .text:0000000000000484 .L0 
     /tmp/cc0qzoHg.s:1161   .text:0000000000000488 .L0 
       src/RiscV.cpp:88     .text:0000000000000488 .L0 
     /tmp/cc0qzoHg.s:1173   .text:0000000000000490 .L0 
     /tmp/cc0qzoHg.s:1174   .text:0000000000000490 .L0 
     /tmp/cc0qzoHg.s:1177   .text:0000000000000498 .L0 
       src/RiscV.cpp:91     .text:0000000000000498 .L0 
     /tmp/cc0qzoHg.s:1183   .text:000000000000049c .L0 
       src/RiscV.cpp:92     .text:000000000000049c .L0 
     /tmp/cc0qzoHg.s:1208   .text:00000000000004a4 .L0 
     /tmp/cc0qzoHg.s:1209   .text:00000000000004a4 .L0 
     /tmp/cc0qzoHg.s:1210   .text:00000000000004a4 .L0 
     /tmp/cc0qzoHg.s:1217   .text:00000000000004ac .L0 
     /tmp/cc0qzoHg.s:1221   .text:00000000000004b0 .L0 
     /tmp/cc0qzoHg.s:1229   .text:00000000000004b0 .L0 
     /tmp/cc0qzoHg.s:469    .text:0000000000000134 .L0 
     /tmp/cc0qzoHg.s:478    .text:0000000000000144 .L0 
     /tmp/cc0qzoHg.s:535    .text:000000000000019c .L0 
     /tmp/cc0qzoHg.s:593    .text:00000000000001f0 .L0 
     /tmp/cc0qzoHg.s:644    .text:0000000000000220 .L0 
     /tmp/cc0qzoHg.s:676    .text:000000000000023c .L0 
     /tmp/cc0qzoHg.s:824    .text:00000000000002e4 .L0 
     /tmp/cc0qzoHg.s:831    .text:00000000000002f8 .L0 
GAS LISTING /tmp/cc0qzoHg.s 			page 42


     /tmp/cc0qzoHg.s:997    .text:00000000000003b8 .L0 
     /tmp/cc0qzoHg.s:180    .text:000000000000009c .L46
     /tmp/cc0qzoHg.s:1191   .text:00000000000004a4 .L47
     /tmp/cc0qzoHg.s:954    .text:0000000000000388 .L3
     /tmp/cc0qzoHg.s:419    .text:0000000000000118 .L48
     /tmp/cc0qzoHg.s:648    .text:0000000000000230 .L49
     /tmp/cc0qzoHg.s:886    .text:0000000000000350 .L50
     /tmp/cc0qzoHg.s:988    .text:00000000000003b4 .L51
     /tmp/cc0qzoHg.s:1024   .text:00000000000003e4 .L52
     /tmp/cc0qzoHg.s:1036   .text:00000000000003f0 .L53
     /tmp/cc0qzoHg.s:1065   .text:0000000000000414 .L54
     /tmp/cc0qzoHg.s:1075   .text:0000000000000428 .L55
     /tmp/cc0qzoHg.s:1100   .text:0000000000000448 .L56
     /tmp/cc0qzoHg.s:1123   .text:0000000000000460 .L57
     /tmp/cc0qzoHg.s:1146   .text:0000000000000478 .L58
     /tmp/cc0qzoHg.s:1169   .text:0000000000000490 .L59
     /tmp/cc0qzoHg.s:920    .text:0000000000000378 .L15
     /tmp/cc0qzoHg.s:610    .text:0000000000000210 .L6
     /tmp/cc0qzoHg.s:522    .text:0000000000000194 .L41
     /tmp/cc0qzoHg.s:540    .text:00000000000001ac .L8
     /tmp/cc0qzoHg.s:530    .text:000000000000019c .L9
     /tmp/cc0qzoHg.s:472    .text:0000000000000140 .L7
     /tmp/cc0qzoHg.s:507    .text:0000000000000180 .L10
     /tmp/cc0qzoHg.s:632    .text:000000000000021c .L12
     /tmp/cc0qzoHg.s:569    .text:00000000000001d0 .L14
     /tmp/cc0qzoHg.s:560    .text:00000000000001c4 .L13
     /tmp/cc0qzoHg.s:694    .text:0000000000000264 .L42
     /tmp/cc0qzoHg.s:698    .text:000000000000026c .L43
     /tmp/cc0qzoHg.s:701    .text:0000000000000270 .L17
     /tmp/cc0qzoHg.s:683    .text:0000000000000250 .L18
     /tmp/cc0qzoHg.s:818    .text:00000000000002e4 .L19
     /tmp/cc0qzoHg.s:746    .text:0000000000000298 .L21
     /tmp/cc0qzoHg.s:828    .text:00000000000002f8 .L22
     /tmp/cc0qzoHg.s:771    .text:00000000000002b8 .L24
     /tmp/cc0qzoHg.s:835    .text:0000000000000308 .L60
     /tmp/cc0qzoHg.s:791    .text:00000000000002d0 .L25
     /tmp/cc0qzoHg.s:856    .text:0000000000000328 .L61
     /tmp/cc0qzoHg.s:879    .text:0000000000000348 .L62
     /tmp/cc0qzoHg.s:737    .text:000000000000028c .L20
     /tmp/cc0qzoHg.s:752    .text:00000000000002a0 .L23
     /tmp/cc0qzoHg.s:799    .text:00000000000002d8 .L26
     /tmp/cc0qzoHg.s:970    .text:0000000000000398 .L28
     /tmp/cc0qzoHg.s:906    .text:0000000000000370 .L29
     /tmp/cc0qzoHg.s:2890   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc0qzoHg.s:4706   .debug_str:00000000000008bf .LASF170
     /tmp/cc0qzoHg.s:4422   .debug_str:0000000000000051 .LASF171
     /tmp/cc0qzoHg.s:4500   .debug_str:00000000000002ad .LASF172
     /tmp/cc0qzoHg.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc0qzoHg.s:1224   .text:00000000000004b0 .Letext0
     /tmp/cc0qzoHg.s:4410   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc0qzoHg.s:4524   .debug_str:0000000000000350 .LASF0
     /tmp/cc0qzoHg.s:4548   .debug_str:000000000000040b .LASF1
     /tmp/cc0qzoHg.s:4650   .debug_str:0000000000000752 .LASF2
     /tmp/cc0qzoHg.s:4658   .debug_str:000000000000079b .LASF4
     /tmp/cc0qzoHg.s:4532   .debug_str:000000000000037a .LASF3
     /tmp/cc0qzoHg.s:4510   .debug_str:0000000000000310 .LASF5
     /tmp/cc0qzoHg.s:4624   .debug_str:00000000000006ae .LASF6
GAS LISTING /tmp/cc0qzoHg.s 			page 43


     /tmp/cc0qzoHg.s:4538   .debug_str:000000000000039c .LASF7
     /tmp/cc0qzoHg.s:4498   .debug_str:000000000000029d .LASF8
     /tmp/cc0qzoHg.s:4506   .debug_str:00000000000002e7 .LASF9
     /tmp/cc0qzoHg.s:4442   .debug_str:00000000000000e6 .LASF10
     /tmp/cc0qzoHg.s:4490   .debug_str:000000000000025b .LASF11
     /tmp/cc0qzoHg.s:4456   .debug_str:0000000000000149 .LASF12
     /tmp/cc0qzoHg.s:4440   .debug_str:00000000000000d6 .LASF13
     /tmp/cc0qzoHg.s:4688   .debug_str:0000000000000855 .LASF14
     /tmp/cc0qzoHg.s:4480   .debug_str:0000000000000208 .LASF15
     /tmp/cc0qzoHg.s:4680   .debug_str:0000000000000824 .LASF16
     /tmp/cc0qzoHg.s:4722   .debug_str:0000000000000a00 .LASF60
     /tmp/cc0qzoHg.s:4636   .debug_str:0000000000000709 .LASF173
     /tmp/cc0qzoHg.s:4554   .debug_str:0000000000000436 .LASF17
     /tmp/cc0qzoHg.s:4484   .debug_str:0000000000000234 .LASF18
     /tmp/cc0qzoHg.s:4748   .debug_str:0000000000000a9e .LASF19
     /tmp/cc0qzoHg.s:4514   .debug_str:0000000000000324 .LASF20
     /tmp/cc0qzoHg.s:4584   .debug_str:0000000000000544 .LASF22
     /tmp/cc0qzoHg.s:4666   .debug_str:00000000000007ce .LASF21
     /tmp/cc0qzoHg.s:4508   .debug_str:00000000000002f5 .LASF23
     /tmp/cc0qzoHg.s:4526   .debug_str:000000000000035d .LASF24
     /tmp/cc0qzoHg.s:4586   .debug_str:000000000000055c .LASF25
     /tmp/cc0qzoHg.s:4726   .debug_str:0000000000000a22 .LASF26
     /tmp/cc0qzoHg.s:4754   .debug_str:0000000000000ab8 .LASF28
     /tmp/cc0qzoHg.s:4646   .debug_str:000000000000073e .LASF30
     /tmp/cc0qzoHg.s:4756   .debug_str:0000000000000acd .LASF32
     /tmp/cc0qzoHg.s:4632   .debug_str:00000000000006ef .LASF27
     /tmp/cc0qzoHg.s:4546   .debug_str:00000000000003f8 .LASF29
     /tmp/cc0qzoHg.s:4596   .debug_str:00000000000005bc .LASF31
     /tmp/cc0qzoHg.s:4460   .debug_str:000000000000017b .LASF33
     /tmp/cc0qzoHg.s:4744   .debug_str:0000000000000a8a .LASF34
     /tmp/cc0qzoHg.s:4570   .debug_str:00000000000004c6 .LASF35
     /tmp/cc0qzoHg.s:4592   .debug_str:00000000000005aa .LASF36
     /tmp/cc0qzoHg.s:4466   .debug_str:00000000000001a1 .LASF37
     /tmp/cc0qzoHg.s:4564   .debug_str:000000000000049e .LASF38
     /tmp/cc0qzoHg.s:4494   .debug_str:000000000000027d .LASF39
     /tmp/cc0qzoHg.s:4768   .debug_str:0000000000000b33 .LASF40
     /tmp/cc0qzoHg.s:4766   .debug_str:0000000000000b1f .LASF41
     /tmp/cc0qzoHg.s:4684   .debug_str:0000000000000841 .LASF42
     /tmp/cc0qzoHg.s:4454   .debug_str:0000000000000136 .LASF43
     /tmp/cc0qzoHg.s:4662   .debug_str:00000000000007a7 .LASF44
     /tmp/cc0qzoHg.s:4634   .debug_str:00000000000006f6 .LASF45
     /tmp/cc0qzoHg.s:4474   .debug_str:00000000000001de .LASF46
     /tmp/cc0qzoHg.s:4616   .debug_str:0000000000000682 .LASF47
     /tmp/cc0qzoHg.s:4528   .debug_str:000000000000036a .LASF48
     /tmp/cc0qzoHg.s:4552   .debug_str:0000000000000424 .LASF49
     /tmp/cc0qzoHg.s:4424   .debug_str:000000000000005f .LASF50
     /tmp/cc0qzoHg.s:4716   .debug_str:00000000000009be .LASF51
     /tmp/cc0qzoHg.s:4648   .debug_str:0000000000000747 .LASF52
     /tmp/cc0qzoHg.s:4446   .debug_str:00000000000000fa .LASF53
     /tmp/cc0qzoHg.s:4738   .debug_str:0000000000000a69 .LASF54
     /tmp/cc0qzoHg.s:4544   .debug_str:00000000000003e2 .LASF55
     /tmp/cc0qzoHg.s:4736   .debug_str:0000000000000a5f .LASF56
     /tmp/cc0qzoHg.s:4482   .debug_str:000000000000021e .LASF57
     /tmp/cc0qzoHg.s:4742   .debug_str:0000000000000a7b .LASF58
     /tmp/cc0qzoHg.s:4724   .debug_str:0000000000000a06 .LASF59
     /tmp/cc0qzoHg.s:4626   .debug_str:00000000000006c1 .LASF126
     /tmp/cc0qzoHg.s:4458   .debug_str:0000000000000159 .LASF128
GAS LISTING /tmp/cc0qzoHg.s 			page 44


     /tmp/cc0qzoHg.s:4558   .debug_str:0000000000000458 .LASF61
     /tmp/cc0qzoHg.s:4702   .debug_str:00000000000008af .LASF84
     /tmp/cc0qzoHg.s:4444   .debug_str:00000000000000f5 .LASF62
     /tmp/cc0qzoHg.s:4426   .debug_str:000000000000006a .LASF63
     /tmp/cc0qzoHg.s:4462   .debug_str:000000000000018e .LASF64
     /tmp/cc0qzoHg.s:4676   .debug_str:0000000000000807 .LASF65
     /tmp/cc0qzoHg.s:4450   .debug_str:0000000000000125 .LASF66
     /tmp/cc0qzoHg.s:4542   .debug_str:00000000000003dd .LASF67
     /tmp/cc0qzoHg.s:4582   .debug_str:000000000000052a .LASF68
     /tmp/cc0qzoHg.s:4652   .debug_str:0000000000000760 .LASF69
     /tmp/cc0qzoHg.s:4654   .debug_str:000000000000077d .LASF70
     /tmp/cc0qzoHg.s:4590   .debug_str:000000000000058d .LASF71
     /tmp/cc0qzoHg.s:4746   .debug_str:0000000000000a92 .LASF72
     /tmp/cc0qzoHg.s:4578   .debug_str:00000000000004fb .LASF73
     /tmp/cc0qzoHg.s:4762   .debug_str:0000000000000b0a .LASF104
     /tmp/cc0qzoHg.s:4696   .debug_str:000000000000087e .LASF106
     /tmp/cc0qzoHg.s:4576   .debug_str:00000000000004f3 .LASF74
     /tmp/cc0qzoHg.s:4606   .debug_str:0000000000000617 .LASF76
     /tmp/cc0qzoHg.s:4478   .debug_str:00000000000001fa .LASF75
     /tmp/cc0qzoHg.s:4612   .debug_str:0000000000000656 .LASF77
     /tmp/cc0qzoHg.s:4530   .debug_str:0000000000000370 .LASF78
     /tmp/cc0qzoHg.s:4540   .debug_str:00000000000003af .LASF79
     /tmp/cc0qzoHg.s:4692   .debug_str:000000000000086a .LASF80
     /tmp/cc0qzoHg.s:4758   .debug_str:0000000000000ae2 .LASF81
     /tmp/cc0qzoHg.s:4580   .debug_str:0000000000000520 .LASF82
     /tmp/cc0qzoHg.s:4720   .debug_str:00000000000009de .LASF83
     /tmp/cc0qzoHg.s:4602   .debug_str:00000000000005e2 .LASF174
     /tmp/cc0qzoHg.s:4598   .debug_str:00000000000005c3 .LASF85
     /tmp/cc0qzoHg.s:4764   .debug_str:0000000000000b12 .LASF86
     /tmp/cc0qzoHg.s:4504   .debug_str:00000000000002db .LASF87
     /tmp/cc0qzoHg.s:4434   .debug_str:0000000000000093 .LASF88
     /tmp/cc0qzoHg.s:4496   .debug_str:0000000000000291 .LASF89
     /tmp/cc0qzoHg.s:4414   .debug_str:0000000000000005 .LASF90
     /tmp/cc0qzoHg.s:4674   .debug_str:00000000000007fa .LASF91
     /tmp/cc0qzoHg.s:4678   .debug_str:0000000000000811 .LASF92
     /tmp/cc0qzoHg.s:4512   .debug_str:0000000000000317 .LASF93
     /tmp/cc0qzoHg.s:4660   .debug_str:00000000000007a2 .LASF94
     /tmp/cc0qzoHg.s:4420   .debug_str:0000000000000045 .LASF95
     /tmp/cc0qzoHg.s:4686   .debug_str:0000000000000848 .LASF96
     /tmp/cc0qzoHg.s:4604   .debug_str:00000000000005f2 .LASF97
     /tmp/cc0qzoHg.s:4614   .debug_str:000000000000067d .LASF175
     /tmp/cc0qzoHg.s:4640   .debug_str:000000000000071f .LASF98
     /tmp/cc0qzoHg.s:4562   .debug_str:0000000000000483 .LASF99
     /tmp/cc0qzoHg.s:4574   .debug_str:00000000000004e7 .LASF100
     /tmp/cc0qzoHg.s:4488   .debug_str:0000000000000244 .LASF101
     /tmp/cc0qzoHg.s:4638   .debug_str:0000000000000714 .LASF102
     /tmp/cc0qzoHg.s:4566   .debug_str:00000000000004a6 .LASF103
     /tmp/cc0qzoHg.s:4594   .debug_str:00000000000005b2 .LASF105
     /tmp/cc0qzoHg.s:4656   .debug_str:0000000000000787 .LASF107
     /tmp/cc0qzoHg.s:4700   .debug_str:00000000000008a3 .LASF108
     /tmp/cc0qzoHg.s:4664   .debug_str:00000000000007ae .LASF109
     /tmp/cc0qzoHg.s:4694   .debug_str:0000000000000873 .LASF110
     /tmp/cc0qzoHg.s:4588   .debug_str:0000000000000576 .LASF111
     /tmp/cc0qzoHg.s:4428   .debug_str:000000000000006f .LASF112
     /tmp/cc0qzoHg.s:4610   .debug_str:000000000000063f .LASF113
     /tmp/cc0qzoHg.s:4550   .debug_str:000000000000041e .LASF114
     /tmp/cc0qzoHg.s:4710   .debug_str:0000000000000988 .LASF115
GAS LISTING /tmp/cc0qzoHg.s 			page 45


     /tmp/cc0qzoHg.s:4572   .debug_str:00000000000004da .LASF116
     /tmp/cc0qzoHg.s:4436   .debug_str:00000000000000a3 .LASF117
     /tmp/cc0qzoHg.s:4704   .debug_str:00000000000008b7 .LASF176
     /tmp/cc0qzoHg.s:4412   .debug_str:0000000000000000 .LASF118
     /tmp/cc0qzoHg.s:4760   .debug_str:0000000000000b04 .LASF119
     /tmp/cc0qzoHg.s:4718   .debug_str:00000000000009d6 .LASF120
     /tmp/cc0qzoHg.s:4690   .debug_str:0000000000000861 .LASF121
     /tmp/cc0qzoHg.s:4620   .debug_str:000000000000069c .LASF122
     /tmp/cc0qzoHg.s:4628   .debug_str:00000000000006d6 .LASF123
     /tmp/cc0qzoHg.s:4712   .debug_str:0000000000000998 .LASF124
     /tmp/cc0qzoHg.s:4516   .debug_str:000000000000032f .LASF125
     /tmp/cc0qzoHg.s:4432   .debug_str:0000000000000085 .LASF127
     /tmp/cc0qzoHg.s:4556   .debug_str:000000000000043f .LASF129
     /tmp/cc0qzoHg.s:4464   .debug_str:0000000000000193 .LASF177
     /tmp/cc0qzoHg.s:4418   .debug_str:000000000000001d .LASF178
     /tmp/cc0qzoHg.s:4472   .debug_str:00000000000001d5 .LASF130
     /tmp/cc0qzoHg.s:4448   .debug_str:0000000000000112 .LASF131
     /tmp/cc0qzoHg.s:4668   .debug_str:00000000000007dc .LASF132
     /tmp/cc0qzoHg.s:4750   .debug_str:0000000000000aa7 .LASF179
     /tmp/cc0qzoHg.s:4642   .debug_str:000000000000072f .LASF133
     /tmp/cc0qzoHg.s:4644   .debug_str:0000000000000734 .LASF134
     /tmp/cc0qzoHg.s:4518   .debug_str:000000000000033d .LASF135
     /tmp/cc0qzoHg.s:4600   .debug_str:00000000000005cb .LASF136
     /tmp/cc0qzoHg.s:4470   .debug_str:00000000000001cd .LASF137
     /tmp/cc0qzoHg.s:4730   .debug_str:0000000000000a35 .LASF138
     /tmp/cc0qzoHg.s:4534   .debug_str:000000000000038c .LASF139
     /tmp/cc0qzoHg.s:4438   .debug_str:00000000000000bb .LASF140
     /tmp/cc0qzoHg.s:4618   .debug_str:0000000000000694 .LASF141
     /tmp/cc0qzoHg.s:4560   .debug_str:0000000000000469 .LASF142
     /tmp/cc0qzoHg.s:4430   .debug_str:000000000000007b .LASF143
     /tmp/cc0qzoHg.s:4714   .debug_str:00000000000009a2 .LASF144
     /tmp/cc0qzoHg.s:4522   .debug_str:000000000000034a .LASF145
     /tmp/cc0qzoHg.s:4476   .debug_str:00000000000001e4 .LASF146
     /tmp/cc0qzoHg.s:4416   .debug_str:0000000000000015 .LASF147
     /tmp/cc0qzoHg.s:4468   .debug_str:00000000000001b5 .LASF148
     /tmp/cc0qzoHg.s:4608   .debug_str:0000000000000637 .LASF149
     /tmp/cc0qzoHg.s:46     .text:0000000000000020 .LFB49
     /tmp/cc0qzoHg.s:1222   .text:00000000000004b0 .LFE49
     /tmp/cc0qzoHg.s:4734   .debug_str:0000000000000a56 .LASF150
     /tmp/cc0qzoHg.s:4752   .debug_str:0000000000000ab2 .LASF151
     /tmp/cc0qzoHg.s:4670   .debug_str:00000000000007ed .LASF152
     /tmp/cc0qzoHg.s:3948   .debug_loc:0000000000000000 .LLST0
     /tmp/cc0qzoHg.s:4770   .debug_str:0000000000000b3b .LASF153
     /tmp/cc0qzoHg.s:4630   .debug_str:00000000000006e1 .LASF154
     /tmp/cc0qzoHg.s:4728   .debug_str:0000000000000a2b .LASF155
     /tmp/cc0qzoHg.s:3974   .debug_loc:0000000000000072 .LLST1
     /tmp/cc0qzoHg.s:4492   .debug_str:000000000000026a .LASF156
     /tmp/cc0qzoHg.s:4033   .debug_loc:000000000000018c .LLST2
     /tmp/cc0qzoHg.s:4682   .debug_str:000000000000083a .LASF157
     /tmp/cc0qzoHg.s:4041   .debug_loc:00000000000001b0 .LLST3
     /tmp/cc0qzoHg.s:4708   .debug_str:0000000000000983 .LASF158
     /tmp/cc0qzoHg.s:4740   .debug_str:0000000000000a73 .LASF159
     /tmp/cc0qzoHg.s:4356   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc0qzoHg.s:4622   .debug_str:00000000000006a6 .LASF160
     /tmp/cc0qzoHg.s:4146   .debug_loc:0000000000000334 .LLST16
     /tmp/cc0qzoHg.s:445    .text:0000000000000124 .LBB214
     /tmp/cc0qzoHg.s:459    .text:0000000000000130 .LBE214
GAS LISTING /tmp/cc0qzoHg.s 			page 46


     /tmp/cc0qzoHg.s:4153   .debug_loc:0000000000000357 .LLST17
     /tmp/cc0qzoHg.s:460    .text:0000000000000130 .LBB216
     /tmp/cc0qzoHg.s:4166   .debug_loc:0000000000000390 .LLST18
     /tmp/cc0qzoHg.s:4185   .debug_loc:00000000000003ec .LLST19
     /tmp/cc0qzoHg.s:4200   .debug_loc:0000000000000435 .LLST20
     /tmp/cc0qzoHg.s:4211   .debug_loc:000000000000046b .LLST10
     /tmp/cc0qzoHg.s:671    .text:000000000000023c .LBB185
     /tmp/cc0qzoHg.s:4218   .debug_loc:000000000000048e .LLST11
     /tmp/cc0qzoHg.s:4229   .debug_loc:00000000000004c4 .LLST12
     /tmp/cc0qzoHg.s:4258   .debug_loc:0000000000000548 .LLST13
     /tmp/cc0qzoHg.s:755    .text:00000000000002a0 .LBB187
     /tmp/cc0qzoHg.s:4265   .debug_loc:000000000000056b .LLST14
     /tmp/cc0qzoHg.s:776    .text:00000000000002b8 .LBB190
     /tmp/cc0qzoHg.s:4276   .debug_loc:00000000000005a1 .LLST15
     /tmp/cc0qzoHg.s:1040   .text:00000000000003f0 .LBB145
     /tmp/cc0qzoHg.s:1062   .text:0000000000000410 .LBE145
     /tmp/cc0qzoHg.s:4287   .debug_loc:00000000000005d7 .LLST9
     /tmp/cc0qzoHg.s:1049   .text:0000000000000408 .LVL66
     /tmp/cc0qzoHg.s:1077   .text:0000000000000428 .LBB133
     /tmp/cc0qzoHg.s:1097   .text:0000000000000444 .LBE133
     /tmp/cc0qzoHg.s:4486   .debug_str:000000000000023d .LASF161
     /tmp/cc0qzoHg.s:4294   .debug_loc:00000000000005fa .LLST8
     /tmp/cc0qzoHg.s:1084   .text:000000000000043c .LVL70
     /tmp/cc0qzoHg.s:1102   .text:0000000000000448 .LBB128
     /tmp/cc0qzoHg.s:1120   .text:000000000000045c .LBE128
     /tmp/cc0qzoHg.s:4301   .debug_loc:000000000000061d .LLST7
     /tmp/cc0qzoHg.s:1107   .text:0000000000000454 .LVL72
     /tmp/cc0qzoHg.s:1125   .text:0000000000000460 .LBB124
     /tmp/cc0qzoHg.s:1143   .text:0000000000000474 .LBE124
     /tmp/cc0qzoHg.s:4308   .debug_loc:0000000000000640 .LLST6
     /tmp/cc0qzoHg.s:1130   .text:000000000000046c .LVL74
     /tmp/cc0qzoHg.s:1148   .text:0000000000000478 .LBB121
     /tmp/cc0qzoHg.s:1166   .text:000000000000048c .LBE121
     /tmp/cc0qzoHg.s:4315   .debug_loc:0000000000000663 .LLST5
     /tmp/cc0qzoHg.s:1153   .text:0000000000000484 .LVL76
     /tmp/cc0qzoHg.s:1171   .text:0000000000000490 .LBB120
     /tmp/cc0qzoHg.s:1188   .text:00000000000004a0 .LBE120
     /tmp/cc0qzoHg.s:4322   .debug_loc:0000000000000686 .LLST4
     /tmp/cc0qzoHg.s:1175   .text:0000000000000498 .LVL78
     /tmp/cc0qzoHg.s:92     .text:0000000000000040 .LBB100
     /tmp/cc0qzoHg.s:109    .text:000000000000004c .LBE100
     /tmp/cc0qzoHg.s:111    .text:000000000000004c .LBB102
     /tmp/cc0qzoHg.s:124    .text:0000000000000050 .LBE102
     /tmp/cc0qzoHg.s:130    .text:0000000000000058 .LBB104
     /tmp/cc0qzoHg.s:143    .text:000000000000005c .LBE104
     /tmp/cc0qzoHg.s:1027   .text:00000000000003e4 .LBB153
     /tmp/cc0qzoHg.s:1038   .text:00000000000003f0 .LBE153
     /tmp/cc0qzoHg.s:1032   .text:00000000000003ec .LVL63
     /tmp/cc0qzoHg.s:991    .text:00000000000003b4 .LBB163
     /tmp/cc0qzoHg.s:1008   .text:00000000000003d4 .LBE163
     /tmp/cc0qzoHg.s:1001   .text:00000000000003cc .LVL60
     /tmp/cc0qzoHg.s:1005   .text:00000000000003d4 .LVL61
     /tmp/cc0qzoHg.s:928    .text:000000000000037c .LBB246
     /tmp/cc0qzoHg.s:939    .text:0000000000000380 .LBE246
     /tmp/cc0qzoHg.s:4329   .debug_loc:00000000000006a9 .LLST21
     /tmp/cc0qzoHg.s:944    .text:0000000000000384 .LBB248
     /tmp/cc0qzoHg.s:956    .text:0000000000000388 .LBE248
GAS LISTING /tmp/cc0qzoHg.s 			page 47


     /tmp/cc0qzoHg.s:4336   .debug_loc:00000000000006cc .LLST22
     /tmp/cc0qzoHg.s:1206   .text:00000000000004a4 .LBB264
     /tmp/cc0qzoHg.s:1219   .text:00000000000004b0 .LBE264
     /tmp/cc0qzoHg.s:175    .text:0000000000000098 .LVL6
     /tmp/cc0qzoHg.s:416    .text:0000000000000114 .LVL9
     /tmp/cc0qzoHg.s:905    .text:0000000000000370 .LVL49
     /tmp/cc0qzoHg.s:985    .text:00000000000003b0 .LVL57
     /tmp/cc0qzoHg.s:1072   .text:0000000000000424 .LVL68
     /tmp/cc0qzoHg.s:4698   .debug_str:000000000000089e .LASF162
     /tmp/cc0qzoHg.s:10     .text:0000000000000000 .LFB48
     /tmp/cc0qzoHg.s:40     .text:0000000000000020 .LFE48
     /tmp/cc0qzoHg.s:4452   .debug_str:000000000000012e .LASF163
     /tmp/cc0qzoHg.s:4536   .debug_str:0000000000000395 .LASF164
     /tmp/cc0qzoHg.s:4672   .debug_str:00000000000007f5 .LASF165
     /tmp/cc0qzoHg.s:4732   .debug_str:0000000000000a51 .LASF166
     /tmp/cc0qzoHg.s:4520   .debug_str:0000000000000343 .LASF167
     /tmp/cc0qzoHg.s:4502   .debug_str:00000000000002cb .LASF168
     /tmp/cc0qzoHg.s:4568   .debug_str:00000000000004bf .LASF169
     /tmp/cc0qzoHg.s:60     .text:0000000000000030 .LVL0
     /tmp/cc0qzoHg.s:918    .text:0000000000000378 .LVL50
     /tmp/cc0qzoHg.s:969    .text:0000000000000398 .LVL55
     /tmp/cc0qzoHg.s:987    .text:00000000000003b4 .LVL58
     /tmp/cc0qzoHg.s:152    .text:0000000000000064 .LVL4
     /tmp/cc0qzoHg.s:163    .text:0000000000000074 .LVL5
     /tmp/cc0qzoHg.s:179    .text:000000000000009c .LVL7
     /tmp/cc0qzoHg.s:418    .text:0000000000000118 .LVL10
     /tmp/cc0qzoHg.s:438    .text:000000000000011c .LVL11
     /tmp/cc0qzoHg.s:647    .text:0000000000000230 .LVL29
     /tmp/cc0qzoHg.s:664    .text:0000000000000234 .LVL30
     /tmp/cc0qzoHg.s:885    .text:0000000000000350 .LVL46
     /tmp/cc0qzoHg.s:894    .text:0000000000000354 .LVL47
     /tmp/cc0qzoHg.s:998    .text:00000000000003c0 .LVL59
     /tmp/cc0qzoHg.s:1023   .text:00000000000003e4 .LVL62
     /tmp/cc0qzoHg.s:1035   .text:00000000000003f0 .LVL64
     /tmp/cc0qzoHg.s:1064   .text:0000000000000414 .LVL67
     /tmp/cc0qzoHg.s:1074   .text:0000000000000428 .LVL69
     /tmp/cc0qzoHg.s:1099   .text:0000000000000448 .LVL71
     /tmp/cc0qzoHg.s:1122   .text:0000000000000460 .LVL73
     /tmp/cc0qzoHg.s:1145   .text:0000000000000478 .LVL75
     /tmp/cc0qzoHg.s:1168   .text:0000000000000490 .LVL77
     /tmp/cc0qzoHg.s:107    .text:000000000000004c .LVL1
     /tmp/cc0qzoHg.s:186    .text:00000000000000a0 .LVL8
     /tmp/cc0qzoHg.s:471    .text:0000000000000140 .LVL17
     /tmp/cc0qzoHg.s:766    .text:00000000000002b0 .LVL38
     /tmp/cc0qzoHg.s:817    .text:00000000000002e4 .LVL42
     /tmp/cc0qzoHg.s:834    .text:0000000000000308 .LVL43
     /tmp/cc0qzoHg.s:902    .text:0000000000000364 .LVL48
     /tmp/cc0qzoHg.s:982    .text:00000000000003a4 .LVL56
     /tmp/cc0qzoHg.s:1046   .text:00000000000003fc .LVL65
     /tmp/cc0qzoHg.s:1190   .text:00000000000004a4 .LVL79
     /tmp/cc0qzoHg.s:609    .text:0000000000000210 .LVL27
     /tmp/cc0qzoHg.s:631    .text:000000000000021c .LVL28
     /tmp/cc0qzoHg.s:444    .text:0000000000000124 .LVL12
     /tmp/cc0qzoHg.s:451    .text:0000000000000128 .LVL13
     /tmp/cc0qzoHg.s:454    .text:000000000000012c .LVL14
     /tmp/cc0qzoHg.s:457    .text:0000000000000130 .LVL15
     /tmp/cc0qzoHg.s:506    .text:0000000000000180 .LVL18
GAS LISTING /tmp/cc0qzoHg.s 			page 48


     /tmp/cc0qzoHg.s:521    .text:0000000000000194 .LVL19
     /tmp/cc0qzoHg.s:536    .text:00000000000001a4 .LVL22
     /tmp/cc0qzoHg.s:539    .text:00000000000001ac .LVL23
     /tmp/cc0qzoHg.s:586    .text:00000000000001e8 .LVL26
     /tmp/cc0qzoHg.s:527    .text:0000000000000198 .LVL20
     /tmp/cc0qzoHg.s:529    .text:000000000000019c .LVL21
     /tmp/cc0qzoHg.s:583    .text:00000000000001e4 .LVL25
     /tmp/cc0qzoHg.s:545    .text:00000000000001b0 .LVL24
     /tmp/cc0qzoHg.s:800    .text:00000000000002d8 .LVL41
     /tmp/cc0qzoHg.s:670    .text:000000000000023c .LVL31
     /tmp/cc0qzoHg.s:682    .text:0000000000000250 .LVL32
     /tmp/cc0qzoHg.s:688    .text:0000000000000258 .LVL33
     /tmp/cc0qzoHg.s:693    .text:0000000000000264 .LVL34
     /tmp/cc0qzoHg.s:700    .text:0000000000000270 .LVL35
     /tmp/cc0qzoHg.s:754    .text:00000000000002a0 .LVL37
     /tmp/cc0qzoHg.s:772    .text:00000000000002b8 .LVL39
     /tmp/cc0qzoHg.s:855    .text:0000000000000328 .LVL44
     /tmp/cc0qzoHg.s:792    .text:00000000000002d0 .LVL40
     /tmp/cc0qzoHg.s:878    .text:0000000000000348 .LVL45
     /tmp/cc0qzoHg.s:927    .text:000000000000037c .LVL51
     /tmp/cc0qzoHg.s:936    .text:0000000000000380 .LVL52
     /tmp/cc0qzoHg.s:943    .text:0000000000000384 .LVL53
     /tmp/cc0qzoHg.s:952    .text:0000000000000388 .LVL54
     /tmp/cc0qzoHg.s:1230   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc0qzoHg.s:657    .text:0000000000000230 .LBB184
     /tmp/cc0qzoHg.s:711    .text:0000000000000274 .LBE184
     /tmp/cc0qzoHg.s:721    .text:0000000000000274 .LBB199
     /tmp/cc0qzoHg.s:815    .text:00000000000002e0 .LBE199
     /tmp/cc0qzoHg.s:819    .text:00000000000002e4 .LBB200
     /tmp/cc0qzoHg.s:889    .text:0000000000000350 .LBE200
     /tmp/cc0qzoHg.s:710    .text:0000000000000274 .LBE185
     /tmp/cc0qzoHg.s:722    .text:0000000000000274 .LBB197
     /tmp/cc0qzoHg.s:802    .text:00000000000002d8 .LBE197
     /tmp/cc0qzoHg.s:820    .text:00000000000002e4 .LBB198
     /tmp/cc0qzoHg.s:888    .text:0000000000000350 .LBE198
     /tmp/cc0qzoHg.s:774    .text:00000000000002b8 .LBE187
     /tmp/cc0qzoHg.s:836    .text:0000000000000308 .LBB193
     /tmp/cc0qzoHg.s:858    .text:0000000000000328 .LBE193
     /tmp/cc0qzoHg.s:794    .text:00000000000002d0 .LBE190
     /tmp/cc0qzoHg.s:859    .text:0000000000000328 .LBB194
     /tmp/cc0qzoHg.s:881    .text:0000000000000348 .LBE194
     /tmp/cc0qzoHg.s:431    .text:0000000000000118 .LBB213
     /tmp/cc0qzoHg.s:629    .text:0000000000000218 .LBE213
     /tmp/cc0qzoHg.s:633    .text:000000000000021c .LBB230
     /tmp/cc0qzoHg.s:655    .text:0000000000000230 .LBE230
     /tmp/cc0qzoHg.s:616    .text:0000000000000210 .LBE216
     /tmp/cc0qzoHg.s:634    .text:000000000000021c .LBB229
     /tmp/cc0qzoHg.s:654    .text:0000000000000230 .LBE229
     /tmp/cc0qzoHg.s:467    .text:0000000000000134 .LBB218
     /tmp/cc0qzoHg.s:614    .text:0000000000000210 .LBE218
     /tmp/cc0qzoHg.s:636    .text:000000000000021c .LBB227
     /tmp/cc0qzoHg.s:652    .text:0000000000000230 .LBE227
     /tmp/cc0qzoHg.s:541    .text:00000000000001ac .LBB221
     /tmp/cc0qzoHg.s:611    .text:0000000000000210 .LBE221
     /tmp/cc0qzoHg.s:639    .text:000000000000021c .LBB222
     /tmp/cc0qzoHg.s:649    .text:0000000000000230 .LBE222

GAS LISTING /tmp/cc0qzoHg.s 			page 49


UNDEFINED SYMBOLS
console_handler
__putc
_ZN16MemoryAllocation9fmem_headE
_ZN3TCB12createThreadEPFvPvEPPS_S0_b
_ZN3TCB7runningE
_ZN3TCB11setFinishedEb
_ZN3TCB8dispatchEv
_ZN3TCB11startThreadEPPS_PFvPvE
_ZN9semaphore7semOpenEPPS_j
_ZN9semaphore8semCloseEPS_
_ZN9semaphore7semWaitEPS_
_ZN9semaphore9semSignalEPS_
__getc
