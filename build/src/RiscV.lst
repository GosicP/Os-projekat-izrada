GAS LISTING /tmp/ccahhE84.s 			page 1


   1              		.file	"RiscV.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5RiscV10popSppSpieEv
   9              	_ZN5RiscV10popSppSpieEv:
  10              	.LFB48:
  11              		.file 1 "src/RiscV.cpp"
   1:src/RiscV.cpp **** //
   2:src/RiscV.cpp **** // Created by os on 8/14/22.
   3:src/RiscV.cpp **** //
   4:src/RiscV.cpp **** 
   5:src/RiscV.cpp **** #include "../h/RiscV.hpp"
   6:src/RiscV.cpp **** #include "../h/tcb.hpp"
   7:src/RiscV.cpp **** #include "../lib/console.h"
   8:src/RiscV.cpp **** #include "../h/MemoryAllocation.hpp"
   9:src/RiscV.cpp **** #include "../h/tcb.hpp"
  10:src/RiscV.cpp **** #include "../lib/console.h"
  11:src/RiscV.cpp **** 
  12:src/RiscV.cpp **** 
  13:src/RiscV.cpp **** void RiscV::popSppSpie() {
  12              		.loc 1 13 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/RiscV.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 14 5
  21              		.loc 1 14 39 is_stmt 0
  22              	#APP
  23              	# 14 "src/RiscV.cpp" 1
  15              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 15 5 is_stmt 1
  27              		.loc 1 15 30 is_stmt 0
  28              	# 15 "src/RiscV.cpp" 1
  16              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 16 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE48:
  42              		.align	2
  43              		.globl	_ZN5RiscV20handleSupervisorTrapEv
GAS LISTING /tmp/ccahhE84.s 			page 2


  45              	_ZN5RiscV20handleSupervisorTrapEv:
  46              	.LFB49:
  17:src/RiscV.cpp **** 
  18:src/RiscV.cpp **** void RiscV::handleSupervisorTrap() {
  47              		.loc 1 18 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FA 		addi	sp,sp,-96
  50              		.cfi_def_cfa_offset 96
  51 0024 233C1104 		sd	ra,88(sp)
  52 0028 23388104 		sd	s0,80(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040106 		addi	s0,sp,96
  56              		.cfi_def_cfa 8, 0
  19:src/RiscV.cpp ****     //class TCB;
  20:src/RiscV.cpp ****     typedef TCB* thread_t;
  57              		.loc 1 20 5
  21:src/RiscV.cpp ****     typedef semaphore* sem_t;
  58              		.loc 1 21 5
  22:src/RiscV.cpp ****     volatile uint64 a4;
  59              		.loc 1 22 5
  23:src/RiscV.cpp ****     volatile uint64 size;
  60              		.loc 1 23 5
  24:src/RiscV.cpp ****     volatile uint64 handle;
  61              		.loc 1 24 5
  25:src/RiscV.cpp ****     volatile uint64 start_routine;
  62              		.loc 1 25 5
  26:src/RiscV.cpp ****     volatile uint64 arg;
  63              		.loc 1 26 5
  27:src/RiscV.cpp ****     volatile uint64 ptr;
  64              		.loc 1 27 5
  28:src/RiscV.cpp ****     __asm__ volatile("sd a4, %0" : "=m"(a4));
  65              		.loc 1 28 5
  66              		.loc 1 28 45 is_stmt 0
  67              	#APP
  68              	# 28 "src/RiscV.cpp" 1
  29              	    __asm__ volatile("sd a3, %0" : "=m"(arg));
  69              		sd a4, -24(s0)
  70              	# 0 "" 2
  71              		.loc 1 29 5 is_stmt 1
  72              		.loc 1 29 46 is_stmt 0
  73              	# 29 "src/RiscV.cpp" 1
  30              	    __asm__ volatile("sd a2, %0" : "=m"(start_routine));
  74              		sd a3, -56(s0)
  75              	# 0 "" 2
  76              		.loc 1 30 5 is_stmt 1
  77              		.loc 1 30 56 is_stmt 0
  78              	# 30 "src/RiscV.cpp" 1
  31              	    __asm__ volatile("sd a1, %0" : "=m"(handle));
  79              		sd a2, -48(s0)
  80              	# 0 "" 2
  81              		.loc 1 31 5 is_stmt 1
  82              		.loc 1 31 49 is_stmt 0
  83              	# 31 "src/RiscV.cpp" 1
  32              	    //__asm__ volatile("sd a1, %0" : "=m"(size));
  33:src/RiscV.cpp ****     //__asm__ volatile("sd a1, %0" : "=m"(ptr));
  34:src/RiscV.cpp ****     uint64 sysCallNr;
GAS LISTING /tmp/ccahhE84.s 			page 3


  84              		sd a1, -40(s0)
  85              	# 0 "" 2
  86              		.loc 1 34 5 is_stmt 1
  35:src/RiscV.cpp ****     int ret_value_thr_exit;
  87              		.loc 1 35 5
  36:src/RiscV.cpp ****     uint64 scause = r_scause();
  88              		.loc 1 36 5
  89              	#NO_APP
  90              	.LBB102:
  91              	.LBB103:
  92              		.file 2 "src/../h/RiscV.hpp"
   1:src/../h/RiscV.hpp **** //
   2:src/../h/RiscV.hpp **** // Created by os on 8/14/22.
   3:src/../h/RiscV.hpp **** //
   4:src/../h/RiscV.hpp **** 
   5:src/../h/RiscV.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/RiscV.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/RiscV.hpp **** #include "../lib/hw.h"
   8:src/../h/RiscV.hpp **** 
   9:src/../h/RiscV.hpp **** class RiscV {
  10:src/../h/RiscV.hpp **** public:
  11:src/../h/RiscV.hpp ****     //pop sstatus.spp and sstatus.spie bits(mora da bude ne inline funkcija)
  12:src/../h/RiscV.hpp ****     static void popSppSpie();
  13:src/../h/RiscV.hpp **** 
  14:src/../h/RiscV.hpp ****     //push x3...x31 registers on stack
  15:src/../h/RiscV.hpp ****     static void pushRegisters();
  16:src/../h/RiscV.hpp **** 
  17:src/../h/RiscV.hpp ****     //pop x3...x31 registers on stack
  18:src/../h/RiscV.hpp ****     static void popRegisters();
  19:src/../h/RiscV.hpp **** 
  20:src/../h/RiscV.hpp ****     //read register scause
  21:src/../h/RiscV.hpp ****     static uint64 r_scause();
  22:src/../h/RiscV.hpp **** 
  23:src/../h/RiscV.hpp ****     //write register scause
  24:src/../h/RiscV.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/RiscV.hpp **** 
  26:src/../h/RiscV.hpp ****     //read register sepc
  27:src/../h/RiscV.hpp ****     static uint64 r_sepc();
  28:src/../h/RiscV.hpp **** 
  29:src/../h/RiscV.hpp ****     //write register sepc
  30:src/../h/RiscV.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/RiscV.hpp **** 
  32:src/../h/RiscV.hpp ****     //read register stvec
  33:src/../h/RiscV.hpp ****     static uint64 r_stvec();
  34:src/../h/RiscV.hpp **** 
  35:src/../h/RiscV.hpp ****     //write register stvec
  36:src/../h/RiscV.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/RiscV.hpp **** 
  38:src/../h/RiscV.hpp ****     //write register stval
  39:src/../h/RiscV.hpp ****     static uint64 r_stval();
  40:src/../h/RiscV.hpp **** 
  41:src/../h/RiscV.hpp ****     //write register stval
  42:src/../h/RiscV.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/RiscV.hpp **** 
  44:src/../h/RiscV.hpp ****     enum BitMaskSip{
  45:src/../h/RiscV.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/RiscV.hpp ****         SIP_STIP = (1 << 5),
GAS LISTING /tmp/ccahhE84.s 			page 4


  47:src/../h/RiscV.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/RiscV.hpp ****     };
  49:src/../h/RiscV.hpp **** 
  50:src/../h/RiscV.hpp ****     //mask set register sip
  51:src/../h/RiscV.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/RiscV.hpp **** 
  53:src/../h/RiscV.hpp ****     //mask clear register sip
  54:src/../h/RiscV.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/RiscV.hpp **** 
  56:src/../h/RiscV.hpp ****     //read register sip
  57:src/../h/RiscV.hpp ****     static uint64 r_sip();
  58:src/../h/RiscV.hpp **** 
  59:src/../h/RiscV.hpp ****     //write register sip
  60:src/../h/RiscV.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/RiscV.hpp **** 
  62:src/../h/RiscV.hpp ****     enum BitMaskSstatus{
  63:src/../h/RiscV.hpp ****         SSTATUS_SIE = (1<<1),
  64:src/../h/RiscV.hpp ****         SSTATUS_SPIE = (1<<5),
  65:src/../h/RiscV.hpp ****         SSTATUS_SPP=  (1<<8),
  66:src/../h/RiscV.hpp ****     };
  67:src/../h/RiscV.hpp **** 
  68:src/../h/RiscV.hpp ****     //mask set register sstatus
  69:src/../h/RiscV.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/RiscV.hpp **** 
  71:src/../h/RiscV.hpp ****     //mask clear register sstatus
  72:src/../h/RiscV.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/RiscV.hpp **** 
  74:src/../h/RiscV.hpp ****     //read register sstatus
  75:src/../h/RiscV.hpp ****     static uint64 r_sstatus();
  76:src/../h/RiscV.hpp **** 
  77:src/../h/RiscV.hpp ****     //write register sstatus
  78:src/../h/RiscV.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/RiscV.hpp **** 
  80:src/../h/RiscV.hpp ****     static void supervisorTrap();
  81:src/../h/RiscV.hpp **** 
  82:src/../h/RiscV.hpp **** private:
  83:src/../h/RiscV.hpp ****     //obradjuje trap handler
  84:src/../h/RiscV.hpp ****     static void handleSupervisorTrap();
  85:src/../h/RiscV.hpp **** };
  86:src/../h/RiscV.hpp **** 
  87:src/../h/RiscV.hpp **** inline uint64 RiscV::r_scause() {
  88:src/../h/RiscV.hpp ****     uint64 volatile scause;
  93              		.loc 2 88 5
  89:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[scause], scause" : [scause] "=r"(scause));
  94              		.loc 2 89 5
  95              		.loc 2 89 71 is_stmt 0
  96              	#APP
  97              	# 89 "src/../h/RiscV.hpp" 1
  90              	    return scause;
  98              		csrr a5, scause
  99              	# 0 "" 2
 100              	#NO_APP
 101 0044 2334F4FA 		sd	a5,-88(s0)
 102              		.loc 2 90 5 is_stmt 1
 103              		.loc 2 90 12 is_stmt 0
 104 0048 033784FA 		ld	a4,-88(s0)
 105              	.LVL0:
GAS LISTING /tmp/ccahhE84.s 			page 5


 106              	.LBE103:
 107              	.LBE102:
  37:src/RiscV.cpp ****     volatile uint64 sepc = r_sepc() + 4;
 108              		.loc 1 37 5 is_stmt 1
 109              	.LBB104:
 110              	.LBB105:
  91:src/../h/RiscV.hpp **** 
  92:src/../h/RiscV.hpp **** }
  93:src/../h/RiscV.hpp **** 
  94:src/../h/RiscV.hpp **** inline void RiscV::w_scause(uint64 scause){
  95:src/../h/RiscV.hpp ****     __asm__ volatile("csrw scause, %[scause]": : [scause] "r"(scause));
  96:src/../h/RiscV.hpp **** 
  97:src/../h/RiscV.hpp **** }
  98:src/../h/RiscV.hpp **** 
  99:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sepc(){
 100:src/../h/RiscV.hpp ****     uint64  sepc;
 111              		.loc 2 100 5
 101:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112              		.loc 2 101 5
 113              		.loc 2 101 63 is_stmt 0
 114              	#APP
 115              	# 101 "src/../h/RiscV.hpp" 1
 102              	    return sepc;
 116              		csrr a5, sepc
 117              	# 0 "" 2
 118              	.LVL1:
 119              		.loc 2 102 5 is_stmt 1
 120              	#NO_APP
 121              	.LBE105:
 122              	.LBE104:
 123              		.loc 1 37 37 is_stmt 0
 124 0050 93874700 		addi	a5,a5,4
 125              		.loc 1 37 39
 126 0054 233CF4FA 		sd	a5,-72(s0)
  38:src/RiscV.cpp ****     volatile uint64 sstatus = r_sstatus();
 127              		.loc 1 38 5 is_stmt 1
 128              	.LBB106:
 129              	.LBB107:
 103:src/../h/RiscV.hpp **** }
 104:src/../h/RiscV.hpp **** 
 105:src/../h/RiscV.hpp **** inline void RiscV::w_sepc(uint64 volatile sepc){
 106:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]": : [sepc] "r"(sepc));
 107:src/../h/RiscV.hpp **** }
 108:src/../h/RiscV.hpp **** 
 109:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stvec() {
 110:src/../h/RiscV.hpp ****     uint64 volatile stvec;
 111:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 112:src/../h/RiscV.hpp ****     return stvec;
 113:src/../h/RiscV.hpp **** }
 114:src/../h/RiscV.hpp **** 
 115:src/../h/RiscV.hpp **** inline void RiscV::w_stvec(uint64 stvec){
 116:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]": : [stvec] "r"(stvec));
 117:src/../h/RiscV.hpp **** }
 118:src/../h/RiscV.hpp **** 
 119:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stval(){
 120:src/../h/RiscV.hpp ****     uint64 volatile stval;
 121:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[stval], stval" : [stval] "=r"(stval));
GAS LISTING /tmp/ccahhE84.s 			page 6


 122:src/../h/RiscV.hpp ****     return stval;
 123:src/../h/RiscV.hpp **** }
 124:src/../h/RiscV.hpp **** 
 125:src/../h/RiscV.hpp **** inline void RiscV::w_stval(uint64 stval) {
 126:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stval, %[stval]": : [stval] "r"(stval));
 127:src/../h/RiscV.hpp **** }
 128:src/../h/RiscV.hpp **** 
 129:src/../h/RiscV.hpp **** inline void RiscV::ms_sip(uint64 mask){
 130:src/../h/RiscV.hpp ****     __asm__ volatile("csrs sip, %[mask]": : [mask]"r"(mask));
 131:src/../h/RiscV.hpp **** }
 132:src/../h/RiscV.hpp **** 
 133:src/../h/RiscV.hpp **** inline void RiscV::mc_sip(uint64 mask) {
 134:src/../h/RiscV.hpp ****     __asm__ volatile("csrc sip, %[mask]" : : [mask] "r"(mask));
 135:src/../h/RiscV.hpp **** }
 136:src/../h/RiscV.hpp **** 
 137:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sip(){
 138:src/../h/RiscV.hpp ****     uint64 volatile sip;
 139:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sip], sip" : [sip] "=r"(sip));
 140:src/../h/RiscV.hpp ****     return sip;
 141:src/../h/RiscV.hpp **** }
 142:src/../h/RiscV.hpp **** 
 143:src/../h/RiscV.hpp **** inline void RiscV::w_sip(uint64 sip) {
 144:src/../h/RiscV.hpp ****     __asm__ volatile("csrw sip, %[sip]": : [sip] "r"(sip));
 145:src/../h/RiscV.hpp **** }
 146:src/../h/RiscV.hpp **** 
 147:src/../h/RiscV.hpp **** inline void RiscV::ms_sstatus(uint64 mask) {
 148:src/../h/RiscV.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]": : [mask] "r"(mask));
 149:src/../h/RiscV.hpp **** }
 150:src/../h/RiscV.hpp **** 
 151:src/../h/RiscV.hpp **** inline void RiscV::mc_sstatus(uint64 mask) {
 152:src/../h/RiscV.hpp ****     __asm__ volatile("csrc sstatus, %[mask]": : [mask] "r"(mask));
 153:src/../h/RiscV.hpp **** }
 154:src/../h/RiscV.hpp **** 
 155:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sstatus() {
 156:src/../h/RiscV.hpp ****     uint64 sstatus;
 130              		.loc 2 156 5
 157:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus": [sstatus] "=r"(sstatus));
 131              		.loc 2 157 5
 132              		.loc 2 157 75 is_stmt 0
 133              	#APP
 134              	# 157 "src/../h/RiscV.hpp" 1
 158              	    return sstatus;
 135              		csrr a5, sstatus
 136              	# 0 "" 2
 137              	.LVL2:
 138              		.loc 2 158 5 is_stmt 1
 139              	#NO_APP
 140              	.LBE107:
 141              	.LBE106:
 142              		.loc 1 38 41 is_stmt 0
 143 005c 2338F4FA 		sd	a5,-80(s0)
  39:src/RiscV.cpp ****     __asm__ volatile("mv %[sysCallNr], a0" : [sysCallNr] "=r"(sysCallNr));
 144              		.loc 1 39 5 is_stmt 1
 145              		.loc 1 39 74 is_stmt 0
 146              	#APP
 147              	# 39 "src/RiscV.cpp" 1
  40              	    if (scause == 0x000000000000009UL || scause == 0x000000000000008UL){
GAS LISTING /tmp/ccahhE84.s 			page 7


 148              		mv a5, a0
 149              	# 0 "" 2
 150              	.LVL3:
 151              		.loc 1 40 5 is_stmt 1
 152              	#NO_APP
 153              	.LBB108:
 154              		.loc 1 40 39 is_stmt 0
 155 0064 130687FF 		addi	a2,a4,-8
 156              		.loc 1 40 5
 157 0068 93061000 		li	a3,1
 158 006c 63F8C602 		bleu	a2,a3,.L44
  41:src/RiscV.cpp ****         if (sysCallNr == 0x01UL) {
  42:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
  43:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
  44:src/RiscV.cpp ****             //ja sam ovde spakovao argument koji se dobije, i saljem ga nazad u funkciju posle ecal
  45:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
  46:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  47:src/RiscV.cpp ****         } else if (sysCallNr == 0x02UL) {
  48:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
  49:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
  50:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
  51:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
  52:src/RiscV.cpp ****         }else if(sysCallNr == 0x11UL){
  53:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg,
  54:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
  55:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  56:src/RiscV.cpp ****         }else if(sysCallNr == 0x12UL){
  57:src/RiscV.cpp ****             ret_value_thr_exit=TCB::thread_exit();
  58:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
  59:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  60:src/RiscV.cpp ****         }else if(sysCallNr == 0x13UL){
  61:src/RiscV.cpp ****             TCB::thread_dispatch();
  62:src/RiscV.cpp ****         }else if(sysCallNr==0x14UL){
  63:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)a4, (thread_t*) handle, (void*)arg, false);
  64:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
  65:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  66:src/RiscV.cpp ****         }else if(sysCallNr==0x15UL){
  67:src/RiscV.cpp ****             TCB::startThread((thread_t*)handle, (TCB::Body)start_routine);
  68:src/RiscV.cpp ****         }else if(sysCallNr == 0x21UL){
  69:src/RiscV.cpp ****             int retval = semaphore::semOpen((sem_t*)handle, (unsigned)start_routine);
  70:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  71:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  72:src/RiscV.cpp ****         }else if(sysCallNr == 0x22UL){
  73:src/RiscV.cpp ****             int retval = semaphore::semClose((sem_t)handle);
  74:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  75:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  76:src/RiscV.cpp ****         }else if(sysCallNr == 0x23UL){
  77:src/RiscV.cpp ****             int retval = semaphore::semWait((sem_t)handle);
  78:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  79:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  80:src/RiscV.cpp ****         }else if(sysCallNr == 0x24UL){
  81:src/RiscV.cpp ****             int retval = semaphore::semSignal((sem_t)handle);
  82:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
  83:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  84:src/RiscV.cpp ****        }else if(sysCallNr==0x41UL){
  85:src/RiscV.cpp ****             char retval = __getc();
  86:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
GAS LISTING /tmp/ccahhE84.s 			page 8


  87:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  88:src/RiscV.cpp ****         }else if(sysCallNr==0x42UL){
  89:src/RiscV.cpp ****             __putc((char)handle);
  90:src/RiscV.cpp ****         }
  91:src/RiscV.cpp ****         //enviroment call from s-mode
  92:src/RiscV.cpp **** 
  93:src/RiscV.cpp ****         /*TCB::timeSliceCounter = 0;
  94:src/RiscV.cpp ****         TCB::dispatch();*/
  95:src/RiscV.cpp ****         w_sstatus(sstatus);
  96:src/RiscV.cpp ****         w_sepc(sepc);
  97:src/RiscV.cpp ****     }
  98:src/RiscV.cpp ****     else if(scause == 0x8000000000000001UL){
 159              		.loc 1 98 10 is_stmt 1
 160 0070 9307F0FF 		li	a5,-1
 161              	.LVL4:
 162 0074 9397F703 		slli	a5,a5,63
 163 0078 93871700 		addi	a5,a5,1
 164 007c 6302F740 		beq	a4,a5,.L45
  99:src/RiscV.cpp **** //         TCB::timeSliceCounter++;
 100:src/RiscV.cpp **** //         if(TCB::timeSliceCounter>= TCB::running->getTimeSlice()){
 101:src/RiscV.cpp **** //             volatile uint64 sepc = r_sepc();
 102:src/RiscV.cpp **** //             volatile uint64 sstatus = r_sstatus();
 103:src/RiscV.cpp **** //             TCB::timeSliceCounter=0;
 104:src/RiscV.cpp **** //             TCB::dispatch();
 105:src/RiscV.cpp **** //             w_sstatus(sstatus);
 106:src/RiscV.cpp **** //             w_sepc(sepc);
 107:src/RiscV.cpp **** //         }
 108:src/RiscV.cpp ****         mc_sip(SIP_SSIP);
 109:src/RiscV.cpp ****     }else if(scause==0x8000000000000009UL){
 165              		.loc 1 109 11
 166 0080 9307F0FF 		li	a5,-1
 167 0084 9397F703 		slli	a5,a5,63
 168 0088 93879700 		addi	a5,a5,9
 169 008c 631EF718 		bne	a4,a5,.L3
 110:src/RiscV.cpp ****         //supervisor external interrupt (console)
 111:src/RiscV.cpp ****         console_handler();
 170              		.loc 1 111 9
 171              		.loc 1 111 24 is_stmt 0
 172 0090 97000000 		call	console_handler@plt
 172      E7800000 
 173              	.LVL5:
 174              	.LBE108:
 112:src/RiscV.cpp ****     }else {
 113:src/RiscV.cpp ****         //unexpected trap cause
 114:src/RiscV.cpp ****         //print (scause)
 115:src/RiscV.cpp ****         //print sepc
 116:src/RiscV.cpp ****         //print sval
 117:src/RiscV.cpp **** 
 118:src/RiscV.cpp ****     }
 119:src/RiscV.cpp **** }...
 175              		.loc 1 119 1
 176 0098 6F000019 		j	.L3
 177              	.LVL6:
 178              	.L44:
 179              	.LBB267:
 180              	.LBB109:
  41:src/RiscV.cpp ****         if (sysCallNr == 0x01UL) {
GAS LISTING /tmp/ccahhE84.s 			page 9


 181              		.loc 1 41 9 is_stmt 1
 182              	.LBB110:
 183 009c 13071000 		li	a4,1
 184              	.LVL7:
 185 00a0 638CE706 		beq	a5,a4,.L46
 186              	.LBE110:
 187              	.LBE109:
 188              	.LBE267:
  47:src/RiscV.cpp ****         } else if (sysCallNr == 0x02UL) {
 189              		.loc 1 47 16
 190              	.LBB268:
 191              	.LBB252:
 192              	.LBB235:
 193              	.LBB111:
 194 00a4 13072000 		li	a4,2
 195 00a8 6382E71A 		beq	a5,a4,.L47
 196              	.LBE111:
 197              	.LBE235:
 198              	.LBE252:
 199              	.LBE268:
  52:src/RiscV.cpp ****         }else if(sysCallNr == 0x11UL){
 200              		.loc 1 52 15
 201              	.LBB269:
 202              	.LBB253:
 203              	.LBB236:
 204              	.LBB205:
 205              	.LBB112:
 206 00ac 13071001 		li	a4,17
 207 00b0 638EE72A 		beq	a5,a4,.L48
 208              	.LBE112:
 209              	.LBE205:
 210              	.LBE236:
 211              	.LBE253:
 212              	.LBE269:
  56:src/RiscV.cpp ****         }else if(sysCallNr == 0x12UL){
 213              		.loc 1 56 15
 214              	.LBB270:
 215              	.LBB254:
 216              	.LBB237:
 217              	.LBB206:
 218              	.LBB178:
 219              	.LBB113:
 220 00b4 13072001 		li	a4,18
 221 00b8 638CE72C 		beq	a5,a4,.L49
 222              	.LBE113:
 223              	.LBE178:
 224              	.LBE206:
 225              	.LBE237:
 226              	.LBE254:
 227              	.LBE270:
  60:src/RiscV.cpp ****         }else if(sysCallNr == 0x13UL){
 228              		.loc 1 60 15
 229              	.LBB271:
 230              	.LBB255:
 231              	.LBB238:
 232              	.LBB207:
 233              	.LBB179:
GAS LISTING /tmp/ccahhE84.s 			page 10


 234              	.LBB168:
 235              	.LBB114:
 236 00bc 13073001 		li	a4,19
 237 00c0 6380E730 		beq	a5,a4,.L50
 238              	.LBE114:
 239              	.LBE168:
 240              	.LBE179:
 241              	.LBE207:
 242              	.LBE238:
 243              	.LBE255:
 244              	.LBE271:
  62:src/RiscV.cpp ****         }else if(sysCallNr==0x14UL){
 245              		.loc 1 62 15
 246              	.LBB272:
 247              	.LBB256:
 248              	.LBB239:
 249              	.LBB208:
 250              	.LBB180:
 251              	.LBB169:
 252              	.LBB158:
 253              	.LBB115:
 254 00c4 13074001 		li	a4,20
 255 00c8 6382E730 		beq	a5,a4,.L51
 256              	.LBE115:
 257              	.LBE158:
 258              	.LBE169:
 259              	.LBE180:
 260              	.LBE208:
 261              	.LBE239:
 262              	.LBE256:
 263              	.LBE272:
  66:src/RiscV.cpp ****         }else if(sysCallNr==0x15UL){
 264              		.loc 1 66 15
 265              	.LBB273:
 266              	.LBB257:
 267              	.LBB240:
 268              	.LBB209:
 269              	.LBB181:
 270              	.LBB170:
 271              	.LBB159:
 272              	.LBB149:
 273              	.LBB116:
 274 00cc 13075001 		li	a4,21
 275 00d0 6380E732 		beq	a5,a4,.L52
 276              	.LBE116:
 277              	.LBE149:
 278              	.LBE159:
 279              	.LBE170:
 280              	.LBE181:
 281              	.LBE209:
 282              	.LBE240:
 283              	.LBE257:
 284              	.LBE273:
  68:src/RiscV.cpp ****         }else if(sysCallNr == 0x21UL){
 285              		.loc 1 68 15
 286              	.LBB274:
 287              	.LBB258:
GAS LISTING /tmp/ccahhE84.s 			page 11


 288              	.LBB241:
 289              	.LBB210:
 290              	.LBB182:
 291              	.LBB171:
 292              	.LBB160:
 293              	.LBB150:
 294              	.LBB142:
 295              	.LBB117:
 296 00d4 13071002 		li	a4,33
 297 00d8 6386E732 		beq	a5,a4,.L53
 298              	.LBE117:
 299              	.LBE142:
 300              	.LBE150:
 301              	.LBE160:
 302              	.LBE171:
 303              	.LBE182:
 304              	.LBE210:
 305              	.LBE241:
 306              	.LBE258:
 307              	.LBE274:
  72:src/RiscV.cpp ****         }else if(sysCallNr == 0x22UL){
 308              		.loc 1 72 15
 309              	.LBB275:
 310              	.LBB259:
 311              	.LBB242:
 312              	.LBB211:
 313              	.LBB183:
 314              	.LBB172:
 315              	.LBB161:
 316              	.LBB151:
 317              	.LBB143:
 318              	.LBB137:
 319              	.LBB118:
 320 00dc 13072002 		li	a4,34
 321 00e0 6382E734 		beq	a5,a4,.L54
 322              	.LBE118:
 323              	.LBE137:
 324              	.LBE143:
 325              	.LBE151:
 326              	.LBE161:
 327              	.LBE172:
 328              	.LBE183:
 329              	.LBE211:
 330              	.LBE242:
 331              	.LBE259:
 332              	.LBE275:
  76:src/RiscV.cpp ****         }else if(sysCallNr == 0x23UL){
 333              		.loc 1 76 15
 334              	.LBB276:
 335              	.LBB260:
 336              	.LBB243:
 337              	.LBB212:
 338              	.LBB184:
 339              	.LBB173:
 340              	.LBB162:
 341              	.LBB152:
 342              	.LBB144:
GAS LISTING /tmp/ccahhE84.s 			page 12


 343              	.LBB138:
 344              	.LBB132:
 345              	.LBB119:
 346 00e4 13073002 		li	a4,35
 347 00e8 638AE734 		beq	a5,a4,.L55
 348              	.LBE119:
 349              	.LBE132:
 350              	.LBE138:
 351              	.LBE144:
 352              	.LBE152:
 353              	.LBE162:
 354              	.LBE173:
 355              	.LBE184:
 356              	.LBE212:
 357              	.LBE243:
 358              	.LBE260:
 359              	.LBE276:
  80:src/RiscV.cpp ****         }else if(sysCallNr == 0x24UL){
 360              		.loc 1 80 15
 361              	.LBB277:
 362              	.LBB261:
 363              	.LBB244:
 364              	.LBB213:
 365              	.LBB185:
 366              	.LBB174:
 367              	.LBB163:
 368              	.LBB153:
 369              	.LBB145:
 370              	.LBB139:
 371              	.LBB133:
 372              	.LBB128:
 373              	.LBB120:
 374 00ec 13074002 		li	a4,36
 375 00f0 6382E736 		beq	a5,a4,.L56
 376              	.LBE120:
 377              	.LBE128:
 378              	.LBE133:
 379              	.LBE139:
 380              	.LBE145:
 381              	.LBE153:
 382              	.LBE163:
 383              	.LBE174:
 384              	.LBE185:
 385              	.LBE213:
 386              	.LBE244:
 387              	.LBE261:
 388              	.LBE277:
  84:src/RiscV.cpp ****        }else if(sysCallNr==0x41UL){
 389              		.loc 1 84 14
 390              	.LBB278:
 391              	.LBB262:
 392              	.LBB245:
 393              	.LBB214:
 394              	.LBB186:
 395              	.LBB175:
 396              	.LBB164:
 397              	.LBB154:
GAS LISTING /tmp/ccahhE84.s 			page 13


 398              	.LBB146:
 399              	.LBB140:
 400              	.LBB134:
 401              	.LBB129:
 402              	.LBB125:
 403              	.LBB121:
 404 00f4 13071004 		li	a4,65
 405 00f8 638AE736 		beq	a5,a4,.L57
  88:src/RiscV.cpp ****         }else if(sysCallNr==0x42UL){
 406              		.loc 1 88 15
 407 00fc 13072004 		li	a4,66
 408 0100 639CE710 		bne	a5,a4,.L15
  89:src/RiscV.cpp ****             __putc((char)handle);
 409              		.loc 1 89 13
  89:src/RiscV.cpp ****             __putc((char)handle);
 410              		.loc 1 89 19 is_stmt 0
 411 0104 033584FD 		ld	a0,-40(s0)
 412 0108 1375F50F 		andi	a0,a0,0xff
 413 010c 97000000 		call	__putc@plt
 413      E7800000 
 414              	.LVL8:
 415 0114 6F004010 		j	.L15
 416              	.LVL9:
 417              	.L46:
 418              	.LBE121:
 419              	.LBE125:
 420              	.LBE129:
 421              	.LBE134:
 422              	.LBE140:
 423              	.LBE146:
 424              	.LBE154:
 425              	.LBE164:
 426              	.LBE175:
 427              	.LBE186:
 428              	.LBE214:
 429              	.LBB215:
  42:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
 430              		.loc 1 42 13 is_stmt 1
  42:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
 431              		.loc 1 42 67 is_stmt 0
 432              	#APP
 433              	# 42 "src/RiscV.cpp" 1
 434              		mv a5, a1
 435              	# 0 "" 2
 436              	.LVL10:
 437              	#NO_APP
 438 011c 2330F4FE 		sd	a5,-32(s0)
  43:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
 439              		.loc 1 43 13 is_stmt 1
  43:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
 440              		.loc 1 43 86 is_stmt 0
 441 0120 833704FE 		ld	a5,-32(s0)
 442              	.LVL11:
 443              	.LBB216:
 444              	.LBB217:
 445              		.file 3 "src/../h/../h/../h/MemoryAllocation.hpp"
   1:src/../h/../h/../h/MemoryAllocation.hpp **** #include "../lib/hw.h"
GAS LISTING /tmp/ccahhE84.s 			page 14


   2:src/../h/../h/../h/MemoryAllocation.hpp **** 
   3:src/../h/../h/../h/MemoryAllocation.hpp **** 
   4:src/../h/../h/../h/MemoryAllocation.hpp **** #ifndef PROJECT_BASE_MEMORYALLOCATION_HPP
   5:src/../h/../h/../h/MemoryAllocation.hpp **** #define PROJECT_BASE_MEMORYALLOCATION_HPP
   6:src/../h/../h/../h/MemoryAllocation.hpp **** 
   7:src/../h/../h/../h/MemoryAllocation.hpp **** 
   8:src/../h/../h/../h/MemoryAllocation.hpp **** class MemoryAllocation {
   9:src/../h/../h/../h/MemoryAllocation.hpp **** 
  10:src/../h/../h/../h/MemoryAllocation.hpp ****     //===========================DEFINICIJA SINGLETON KLASE POCETAK=======================k
  11:src/../h/../h/../h/MemoryAllocation.hpp **** private:
  12:src/../h/../h/../h/MemoryAllocation.hpp **** 
  13:src/../h/../h/../h/MemoryAllocation.hpp ****     struct FreeMem {
  14:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *next;
  15:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *prev;
  16:src/../h/../h/../h/MemoryAllocation.hpp ****         size_t size;
  17:src/../h/../h/../h/MemoryAllocation.hpp ****     };
  18:src/../h/../h/../h/MemoryAllocation.hpp **** 
  19:src/../h/../h/../h/MemoryAllocation.hpp **** 
  20:src/../h/../h/../h/MemoryAllocation.hpp ****     static FreeMem *fmem_head; //koja pocetna vrednost?
  21:src/../h/../h/../h/MemoryAllocation.hpp **** 
  22:src/../h/../h/../h/MemoryAllocation.hpp **** 
  23:src/../h/../h/../h/MemoryAllocation.hpp **** 
  24:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *instance;
  25:src/../h/../h/../h/MemoryAllocation.hpp ****     int data;
  26:src/../h/../h/../h/MemoryAllocation.hpp **** 
  27:src/../h/../h/../h/MemoryAllocation.hpp **** 
  28:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation() { //OVO SE SADA NIGGDE
  29:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  30:src/../h/../h/../h/MemoryAllocation.hpp ****                                     (char *) HEAP_START_ADDR); //da li smem ovo da castujem u size_
  31:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->next = nullptr;
  32:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->prev = nullptr;
  33:src/../h/../h/../h/MemoryAllocation.hpp ****         data = 0;
  34:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  35:src/../h/../h/../h/MemoryAllocation.hpp **** 
  36:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation(MemoryAllocation const &);
  37:src/../h/../h/../h/MemoryAllocation.hpp **** 
  38:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const &);
  39:src/../h/../h/../h/MemoryAllocation.hpp **** 
  40:src/../h/../h/../h/MemoryAllocation.hpp **** public:
  41:src/../h/../h/../h/MemoryAllocation.hpp **** 
  42:src/../h/../h/../h/MemoryAllocation.hpp **** 
  43:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *getInstance() {
  44:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!instance) {
  45:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head =  (FreeMem*) HEAP_START_ADDR;
  46:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  47:src/../h/../h/../h/MemoryAllocation.hpp ****                                         (char *) HEAP_START_ADDR); //da li smem ovo da castujem u s
  48:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->next = nullptr;
  49:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->prev = nullptr;
  50:src/../h/../h/../h/MemoryAllocation.hpp ****             static MemoryAllocation* instance;
  51:src/../h/../h/../h/MemoryAllocation.hpp ****             return instance;
  52:src/../h/../h/../h/MemoryAllocation.hpp ****         }
  53:src/../h/../h/../h/MemoryAllocation.hpp ****         return instance;
  54:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  55:src/../h/../h/../h/MemoryAllocation.hpp **** 
  56:src/../h/../h/../h/MemoryAllocation.hpp **** 
  57:src/../h/../h/../h/MemoryAllocation.hpp ****     int getData() {
  58:src/../h/../h/../h/MemoryAllocation.hpp ****         return this->data;
GAS LISTING /tmp/ccahhE84.s 			page 15


  59:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  60:src/../h/../h/../h/MemoryAllocation.hpp **** 
  61:src/../h/../h/../h/MemoryAllocation.hpp ****     void setData(int data) {
  62:src/../h/../h/../h/MemoryAllocation.hpp ****         this->data = data;
  63:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  64:src/../h/../h/../h/MemoryAllocation.hpp **** 
  65:src/../h/../h/../h/MemoryAllocation.hpp ****     /*MemoryAllocation(MemoryAllocation const&) = delete;
  66:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const&)  = delete;*/
  67:src/../h/../h/../h/MemoryAllocation.hpp **** //===========================DEFINICIJA SINGLETON KLASE KRAJ========================
  68:src/../h/../h/../h/MemoryAllocation.hpp ****     static int bytesToBlocks(size_t size){
  69:src/../h/../h/../h/MemoryAllocation.hpp ****         return (size+sizeof(FreeMem)+MEM_BLOCK_SIZE-1)/MEM_BLOCK_SIZE;
 446              		.loc 3 69 9 is_stmt 1
 447              		.loc 3 69 52 is_stmt 0
 448 0124 93877705 		addi	a5,a5,87
 449              	.LVL12:
 450              		.loc 3 69 55
 451 0128 93D76700 		srli	a5,a5,6
 452              	.LVL13:
 453              		.loc 3 69 56
 454 012c 9B870700 		sext.w	a5,a5
 455              	.LVL14:
 456              	.LBE217:
 457              	.LBE216:
 458              	.LBB218:
 459              	.LBB219:
  70:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  71:src/../h/../h/../h/MemoryAllocation.hpp **** 
  72:src/../h/../h/../h/MemoryAllocation.hpp **** 
  73:src/../h/../h/../h/MemoryAllocation.hpp **** //===========================METODE ZA ALOKACIJU MEMORIJE===========================
  74:src/../h/../h/../h/MemoryAllocation.hpp ****     static void tryToJoin (FreeMem* curr) {
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!curr) return;
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
  77:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->size += curr->next->size;
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
  81:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
  82:src/../h/../h/../h/MemoryAllocation.hpp ****         }
  83:src/../h/../h/../h/MemoryAllocation.hpp **** 
  84:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  85:src/../h/../h/../h/MemoryAllocation.hpp **** 
  86:src/../h/../h/../h/MemoryAllocation.hpp ****     //===================================== mem_free, ali sa ptr ===============
  87:src/../h/../h/../h/MemoryAllocation.hpp ****         static int mem_free(void* ptr) { //radi i kada posaljem sa &
  88:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
  90:src/../h/../h/../h/MemoryAllocation.hpp ****         {
  91:src/../h/../h/../h/MemoryAllocation.hpp ****             cur=nullptr;
  92:src/../h/../h/../h/MemoryAllocation.hpp ****         }else {
  93:src/../h/../h/../h/MemoryAllocation.hpp ****                 for (cur=fmem_head; cur->next!=ptr && ptr>(char*)(cur->next); cur=cur->next); //moz
  94:src/../h/../h/../h/MemoryAllocation.hpp ****             }
  95:src/../h/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newSeg = (FreeMem*)ptr;
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
  97:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
  99:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=cur;
 101:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
GAS LISTING /tmp/ccahhE84.s 			page 16


 102:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 103:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 104:src/../h/../h/../h/MemoryAllocation.hpp ****                 else {
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = fmem_head;
 106:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(newSeg->next) {
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 109:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 110:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur) {
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 112:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 113:src/../h/../h/../h/MemoryAllocation.hpp ****                 else {
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                     fmem_head = newSeg;
 115:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 116:src/../h/../h/../h/MemoryAllocation.hpp ****                 // Try to merge with the previous and next segments:
 117:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(newSeg);
 118:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 119:src/../h/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 120:src/../h/../h/../h/MemoryAllocation.hpp ****             if(newSeg==nullptr){
 121:src/../h/../h/../h/MemoryAllocation.hpp ****                 return -1;
 122:src/../h/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 123:src/../h/../h/../h/MemoryAllocation.hpp **** 
 124:src/../h/../h/../h/MemoryAllocation.hpp **** 
 125:src/../h/../h/../h/MemoryAllocation.hpp ****     }
 126:src/../h/../h/../h/MemoryAllocation.hpp ****     //===================================== kraj probe ==========================
 127:src/../h/../h/../h/MemoryAllocation.hpp **** 
 128:src/../h/../h/../h/MemoryAllocation.hpp **** 
 129:src/../h/../h/../h/MemoryAllocation.hpp **** 
 130:src/../h/../h/../h/MemoryAllocation.hpp ****     /*int mem_free(char* addr, size_t size) {
 131:src/../h/../h/../h/MemoryAllocation.hpp ****         // Find the place where to insert the new free segment (just after cur):
 132:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
 133:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!fmem_head || addr<(char*)fmem_head)
 134:src/../h/../h/../h/MemoryAllocation.hpp ****             cur = 0; // insert as the first
 135:src/../h/../h/../h/MemoryAllocation.hpp ****         else
 136:src/../h/../h/../h/MemoryAllocation.hpp ****             for (cur=fmem_head; cur->next!=0 && addr>(char*)(cur->next);
 137:src/../h/../h/../h/MemoryAllocation.hpp ****                  cur=cur->next);
 138:src/../h/../h/../h/MemoryAllocation.hpp ****             // Insert the new segment after cur:
 139:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* newSeg = (FreeMem*)addr;
 140:src/../h/../h/../h/MemoryAllocation.hpp ****         newSeg->size = size;
 141:src/../h/../h/../h/MemoryAllocation.hpp ****         newSeg->prev = cur;
 142:src/../h/../h/../h/MemoryAllocation.hpp ****         if (cur) newSeg->next = cur->next;
 143:src/../h/../h/../h/MemoryAllocation.hpp ****         else newSeg->next = fmem_head;
 144:src/../h/../h/../h/MemoryAllocation.hpp ****         if (newSeg->next) newSeg->next->prev = newSeg;
 145:src/../h/../h/../h/MemoryAllocation.hpp ****         if (cur) cur->next = newSeg;
 146:src/../h/../h/../h/MemoryAllocation.hpp ****         else fmem_head = newSeg;
 147:src/../h/../h/../h/MemoryAllocation.hpp ****             // Try to merge with the previous and next segments:
 148:src/../h/../h/../h/MemoryAllocation.hpp ****         tryToJoin(newSeg);
 149:src/../h/../h/../h/MemoryAllocation.hpp ****         tryToJoin(cur);
 150:src/../h/../h/../h/MemoryAllocation.hpp ****     }*/
 151:src/../h/../h/../h/MemoryAllocation.hpp **** 
 152:src/../h/../h/../h/MemoryAllocation.hpp ****     static void* mem_alloc(size_t size) {//uopste ne radi, iako u lotsofsmallmallocs pise da radi
 153:src/../h/../h/../h/MemoryAllocation.hpp ****         //size_t x=sizeof(fmem_head);
 154:src/../h/../h/../h/MemoryAllocation.hpp ****         //pozovi ovde samo bytes to blocks od size, da ne moras to da radis iz maina
 155:src/../h/../h/../h/MemoryAllocation.hpp ****         size=(size)*(size_t)MEM_BLOCK_SIZE; //kada je ovo ukljuceno, pravi problem u memfree, so il
 460              		.loc 3 155 9 is_stmt 1
 461              		.loc 3 155 13 is_stmt 0
 462 0130 93976700 		slli	a5,a5,6
GAS LISTING /tmp/ccahhE84.s 			page 17


 463              	.LVL15:
 156:src/../h/../h/../h/MemoryAllocation.hpp ****         for (FreeMem* cur = fmem_head; cur != nullptr; cur=cur->next){ // U DRUGOJ ITERACIJI FMEM_H
 464              		.loc 3 156 9 is_stmt 1
 465              	.LBB220:
 466              		.loc 3 156 23 is_stmt 0
 467 0134 17070000 		la	a4,_ZN16MemoryAllocation9fmem_headE
 467      03370700 
 468 013c 03370700 		ld	a4,0(a4)
 469              	.LVL16:
 470              	.L7:
 471              		.loc 3 156 44 is_stmt 1
 472 0140 6308070C 		beqz	a4,.L6
 473              	.LBB221:
 157:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 474              		.loc 3 157 13
 475              		.loc 3 157 34 is_stmt 0
 476 0144 97060000 		la	a3,_ZN16MemoryAllocation9fmem_headE
 476      83B60600 
 477 014c 03B60600 		ld	a2,0(a3)
 478 0150 03360600 		ld	a2,0(a2)
 479              		.loc 3 157 22
 480 0154 2330C700 		sd	a2,0(a4)
 158:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->prev=fmem_head->prev;
 481              		.loc 3 158 13 is_stmt 1
 482              		.loc 3 158 34 is_stmt 0
 483 0158 83B60600 		ld	a3,0(a3)
 484 015c 83B58600 		ld	a1,8(a3)
 485              		.loc 3 158 22
 486 0160 2334B700 		sd	a1,8(a4)
 159:src/../h/../h/../h/MemoryAllocation.hpp ****             if (cur->size<size) continue;
 487              		.loc 3 159 13 is_stmt 1
 488              		.loc 3 159 22 is_stmt 0
 489 0164 83360701 		ld	a3,16(a4)
 490              		.loc 3 159 13
 491 0168 63E6F602 		bgtu	a5,a3,.L39
 160:src/../h/../h/../h/MemoryAllocation.hpp ****             if (cur->size-size<=sizeof(FreeMem)){
 492              		.loc 3 160 13 is_stmt 1
 493              	.LBB222:
 494              		.loc 3 160 26 is_stmt 0
 495 016c B386F640 		sub	a3,a3,a5
 496              		.loc 3 160 13
 497 0170 13058001 		li	a0,24
 498 0174 636CD502 		bgtu	a3,a0,.L8
 161:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur->prev) cur->prev->next = cur->next;
 499              		.loc 3 161 17 is_stmt 1
 500 0178 63820502 		beqz	a1,.L9
 501              		.loc 3 161 32
 502              		.loc 3 161 48 is_stmt 0
 503 017c 23B0C500 		sd	a2,0(a1)
 504              	.LVL17:
 505              	.L10:
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 163:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur->next) cur->next->prev = cur->prev;
 506              		.loc 3 163 17 is_stmt 1
 507              		.loc 3 163 26 is_stmt 0
 508 0180 83370700 		ld	a5,0(a4)
 509              		.loc 3 163 17
GAS LISTING /tmp/ccahhE84.s 			page 18


 510 0184 63860708 		beqz	a5,.L6
 511              		.loc 3 163 32 is_stmt 1
 512              		.loc 3 163 55 is_stmt 0
 513 0188 83368700 		ld	a3,8(a4)
 514              		.loc 3 163 48
 515 018c 23B4D700 		sd	a3,8(a5)
 164:src/../h/../h/../h/MemoryAllocation.hpp ****                 return cur;
 516              		.loc 3 164 17 is_stmt 1
 517              		.loc 3 164 24 is_stmt 0
 518 0190 6F000008 		j	.L6
 519              	.LVL18:
 520              	.L39:
 521              	.LBE222:
 522              	.LBE221:
 156:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 523              		.loc 3 156 59
 524 0194 13070600 		mv	a4,a2
 525              	.LVL19:
 526 0198 6FF09FFA 		j	.L7
 527              	.LVL20:
 528              	.L9:
 529              	.LBB227:
 530              	.LBB225:
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 531              		.loc 3 162 22 is_stmt 1
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 532              		.loc 3 162 32 is_stmt 0
 533 019c 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 533      83B70700 
 534              	.LVL21:
 535 01a4 23B0C700 		sd	a2,0(a5)
 536 01a8 6FF09FFD 		j	.L10
 537              	.LVL22:
 538              	.L8:
 539              	.LBB223:
 165:src/../h/../h/../h/MemoryAllocation.hpp ****             }else {
 166:src/../h/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newfrgm = (FreeMem*)((char*)cur+size);
 540              		.loc 3 166 17 is_stmt 1
 541              		.loc 3 166 26 is_stmt 0
 542 01ac B306F700 		add	a3,a4,a5
 543              	.LVL23:
 167:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev=nullptr;
 544              		.loc 3 167 17 is_stmt 1
 545              		.loc 3 167 30 is_stmt 0
 546 01b0 23B40600 		sd	zero,8(a3)
 168:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next=nullptr;
 547              		.loc 3 168 17 is_stmt 1
 548              		.loc 3 168 30 is_stmt 0
 549 01b4 23B00600 		sd	zero,0(a3)
 169:src/../h/../h/../h/MemoryAllocation.hpp ****                 //newfrgm->size=cur->size-size;// DODATO TOKOM PROBE NITI
 170:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->prev) cur->prev->next = newfrgm;
 550              		.loc 3 170 17 is_stmt 1
 551              		.loc 3 170 33 is_stmt 0
 552 01b8 03368700 		ld	a2,8(a4)
 553              		.loc 3 170 25
 554 01bc 630E0606 		beqz	a2,.L12
 555              		.loc 3 170 39 is_stmt 1
GAS LISTING /tmp/ccahhE84.s 			page 19


 556              		.loc 3 170 55 is_stmt 0
 557 01c0 2330D600 		sd	a3,0(a2)
 558              	.L13:
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = newfrgm+sizeof(fmem_head); // ovo sam dodao sizeof da bi mi radio 
 172:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 559              		.loc 3 172 17 is_stmt 1
 560              		.loc 3 172 33 is_stmt 0
 561 01c4 03360700 		ld	a2,0(a4)
 562              		.loc 3 172 25
 563 01c8 63040600 		beqz	a2,.L14
 564              		.loc 3 172 39 is_stmt 1
 565              		.loc 3 172 55 is_stmt 0
 566 01cc 2334D600 		sd	a3,8(a2)
 567              	.L14:
 173:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev = cur->prev;
 568              		.loc 3 173 17 is_stmt 1
 569              		.loc 3 173 38 is_stmt 0
 570 01d0 03368700 		ld	a2,8(a4)
 571              		.loc 3 173 31
 572 01d4 23B4C600 		sd	a2,8(a3)
 174:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next = cur->next;
 573              		.loc 3 174 17 is_stmt 1
 574              		.loc 3 174 38 is_stmt 0
 575 01d8 83350700 		ld	a1,0(a4)
 576              		.loc 3 174 31
 577 01dc 23B0B600 		sd	a1,0(a3)
 175:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->size = cur->size-size;
 578              		.loc 3 175 17 is_stmt 1
 579              		.loc 3 175 38 is_stmt 0
 580 01e0 03370701 		ld	a4,16(a4)
 581              	.LVL24:
 582              		.loc 3 175 42
 583 01e4 B307F740 		sub	a5,a4,a5
 584              	.LVL25:
 585              		.loc 3 175 31
 586 01e8 23B8F600 		sd	a5,16(a3)
 176:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head =newfrgm+sizeof(fmem_head);
 587              		.loc 3 176 17 is_stmt 1
 588              		.loc 3 176 35 is_stmt 0
 589 01ec 1387060C 		addi	a4,a3,192
 590              		.loc 3 176 27
 591 01f0 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 591      83B50500 
 592 01f8 23B0E500 		sd	a4,0(a1)
 177:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->next=newfrgm->next;
 593              		.loc 3 177 17 is_stmt 1
 594              		.loc 3 177 42 is_stmt 0
 595 01fc 83B50600 		ld	a1,0(a3)
 596              		.loc 3 177 32
 597 0200 23B0B60C 		sd	a1,192(a3)
 178:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->prev=newfrgm->prev;
 598              		.loc 3 178 17 is_stmt 1
 599              		.loc 3 178 32 is_stmt 0
 600 0204 23B4C60C 		sd	a2,200(a3)
 179:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->size=newfrgm->size;
 601              		.loc 3 179 17 is_stmt 1
 602              		.loc 3 179 32 is_stmt 0
GAS LISTING /tmp/ccahhE84.s 			page 20


 603 0208 23B8F60C 		sd	a5,208(a3)
 180:src/../h/../h/../h/MemoryAllocation.hpp ****                 //fmem_head = (FreeMem*) (char*)newfrgm;
 181:src/../h/../h/../h/MemoryAllocation.hpp ****                 return newfrgm;
 604              		.loc 3 181 17 is_stmt 1
 605              		.loc 3 181 24 is_stmt 0
 606 020c 13870600 		mv	a4,a3
 607              	.LVL26:
 608              	.L6:
 609              	.LBE223:
 610              	.LBE225:
 611              	.LBE227:
 612              	.LBE220:
 613              	.LBE219:
 614              	.LBE218:
  45:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
 615              		.loc 1 45 13 is_stmt 1
  45:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
 616              		.loc 1 45 69 is_stmt 0
 617              	#APP
 618              	# 45 "src/RiscV.cpp" 1
  46:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 619              		mv a1, a4
 620              	# 0 "" 2
 621              		.loc 1 46 13 is_stmt 1
  46:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 622              		.loc 1 46 46 is_stmt 0
 623              	# 46 "src/RiscV.cpp" 1
 624              		sd a1, 88(s0)
 625              	# 0 "" 2
 626              	.LVL27:
 627              	#NO_APP
 628              	.L15:
 629              	.LBE215:
 630              	.LBE245:
  95:src/RiscV.cpp ****         w_sstatus(sstatus);
 631              		.loc 1 95 9 is_stmt 1
  95:src/RiscV.cpp ****         w_sstatus(sstatus);
 632              		.loc 1 95 18 is_stmt 0
 633 0218 833704FB 		ld	a5,-80(s0)
 634              	.LVL28:
 635              	.LBB246:
 636              	.LBB247:
 159:src/../h/RiscV.hpp **** }
 160:src/../h/RiscV.hpp **** 
 161:src/../h/RiscV.hpp **** inline void RiscV::w_sstatus(uint64 volatile sstatus) {
 162:src/../h/RiscV.hpp ****     __asm__ volatile("csrw sstatus, %[sstatus]": : [sstatus] "r"(sstatus));
 637              		.loc 2 162 5 is_stmt 1
 638              		.loc 2 162 75 is_stmt 0
 639              	#APP
 640              	# 162 "src/../h/RiscV.hpp" 1
 163              	}
 641              		csrw sstatus, a5
 642              	# 0 "" 2
 643              	.LVL29:
 644              	#NO_APP
 645              	.LBE247:
 646              	.LBE246:
GAS LISTING /tmp/ccahhE84.s 			page 21


  96:src/RiscV.cpp ****         w_sepc(sepc);
 647              		.loc 1 96 9 is_stmt 1
  96:src/RiscV.cpp ****         w_sepc(sepc);
 648              		.loc 1 96 15 is_stmt 0
 649 0220 833784FB 		ld	a5,-72(s0)
 650              	.LVL30:
 651              	.LBB248:
 652              	.LBB249:
 106:src/../h/RiscV.hpp **** }
 653              		.loc 2 106 5 is_stmt 1
 106:src/../h/RiscV.hpp **** }
 654              		.loc 2 106 64 is_stmt 0
 655              	#APP
 656              	# 106 "src/../h/RiscV.hpp" 1
 657              		csrw sepc, a5
 658              	# 0 "" 2
 659              	.LVL31:
 660              	#NO_APP
 661              	.L3:
 662              	.LBE249:
 663              	.LBE248:
 664              	.LBE262:
 665              	.LBE278:
 666              		.loc 1 119 1
 667 0228 83308105 		ld	ra,88(sp)
 668              		.cfi_remember_state
 669              		.cfi_restore 1
 670 022c 03340105 		ld	s0,80(sp)
 671              		.cfi_restore 8
 672              		.cfi_def_cfa 2, 96
 673 0230 13010106 		addi	sp,sp,96
 674              		.cfi_def_cfa_offset 0
 675 0234 67800000 		jr	ra
 676              	.LVL32:
 677              	.L12:
 678              		.cfi_restore_state
 679              	.LBB279:
 680              	.LBB263:
 681              	.LBB250:
 682              	.LBB232:
 683              	.LBB231:
 684              	.LBB230:
 685              	.LBB229:
 686              	.LBB228:
 687              	.LBB226:
 688              	.LBB224:
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 689              		.loc 3 171 22 is_stmt 1
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 690              		.loc 3 171 41 is_stmt 0
 691 0238 1386060C 		addi	a2,a3,192
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 692              		.loc 3 171 32
 693 023c 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 693      83B50500 
 694 0244 23B0C500 		sd	a2,0(a1)
 695 0248 6FF0DFF7 		j	.L13
GAS LISTING /tmp/ccahhE84.s 			page 22


 696              	.LVL33:
 697              	.L47:
 698              	.LBE224:
 699              	.LBE226:
 700              	.LBE228:
 701              	.LBE229:
 702              	.LBE230:
 703              	.LBE231:
 704              	.LBE232:
 705              	.LBB233:
 706              	.LBB187:
  48:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
 707              		.loc 1 48 13 is_stmt 1
  48:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
 708              		.loc 1 48 64 is_stmt 0
 709              	#APP
 710              	# 48 "src/RiscV.cpp" 1
 711              		mv a5, a1
 712              	# 0 "" 2
 713              	.LVL34:
 714              	#NO_APP
 715 0250 2330F4FC 		sd	a5,-64(s0)
  49:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
 716              		.loc 1 49 13 is_stmt 1
  49:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
 717              		.loc 1 49 47 is_stmt 0
 718 0254 033704FC 		ld	a4,-64(s0)
 719              	.LVL35:
 720              	.LBB188:
 721              	.LBB189:
  88:src/../h/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
 722              		.loc 3 88 9 is_stmt 1
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 723              		.loc 3 89 9
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 724              		.loc 3 89 12 is_stmt 0
 725 0258 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 725      83B70700 
 726 0260 83B70700 		ld	a5,0(a5)
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 727              		.loc 3 89 9
 728 0264 638E0700 		beqz	a5,.L40
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 729              		.loc 3 89 23
 730 0268 6360F702 		bltu	a4,a5,.L41
 731              	.LVL36:
 732              	.L18:
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 733              		.loc 3 93 52 is_stmt 1
 734 026c 93860700 		mv	a3,a5
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 735              		.loc 3 93 42 is_stmt 0
 736 0270 83B70700 		ld	a5,0(a5)
 737              	.LVL37:
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 738              		.loc 3 93 52
 739 0274 630CF700 		beq	a4,a5,.L17
GAS LISTING /tmp/ccahhE84.s 			page 23


 740 0278 E3EAE7FE 		bgtu	a4,a5,.L18
 741 027c 6F000001 		j	.L17
 742              	.LVL38:
 743              	.L40:
  91:src/../h/../h/../h/MemoryAllocation.hpp ****         }else {
 744              		.loc 3 91 16
 745 0280 93860700 		mv	a3,a5
 746 0284 6F008000 		j	.L17
 747              	.L41:
 748 0288 93060000 		li	a3,0
 749              	.LVL39:
 750              	.L17:
  95:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
 751              		.loc 3 95 17 is_stmt 1
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
 752              		.loc 3 96 17
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
 753              		.loc 3 96 29 is_stmt 0
 754 028c 23300700 		sd	zero,0(a4)
  97:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
 755              		.loc 3 97 17 is_stmt 1
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 756              		.loc 3 98 17
 757              	.LVL40:
 758              	.LBE189:
 759              	.LBE188:
 760              	.LBE187:
 761              	.LBE233:
 762              	.LBE250:
 763              	.LBE263:
 764              	.LBE279:
  69:src/../h/../h/../h/MemoryAllocation.hpp ****     }
 765              		.loc 3 69 9
 766              	.LBB280:
 767              	.LBB264:
 768              	.LBB251:
 769              	.LBB234:
 770              	.LBB202:
 771              	.LBB200:
 772              	.LBB198:
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 773              		.loc 3 98 29 is_stmt 0
 774 0290 93070004 		li	a5,64
 775 0294 2338F700 		sd	a5,16(a4)
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 776              		.loc 3 100 17 is_stmt 1
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 777              		.loc 3 100 29 is_stmt 0
 778 0298 2334D700 		sd	a3,8(a4)
 101:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 779              		.loc 3 101 17 is_stmt 1
 780 029c 63820606 		beqz	a3,.L19
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 781              		.loc 3 102 21
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 782              		.loc 3 102 41 is_stmt 0
 783 02a0 83B70600 		ld	a5,0(a3)
GAS LISTING /tmp/ccahhE84.s 			page 24


 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 784              		.loc 3 102 34
 785 02a4 2330F700 		sd	a5,0(a4)
 786              	.L20:
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 787              		.loc 3 107 17 is_stmt 1
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 788              		.loc 3 107 28 is_stmt 0
 789 02a8 83370700 		ld	a5,0(a4)
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 790              		.loc 3 107 17
 791 02ac 63840700 		beqz	a5,.L21
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 792              		.loc 3 108 21 is_stmt 1
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 793              		.loc 3 108 39 is_stmt 0
 794 02b0 23B4E700 		sd	a4,8(a5)
 795              	.L21:
 110:src/../h/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 796              		.loc 3 110 17 is_stmt 1
 797 02b4 63800606 		beqz	a3,.L22
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 798              		.loc 3 111 21
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 799              		.loc 3 111 31 is_stmt 0
 800 02b8 23B0E600 		sd	a4,0(a3)
 801              	.L23:
 117:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 802              		.loc 3 117 13 is_stmt 1
 803              	.LVL41:
 804              	.LBB190:
 805              	.LBB191:
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
 806              		.loc 3 75 9
 807 02bc 630C0700 		beqz	a4,.L24
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 808              		.loc 3 76 9
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 809              		.loc 3 76 19 is_stmt 0
 810 02c0 83370700 		ld	a5,0(a4)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 811              		.loc 3 76 9
 812 02c4 63880700 		beqz	a5,.L24
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 813              		.loc 3 76 45
 814 02c8 03360701 		ld	a2,16(a4)
 815              	.LVL42:
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 816              		.loc 3 76 38
 817 02cc B305C700 		add	a1,a4,a2
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 818              		.loc 3 76 24
 819 02d0 638AB704 		beq	a5,a1,.L58
 820              	.L24:
 821              	.LVL43:
 822              	.LBE191:
 823              	.LBE190:
GAS LISTING /tmp/ccahhE84.s 			page 25


 118:src/../h/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 824              		.loc 3 118 13 is_stmt 1
 825              	.LBB193:
 826              	.LBB194:
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
 827              		.loc 3 75 9
 828 02d4 638C0600 		beqz	a3,.L25
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 829              		.loc 3 76 9
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 830              		.loc 3 76 19 is_stmt 0
 831 02d8 83B70600 		ld	a5,0(a3)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 832              		.loc 3 76 9
 833 02dc 63880700 		beqz	a5,.L25
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 834              		.loc 3 76 45
 835 02e0 03B60601 		ld	a2,16(a3)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 836              		.loc 3 76 38
 837 02e4 B385C600 		add	a1,a3,a2
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 838              		.loc 3 76 24
 839 02e8 638EB704 		beq	a5,a1,.L59
 840              	.L25:
 841              	.LVL44:
 842              	.LBE194:
 843              	.LBE193:
 120:src/../h/../h/../h/MemoryAllocation.hpp ****                 return -1;
 844              		.loc 3 120 13 is_stmt 1
 845 02ec 630C0706 		beqz	a4,.L60
 122:src/../h/../h/../h/MemoryAllocation.hpp **** 
 846              		.loc 3 122 26 is_stmt 0
 847 02f0 93070000 		li	a5,0
 848              	.L26:
 849              	.LVL45:
 850              	.LBE198:
 851              	.LBE200:
  50:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
 852              		.loc 1 50 13 is_stmt 1
  50:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
 853              		.loc 1 50 60 is_stmt 0
 854              	#APP
 855              	# 50 "src/RiscV.cpp" 1
  51:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
 856              		mv a1, a5
 857              	# 0 "" 2
 858              		.loc 1 51 13 is_stmt 1
  51:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
 859              		.loc 1 51 46 is_stmt 0
 860              	# 51 "src/RiscV.cpp" 1
 861              		sd a1, 88(s0)
 862              	# 0 "" 2
 863              	#NO_APP
 864              	.LBE202:
 865 02fc 6FF0DFF1 		j	.L15
 866              	.LVL46:
GAS LISTING /tmp/ccahhE84.s 			page 26


 867              	.L19:
 868              	.LBB203:
 869              	.LBB201:
 870              	.LBB199:
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 871              		.loc 3 105 21 is_stmt 1
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 872              		.loc 3 105 34 is_stmt 0
 873 0300 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 873      83B70700 
 874 0308 83B70700 		ld	a5,0(a5)
 875 030c 2330F700 		sd	a5,0(a4)
 876 0310 6FF09FF9 		j	.L20
 877              	.L22:
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 878              		.loc 3 114 21 is_stmt 1
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 879              		.loc 3 114 31 is_stmt 0
 880 0314 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 880      83B70700 
 881 031c 23B0E700 		sd	a4,0(a5)
 882 0320 6FF0DFF9 		j	.L23
 883              	.LVL47:
 884              	.L58:
 885              	.LBB196:
 886              	.LBB192:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 887              		.loc 3 78 13 is_stmt 1
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 888              		.loc 3 78 39 is_stmt 0
 889 0324 83B50701 		ld	a1,16(a5)
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 890              		.loc 3 78 24
 891 0328 3306B600 		add	a2,a2,a1
 892 032c 2338C700 		sd	a2,16(a4)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 893              		.loc 3 79 13 is_stmt 1
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 894              		.loc 3 79 38 is_stmt 0
 895 0330 83B70700 		ld	a5,0(a5)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 896              		.loc 3 79 24
 897 0334 2330F700 		sd	a5,0(a4)
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 898              		.loc 3 80 13 is_stmt 1
 899 0338 E38E07F8 		beqz	a5,.L24
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 900              		.loc 3 80 29
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 901              		.loc 3 80 46 is_stmt 0
 902 033c 23B4E700 		sd	a4,8(a5)
 903 0340 6FF05FF9 		j	.L24
 904              	.LVL48:
 905              	.L59:
 906              	.LBE192:
 907              	.LBE196:
 908              	.LBB197:
GAS LISTING /tmp/ccahhE84.s 			page 27


 909              	.LBB195:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 910              		.loc 3 78 13 is_stmt 1
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 911              		.loc 3 78 39 is_stmt 0
 912 0344 83B50701 		ld	a1,16(a5)
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 913              		.loc 3 78 24
 914 0348 3306B600 		add	a2,a2,a1
 915 034c 23B8C600 		sd	a2,16(a3)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 916              		.loc 3 79 13 is_stmt 1
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 917              		.loc 3 79 38 is_stmt 0
 918 0350 83B70700 		ld	a5,0(a5)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 919              		.loc 3 79 24
 920 0354 23B0F600 		sd	a5,0(a3)
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 921              		.loc 3 80 13 is_stmt 1
 922 0358 E38A07F8 		beqz	a5,.L25
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 923              		.loc 3 80 29
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 924              		.loc 3 80 46 is_stmt 0
 925 035c 23B4D700 		sd	a3,8(a5)
 926 0360 6FF0DFF8 		j	.L25
 927              	.LVL49:
 928              	.L60:
 929              	.LBE195:
 930              	.LBE197:
 121:src/../h/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 931              		.loc 3 121 25
 932 0364 9307F0FF 		li	a5,-1
 933 0368 6FF0DFF8 		j	.L26
 934              	.LVL50:
 935              	.L48:
 936              	.LBE199:
 937              	.LBE201:
 938              	.LBE203:
 939              	.LBB204:
 940              	.LBB176:
  53:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg,
 941              		.loc 1 53 13 is_stmt 1
  53:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg,
 942              		.loc 1 53 42 is_stmt 0
 943 036c 033504FD 		ld	a0,-48(s0)
 944 0370 833584FD 		ld	a1,-40(s0)
 945 0374 033684FC 		ld	a2,-56(s0)
 946              	.LVL51:
 947 0378 93061000 		li	a3,1
 948 037c 97000000 		call	_ZN3TCB12createThreadEPFvPvEPPS_S0_b@plt
 948      E7800000 
 949              	.LVL52:
  54:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 950              		.loc 1 54 13 is_stmt 1
  54:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
GAS LISTING /tmp/ccahhE84.s 			page 28


 951              		.loc 1 54 68 is_stmt 0
 952              	#APP
 953              	# 54 "src/RiscV.cpp" 1
  55:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 954              		mv a1, a0
 955              	# 0 "" 2
 956              		.loc 1 55 13 is_stmt 1
  55:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 957              		.loc 1 55 46 is_stmt 0
 958              	# 55 "src/RiscV.cpp" 1
 959              		sd a1, 88(s0)
 960              	# 0 "" 2
 961              	#NO_APP
 962              	.LBE176:
 963 038c 6FF0DFE8 		j	.L15
 964              	.LVL53:
 965              	.L49:
 966              	.LBB177:
  57:src/RiscV.cpp ****             ret_value_thr_exit=TCB::thread_exit();
 967              		.loc 1 57 13 is_stmt 1
 968              	.LBB165:
 969              	.LBB166:
 970              		.file 4 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 8/14/22.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "../h/Scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "../h/MemoryAllocation.hpp"
  10:src/../h/tcb.hpp **** #include "../h/semaphore.hpp"
  11:src/../h/tcb.hpp **** #include "../h/printing.hpp"
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** class TCB {
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp **** public:
  16:src/../h/tcb.hpp ****     void* operator new(uint64 n){//promenjeno uint64 u size_t
  17:src/../h/tcb.hpp ****         return MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(n)); //njemu je samo __m
  18:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  19:src/../h/tcb.hpp ****     }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void* operator new[](uint64 n){
  22:src/../h/tcb.hpp ****         return MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(n));
  23:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  24:src/../h/tcb.hpp ****     }
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept {
  27:src/../h/tcb.hpp ****         MemoryAllocation::mem_free(p);
  28:src/../h/tcb.hpp ****         //__mem_free(p);
  29:src/../h/tcb.hpp ****     }
  30:src/../h/tcb.hpp **** 
  31:src/../h/tcb.hpp ****     void operator delete[] (void *p) noexcept{
  32:src/../h/tcb.hpp ****         MemoryAllocation::mem_free(p);
  33:src/../h/tcb.hpp ****         //__mem_free(p);
  34:src/../h/tcb.hpp ****     }
GAS LISTING /tmp/ccahhE84.s 			page 29


  35:src/../h/tcb.hpp **** 
  36:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  37:src/../h/tcb.hpp **** 
  38:src/../h/tcb.hpp ****     using Body = void (*)(void*); //mislim da mora da se promeni ovaj body sa nekim argumentima, i 
  39:src/../h/tcb.hpp **** 
  40:src/../h/tcb.hpp ****     static int createThread(Body body, TCB** handle, void* arguments, bool started);
  41:src/../h/tcb.hpp **** 
  42:src/../h/tcb.hpp ****     static void thread_dispatch(){dispatch();}
  43:src/../h/tcb.hpp **** 
  44:src/../h/tcb.hpp ****     static int thread_exit(){
  45:src/../h/tcb.hpp ****         running->setFinished(true);
 971              		.loc 4 45 9
 972              		.loc 4 45 29 is_stmt 0
 973 0390 93051000 		li	a1,1
 974 0394 97070000 		la	a5,_ZN3TCB7runningE
 974      83B70700 
 975              	.LVL54:
 976 039c 03B50700 		ld	a0,0(a5)
 977 03a0 97000000 		call	_ZN3TCB11setFinishedEb@plt
 977      E7800000 
 978              	.LVL55:
  46:src/../h/tcb.hpp ****         dispatch();
 979              		.loc 4 46 9 is_stmt 1
 980              		.loc 4 46 17 is_stmt 0
 981 03a8 97000000 		call	_ZN3TCB8dispatchEv@plt
 981      E7800000 
 982              	.LVL56:
  47:src/../h/tcb.hpp ****         //running nullptr->negativna
  48:src/../h/tcb.hpp ****         return 0;
 983              		.loc 4 48 9 is_stmt 1
 984              	.LBE166:
 985              	.LBE165:
  58:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
 986              		.loc 1 58 13
  58:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
 987              		.loc 1 58 91 is_stmt 0
 988 03b0 93070000 		li	a5,0
 989              	#APP
 990              	# 58 "src/RiscV.cpp" 1
  59:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 991              		mv a1, a5
 992              	# 0 "" 2
 993              		.loc 1 59 13 is_stmt 1
  59:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 994              		.loc 1 59 46 is_stmt 0
 995              	# 59 "src/RiscV.cpp" 1
 996              		sd a1, 88(s0)
 997              	# 0 "" 2
 998              	#NO_APP
 999 03bc 6FF0DFE5 		j	.L15
 1000              	.LVL57:
 1001              	.L50:
 1002              	.LBB167:
  61:src/RiscV.cpp ****             TCB::thread_dispatch();
 1003              		.loc 1 61 13 is_stmt 1
 1004              	.LBB155:
 1005              	.LBB156:
GAS LISTING /tmp/ccahhE84.s 			page 30


  42:src/../h/tcb.hpp **** 
 1006              		.loc 4 42 35
  42:src/../h/tcb.hpp **** 
 1007              		.loc 4 42 43 is_stmt 0
 1008 03c0 97000000 		call	_ZN3TCB8dispatchEv@plt
 1008      E7800000 
 1009              	.LVL58:
  42:src/../h/tcb.hpp **** 
 1010              		.loc 4 42 46
 1011 03c8 6FF01FE5 		j	.L15
 1012              	.LVL59:
 1013              	.L51:
 1014              	.LBE156:
 1015              	.LBE155:
 1016              	.LBB157:
 1017              	.LBB147:
  63:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)a4, (thread_t*) handle, (void*)arg, false);
 1018              		.loc 1 63 13 is_stmt 1
  63:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)a4, (thread_t*) handle, (void*)arg, false);
 1019              		.loc 1 63 42 is_stmt 0
 1020 03cc 033584FE 		ld	a0,-24(s0)
 1021 03d0 833584FD 		ld	a1,-40(s0)
 1022 03d4 033684FC 		ld	a2,-56(s0)
 1023              	.LVL60:
 1024 03d8 93060000 		li	a3,0
 1025 03dc 97000000 		call	_ZN3TCB12createThreadEPFvPvEPPS_S0_b@plt
 1025      E7800000 
 1026              	.LVL61:
  64:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 1027              		.loc 1 64 13 is_stmt 1
  64:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 1028              		.loc 1 64 68 is_stmt 0
 1029              	#APP
 1030              	# 64 "src/RiscV.cpp" 1
  65:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1031              		mv a1, a0
 1032              	# 0 "" 2
 1033              		.loc 1 65 13 is_stmt 1
  65:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1034              		.loc 1 65 46 is_stmt 0
 1035              	# 65 "src/RiscV.cpp" 1
 1036              		sd a1, 88(s0)
 1037              	# 0 "" 2
 1038              	#NO_APP
 1039              	.LBE147:
 1040 03ec 6FF0DFE2 		j	.L15
 1041              	.LVL62:
 1042              	.L52:
 1043              	.LBB148:
  67:src/RiscV.cpp ****             TCB::startThread((thread_t*)handle, (TCB::Body)start_routine);
 1044              		.loc 1 67 13 is_stmt 1
  67:src/RiscV.cpp ****             TCB::startThread((thread_t*)handle, (TCB::Body)start_routine);
 1045              		.loc 1 67 29 is_stmt 0
 1046 03f0 033584FD 		ld	a0,-40(s0)
 1047 03f4 833504FD 		ld	a1,-48(s0)
 1048 03f8 97000000 		call	_ZN3TCB11startThreadEPPS_PFvPvE@plt
 1048      E7800000 
GAS LISTING /tmp/ccahhE84.s 			page 31


 1049              	.LVL63:
 1050 0400 6FF09FE1 		j	.L15
 1051              	.LVL64:
 1052              	.L53:
 1053              	.LBB141:
 1054              	.LBB135:
  69:src/RiscV.cpp ****             int retval = semaphore::semOpen((sem_t*)handle, (unsigned)start_routine);
 1055              		.loc 1 69 13 is_stmt 1
  69:src/RiscV.cpp ****             int retval = semaphore::semOpen((sem_t*)handle, (unsigned)start_routine);
 1056              		.loc 1 69 44 is_stmt 0
 1057 0404 033584FD 		ld	a0,-40(s0)
 1058 0408 833504FD 		ld	a1,-48(s0)
 1059 040c 9B850500 		sext.w	a1,a1
 1060 0410 97000000 		call	_ZN9semaphore7semOpenEPPS_j@plt
 1060      E7800000 
 1061              	.LVL65:
  70:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1062              		.loc 1 70 13 is_stmt 1
  70:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1063              		.loc 1 70 67 is_stmt 0
 1064              	#APP
 1065              	# 70 "src/RiscV.cpp" 1
  71:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1066              		mv a1, a0
 1067              	# 0 "" 2
 1068              		.loc 1 71 13 is_stmt 1
  71:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1069              		.loc 1 71 46 is_stmt 0
 1070              	# 71 "src/RiscV.cpp" 1
 1071              		sd a1, 88(s0)
 1072              	# 0 "" 2
 1073              	#NO_APP
 1074              	.LBE135:
 1075 0420 6FF09FDF 		j	.L15
 1076              	.LVL66:
 1077              	.L54:
 1078              	.LBB136:
 1079              	.LBB130:
  73:src/RiscV.cpp ****             int retval = semaphore::semClose((sem_t)handle);
 1080              		.loc 1 73 13 is_stmt 1
  73:src/RiscV.cpp ****             int retval = semaphore::semClose((sem_t)handle);
 1081              		.loc 1 73 45 is_stmt 0
 1082 0424 033584FD 		ld	a0,-40(s0)
 1083 0428 97000000 		call	_ZN9semaphore8semCloseEPS_@plt
 1083      E7800000 
 1084              	.LVL67:
  74:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1085              		.loc 1 74 13 is_stmt 1
  74:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1086              		.loc 1 74 67 is_stmt 0
 1087              	#APP
 1088              	# 74 "src/RiscV.cpp" 1
  75:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1089              		mv a1, a0
 1090              	# 0 "" 2
 1091              		.loc 1 75 13 is_stmt 1
  75:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
GAS LISTING /tmp/ccahhE84.s 			page 32


 1092              		.loc 1 75 46 is_stmt 0
 1093              	# 75 "src/RiscV.cpp" 1
 1094              		sd a1, 88(s0)
 1095              	# 0 "" 2
 1096              	#NO_APP
 1097              	.LBE130:
 1098 0438 6FF01FDE 		j	.L15
 1099              	.LVL68:
 1100              	.L55:
 1101              	.LBB131:
 1102              	.LBB126:
  77:src/RiscV.cpp ****             int retval = semaphore::semWait((sem_t)handle);
 1103              		.loc 1 77 13 is_stmt 1
  77:src/RiscV.cpp ****             int retval = semaphore::semWait((sem_t)handle);
 1104              		.loc 1 77 44 is_stmt 0
 1105 043c 033584FD 		ld	a0,-40(s0)
 1106 0440 97000000 		call	_ZN9semaphore7semWaitEPS_@plt
 1106      E7800000 
 1107              	.LVL69:
  78:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1108              		.loc 1 78 13 is_stmt 1
  78:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1109              		.loc 1 78 67 is_stmt 0
 1110              	#APP
 1111              	# 78 "src/RiscV.cpp" 1
  79:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1112              		mv a1, a0
 1113              	# 0 "" 2
 1114              		.loc 1 79 13 is_stmt 1
  79:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1115              		.loc 1 79 46 is_stmt 0
 1116              	# 79 "src/RiscV.cpp" 1
 1117              		sd a1, 88(s0)
 1118              	# 0 "" 2
 1119              	#NO_APP
 1120              	.LBE126:
 1121 0450 6FF09FDC 		j	.L15
 1122              	.LVL70:
 1123              	.L56:
 1124              	.LBB127:
 1125              	.LBB123:
  81:src/RiscV.cpp ****             int retval = semaphore::semSignal((sem_t)handle);
 1126              		.loc 1 81 13 is_stmt 1
  81:src/RiscV.cpp ****             int retval = semaphore::semSignal((sem_t)handle);
 1127              		.loc 1 81 46 is_stmt 0
 1128 0454 033584FD 		ld	a0,-40(s0)
 1129 0458 97000000 		call	_ZN9semaphore9semSignalEPS_@plt
 1129      E7800000 
 1130              	.LVL71:
  82:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1131              		.loc 1 82 13 is_stmt 1
  82:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1132              		.loc 1 82 67 is_stmt 0
 1133              	#APP
 1134              	# 82 "src/RiscV.cpp" 1
  83:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1135              		mv a1, a0
GAS LISTING /tmp/ccahhE84.s 			page 33


 1136              	# 0 "" 2
 1137              		.loc 1 83 13 is_stmt 1
  83:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1138              		.loc 1 83 46 is_stmt 0
 1139              	# 83 "src/RiscV.cpp" 1
 1140              		sd a1, 88(s0)
 1141              	# 0 "" 2
 1142              	#NO_APP
 1143              	.LBE123:
 1144 0468 6FF01FDB 		j	.L15
 1145              	.LVL72:
 1146              	.L57:
 1147              	.LBB124:
 1148              	.LBB122:
  85:src/RiscV.cpp ****             char retval = __getc();
 1149              		.loc 1 85 13 is_stmt 1
  85:src/RiscV.cpp ****             char retval = __getc();
 1150              		.loc 1 85 33 is_stmt 0
 1151 046c 97000000 		call	__getc@plt
 1151      E7800000 
 1152              	.LVL73:
  86:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1153              		.loc 1 86 13 is_stmt 1
  86:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [retval] "r"(retval) );
 1154              		.loc 1 86 67 is_stmt 0
 1155              	#APP
 1156              	# 86 "src/RiscV.cpp" 1
  87:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1157              		mv a1, a0
 1158              	# 0 "" 2
 1159              		.loc 1 87 13 is_stmt 1
  87:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 1160              		.loc 1 87 46 is_stmt 0
 1161              	# 87 "src/RiscV.cpp" 1
 1162              		sd a1, 88(s0)
 1163              	# 0 "" 2
 1164              	#NO_APP
 1165              	.LBE122:
 1166 047c 6FF0DFD9 		j	.L15
 1167              	.LVL74:
 1168              	.L45:
 1169              	.LBE124:
 1170              	.LBE127:
 1171              	.LBE131:
 1172              	.LBE136:
 1173              	.LBE141:
 1174              	.LBE148:
 1175              	.LBE157:
 1176              	.LBE167:
 1177              	.LBE177:
 1178              	.LBE204:
 1179              	.LBE234:
 1180              	.LBE251:
 1181              	.LBE264:
 108:src/RiscV.cpp ****         mc_sip(SIP_SSIP);
 1182              		.loc 1 108 9 is_stmt 1
 1183              	.LBB265:
GAS LISTING /tmp/ccahhE84.s 			page 34


 1184              	.LBB266:
 134:src/../h/RiscV.hpp **** }
 1185              		.loc 2 134 5
 134:src/../h/RiscV.hpp **** }
 1186              		.loc 2 134 63 is_stmt 0
 1187 0480 93072000 		li	a5,2
 1188              	#APP
 1189              	# 134 "src/../h/RiscV.hpp" 1
 135:src/../h/RiscV.hpp **** 
 1190              		csrc sip, a5
 1191              	# 0 "" 2
 1192              		.loc 2 135 1
 1193              	#NO_APP
 1194 0488 6FF01FDA 		j	.L3
 1195              	.LBE266:
 1196              	.LBE265:
 1197              	.LBE280:
 1198              		.cfi_endproc
 1199              	.LFE49:
 1201              	.Letext0:
 1202              		.file 5 "src/../h/../lib/hw.h"
 1203              		.file 6 "src/../h/../h/semaphore.hpp"
 1204              		.file 7 "src/../h/../h/../h/syscall_c.hpp"
 1205              		.file 8 "src/../lib/console.h"
GAS LISTING /tmp/ccahhE84.s 			page 35


DEFINED SYMBOLS
                            *ABS*:0000000000000000 RiscV.cpp
     /tmp/ccahhE84.s:9      .text:0000000000000000 _ZN5RiscV10popSppSpieEv
     /tmp/ccahhE84.s:13     .text:0000000000000000 .L0 
     /tmp/ccahhE84.s:14     .text:0000000000000000 .L0 
     /tmp/ccahhE84.s:15     .text:0000000000000004 .L0 
     /tmp/ccahhE84.s:17     .text:0000000000000008 .L0 
     /tmp/ccahhE84.s:19     .text:000000000000000c .L0 
     /tmp/ccahhE84.s:21     .text:000000000000000c .L0 
       src/RiscV.cpp:14     .text:000000000000000c .L0 
     /tmp/ccahhE84.s:27     .text:0000000000000010 .L0 
       src/RiscV.cpp:15     .text:0000000000000010 .L0 
     /tmp/ccahhE84.s:33     .text:0000000000000014 .L0 
     /tmp/ccahhE84.s:34     .text:0000000000000018 .L0 
     /tmp/ccahhE84.s:35     .text:0000000000000018 .L0 
     /tmp/ccahhE84.s:37     .text:000000000000001c .L0 
     /tmp/ccahhE84.s:39     .text:0000000000000020 .L0 
     /tmp/ccahhE84.s:45     .text:0000000000000020 _ZN5RiscV20handleSupervisorTrapEv
     /tmp/ccahhE84.s:48     .text:0000000000000020 .L0 
     /tmp/ccahhE84.s:49     .text:0000000000000020 .L0 
     /tmp/ccahhE84.s:50     .text:0000000000000024 .L0 
     /tmp/ccahhE84.s:53     .text:000000000000002c .L0 
     /tmp/ccahhE84.s:54     .text:000000000000002c .L0 
     /tmp/ccahhE84.s:56     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:58     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:59     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:60     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:61     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:62     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:63     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:64     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:65     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:66     .text:0000000000000030 .L0 
       src/RiscV.cpp:28     .text:0000000000000030 .L0 
     /tmp/ccahhE84.s:72     .text:0000000000000034 .L0 
       src/RiscV.cpp:29     .text:0000000000000034 .L0 
     /tmp/ccahhE84.s:77     .text:0000000000000038 .L0 
       src/RiscV.cpp:30     .text:0000000000000038 .L0 
     /tmp/ccahhE84.s:82     .text:000000000000003c .L0 
       src/RiscV.cpp:31     .text:000000000000003c .L0 
     /tmp/ccahhE84.s:87     .text:0000000000000040 .L0 
     /tmp/ccahhE84.s:88     .text:0000000000000040 .L0 
     /tmp/ccahhE84.s:93     .text:0000000000000040 .L0 
     /tmp/ccahhE84.s:94     .text:0000000000000040 .L0 
     /tmp/ccahhE84.s:95     .text:0000000000000040 .L0 
  src/../h/RiscV.hpp:89     .text:0000000000000040 .L0 
     /tmp/ccahhE84.s:103    .text:0000000000000048 .L0 
     /tmp/ccahhE84.s:104    .text:0000000000000048 .L0 
     /tmp/ccahhE84.s:111    .text:000000000000004c .L0 
     /tmp/ccahhE84.s:112    .text:000000000000004c .L0 
     /tmp/ccahhE84.s:113    .text:000000000000004c .L0 
  src/../h/RiscV.hpp:101    .text:000000000000004c .L0 
     /tmp/ccahhE84.s:123    .text:0000000000000050 .L0 
     /tmp/ccahhE84.s:124    .text:0000000000000050 .L0 
     /tmp/ccahhE84.s:126    .text:0000000000000054 .L0 
     /tmp/ccahhE84.s:130    .text:0000000000000058 .L0 
     /tmp/ccahhE84.s:131    .text:0000000000000058 .L0 
GAS LISTING /tmp/ccahhE84.s 			page 36


     /tmp/ccahhE84.s:132    .text:0000000000000058 .L0 
  src/../h/RiscV.hpp:157    .text:0000000000000058 .L0 
     /tmp/ccahhE84.s:142    .text:000000000000005c .L0 
     /tmp/ccahhE84.s:143    .text:000000000000005c .L0 
     /tmp/ccahhE84.s:145    .text:0000000000000060 .L0 
       src/RiscV.cpp:39     .text:0000000000000060 .L0 
     /tmp/ccahhE84.s:154    .text:0000000000000064 .L0 
     /tmp/ccahhE84.s:155    .text:0000000000000064 .L0 
     /tmp/ccahhE84.s:157    .text:0000000000000068 .L0 
     /tmp/ccahhE84.s:160    .text:0000000000000070 .L0 
     /tmp/ccahhE84.s:166    .text:0000000000000080 .L0 
     /tmp/ccahhE84.s:171    .text:0000000000000090 .L0 
     /tmp/ccahhE84.s:172    .text:0000000000000090 .L0 
     /tmp/ccahhE84.s:176    .text:0000000000000098 .L0 
     /tmp/ccahhE84.s:183    .text:000000000000009c .L0 
     /tmp/ccahhE84.s:194    .text:00000000000000a4 .L0 
     /tmp/ccahhE84.s:206    .text:00000000000000ac .L0 
     /tmp/ccahhE84.s:220    .text:00000000000000b4 .L0 
     /tmp/ccahhE84.s:236    .text:00000000000000bc .L0 
     /tmp/ccahhE84.s:254    .text:00000000000000c4 .L0 
     /tmp/ccahhE84.s:274    .text:00000000000000cc .L0 
     /tmp/ccahhE84.s:296    .text:00000000000000d4 .L0 
     /tmp/ccahhE84.s:320    .text:00000000000000dc .L0 
     /tmp/ccahhE84.s:346    .text:00000000000000e4 .L0 
     /tmp/ccahhE84.s:374    .text:00000000000000ec .L0 
     /tmp/ccahhE84.s:404    .text:00000000000000f4 .L0 
     /tmp/ccahhE84.s:407    .text:00000000000000fc .L0 
     /tmp/ccahhE84.s:410    .text:0000000000000104 .L0 
     /tmp/ccahhE84.s:411    .text:0000000000000104 .L0 
     /tmp/ccahhE84.s:431    .text:0000000000000118 .L0 
       src/RiscV.cpp:42     .text:0000000000000118 .L0 
     /tmp/ccahhE84.s:440    .text:0000000000000120 .L0 
     /tmp/ccahhE84.s:441    .text:0000000000000120 .L0 
     /tmp/ccahhE84.s:447    .text:0000000000000124 .L0 
     /tmp/ccahhE84.s:448    .text:0000000000000124 .L0 
     /tmp/ccahhE84.s:451    .text:0000000000000128 .L0 
     /tmp/ccahhE84.s:454    .text:000000000000012c .L0 
     /tmp/ccahhE84.s:461    .text:0000000000000130 .L0 
     /tmp/ccahhE84.s:462    .text:0000000000000130 .L0 
     /tmp/ccahhE84.s:466    .text:0000000000000134 .L0 
     /tmp/ccahhE84.s:467    .text:0000000000000134 .L0 
     /tmp/ccahhE84.s:472    .text:0000000000000140 .L0 
     /tmp/ccahhE84.s:475    .text:0000000000000144 .L0 
     /tmp/ccahhE84.s:476    .text:0000000000000144 .L0 
     /tmp/ccahhE84.s:480    .text:0000000000000154 .L0 
     /tmp/ccahhE84.s:482    .text:0000000000000158 .L0 
     /tmp/ccahhE84.s:483    .text:0000000000000158 .L0 
     /tmp/ccahhE84.s:486    .text:0000000000000160 .L0 
     /tmp/ccahhE84.s:488    .text:0000000000000164 .L0 
     /tmp/ccahhE84.s:489    .text:0000000000000164 .L0 
     /tmp/ccahhE84.s:491    .text:0000000000000168 .L0 
     /tmp/ccahhE84.s:494    .text:000000000000016c .L0 
     /tmp/ccahhE84.s:495    .text:000000000000016c .L0 
     /tmp/ccahhE84.s:497    .text:0000000000000170 .L0 
     /tmp/ccahhE84.s:500    .text:0000000000000178 .L0 
     /tmp/ccahhE84.s:502    .text:000000000000017c .L0 
     /tmp/ccahhE84.s:503    .text:000000000000017c .L0 
GAS LISTING /tmp/ccahhE84.s 			page 37


     /tmp/ccahhE84.s:507    .text:0000000000000180 .L0 
     /tmp/ccahhE84.s:508    .text:0000000000000180 .L0 
     /tmp/ccahhE84.s:510    .text:0000000000000184 .L0 
     /tmp/ccahhE84.s:512    .text:0000000000000188 .L0 
     /tmp/ccahhE84.s:513    .text:0000000000000188 .L0 
     /tmp/ccahhE84.s:515    .text:000000000000018c .L0 
     /tmp/ccahhE84.s:517    .text:0000000000000190 .L0 
     /tmp/ccahhE84.s:518    .text:0000000000000190 .L0 
     /tmp/ccahhE84.s:524    .text:0000000000000194 .L0 
     /tmp/ccahhE84.s:532    .text:000000000000019c .L0 
     /tmp/ccahhE84.s:533    .text:000000000000019c .L0 
     /tmp/ccahhE84.s:541    .text:00000000000001ac .L0 
     /tmp/ccahhE84.s:542    .text:00000000000001ac .L0 
     /tmp/ccahhE84.s:545    .text:00000000000001b0 .L0 
     /tmp/ccahhE84.s:546    .text:00000000000001b0 .L0 
     /tmp/ccahhE84.s:548    .text:00000000000001b4 .L0 
     /tmp/ccahhE84.s:549    .text:00000000000001b4 .L0 
     /tmp/ccahhE84.s:551    .text:00000000000001b8 .L0 
     /tmp/ccahhE84.s:552    .text:00000000000001b8 .L0 
     /tmp/ccahhE84.s:554    .text:00000000000001bc .L0 
     /tmp/ccahhE84.s:556    .text:00000000000001c0 .L0 
     /tmp/ccahhE84.s:557    .text:00000000000001c0 .L0 
     /tmp/ccahhE84.s:560    .text:00000000000001c4 .L0 
     /tmp/ccahhE84.s:561    .text:00000000000001c4 .L0 
     /tmp/ccahhE84.s:563    .text:00000000000001c8 .L0 
     /tmp/ccahhE84.s:565    .text:00000000000001cc .L0 
     /tmp/ccahhE84.s:566    .text:00000000000001cc .L0 
     /tmp/ccahhE84.s:569    .text:00000000000001d0 .L0 
     /tmp/ccahhE84.s:570    .text:00000000000001d0 .L0 
     /tmp/ccahhE84.s:572    .text:00000000000001d4 .L0 
     /tmp/ccahhE84.s:574    .text:00000000000001d8 .L0 
     /tmp/ccahhE84.s:575    .text:00000000000001d8 .L0 
     /tmp/ccahhE84.s:577    .text:00000000000001dc .L0 
     /tmp/ccahhE84.s:579    .text:00000000000001e0 .L0 
     /tmp/ccahhE84.s:580    .text:00000000000001e0 .L0 
     /tmp/ccahhE84.s:583    .text:00000000000001e4 .L0 
     /tmp/ccahhE84.s:586    .text:00000000000001e8 .L0 
     /tmp/ccahhE84.s:588    .text:00000000000001ec .L0 
     /tmp/ccahhE84.s:589    .text:00000000000001ec .L0 
     /tmp/ccahhE84.s:591    .text:00000000000001f0 .L0 
     /tmp/ccahhE84.s:594    .text:00000000000001fc .L0 
     /tmp/ccahhE84.s:595    .text:00000000000001fc .L0 
     /tmp/ccahhE84.s:597    .text:0000000000000200 .L0 
     /tmp/ccahhE84.s:599    .text:0000000000000204 .L0 
     /tmp/ccahhE84.s:600    .text:0000000000000204 .L0 
     /tmp/ccahhE84.s:602    .text:0000000000000208 .L0 
     /tmp/ccahhE84.s:603    .text:0000000000000208 .L0 
     /tmp/ccahhE84.s:605    .text:000000000000020c .L0 
     /tmp/ccahhE84.s:606    .text:000000000000020c .L0 
     /tmp/ccahhE84.s:616    .text:0000000000000210 .L0 
       src/RiscV.cpp:45     .text:0000000000000210 .L0 
     /tmp/ccahhE84.s:622    .text:0000000000000214 .L0 
       src/RiscV.cpp:46     .text:0000000000000214 .L0 
     /tmp/ccahhE84.s:632    .text:0000000000000218 .L0 
     /tmp/ccahhE84.s:633    .text:0000000000000218 .L0 
     /tmp/ccahhE84.s:638    .text:000000000000021c .L0 
  src/../h/RiscV.hpp:162    .text:000000000000021c .L0 
GAS LISTING /tmp/ccahhE84.s 			page 38


     /tmp/ccahhE84.s:648    .text:0000000000000220 .L0 
     /tmp/ccahhE84.s:649    .text:0000000000000220 .L0 
     /tmp/ccahhE84.s:654    .text:0000000000000224 .L0 
  src/../h/RiscV.hpp:106    .text:0000000000000224 .L0 
     /tmp/ccahhE84.s:667    .text:0000000000000228 .L0 
     /tmp/ccahhE84.s:668    .text:000000000000022c .L0 
     /tmp/ccahhE84.s:669    .text:000000000000022c .L0 
     /tmp/ccahhE84.s:671    .text:0000000000000230 .L0 
     /tmp/ccahhE84.s:672    .text:0000000000000230 .L0 
     /tmp/ccahhE84.s:674    .text:0000000000000234 .L0 
     /tmp/ccahhE84.s:678    .text:0000000000000238 .L0 
     /tmp/ccahhE84.s:690    .text:0000000000000238 .L0 
     /tmp/ccahhE84.s:691    .text:0000000000000238 .L0 
     /tmp/ccahhE84.s:693    .text:000000000000023c .L0 
     /tmp/ccahhE84.s:708    .text:000000000000024c .L0 
       src/RiscV.cpp:48     .text:000000000000024c .L0 
     /tmp/ccahhE84.s:717    .text:0000000000000254 .L0 
     /tmp/ccahhE84.s:718    .text:0000000000000254 .L0 
     /tmp/ccahhE84.s:723    .text:0000000000000258 .L0 
     /tmp/ccahhE84.s:724    .text:0000000000000258 .L0 
     /tmp/ccahhE84.s:725    .text:0000000000000258 .L0 
     /tmp/ccahhE84.s:728    .text:0000000000000264 .L0 
     /tmp/ccahhE84.s:730    .text:0000000000000268 .L0 
     /tmp/ccahhE84.s:734    .text:000000000000026c .L0 
     /tmp/ccahhE84.s:736    .text:0000000000000270 .L0 
     /tmp/ccahhE84.s:739    .text:0000000000000274 .L0 
     /tmp/ccahhE84.s:745    .text:0000000000000280 .L0 
     /tmp/ccahhE84.s:752    .text:000000000000028c .L0 
     /tmp/ccahhE84.s:753    .text:000000000000028c .L0 
     /tmp/ccahhE84.s:754    .text:000000000000028c .L0 
     /tmp/ccahhE84.s:756    .text:0000000000000290 .L0 
     /tmp/ccahhE84.s:765    .text:0000000000000290 .L0 
     /tmp/ccahhE84.s:773    .text:0000000000000290 .L0 
     /tmp/ccahhE84.s:774    .text:0000000000000290 .L0 
     /tmp/ccahhE84.s:777    .text:0000000000000298 .L0 
     /tmp/ccahhE84.s:778    .text:0000000000000298 .L0 
     /tmp/ccahhE84.s:780    .text:000000000000029c .L0 
     /tmp/ccahhE84.s:782    .text:00000000000002a0 .L0 
     /tmp/ccahhE84.s:783    .text:00000000000002a0 .L0 
     /tmp/ccahhE84.s:785    .text:00000000000002a4 .L0 
     /tmp/ccahhE84.s:788    .text:00000000000002a8 .L0 
     /tmp/ccahhE84.s:789    .text:00000000000002a8 .L0 
     /tmp/ccahhE84.s:791    .text:00000000000002ac .L0 
     /tmp/ccahhE84.s:793    .text:00000000000002b0 .L0 
     /tmp/ccahhE84.s:794    .text:00000000000002b0 .L0 
     /tmp/ccahhE84.s:797    .text:00000000000002b4 .L0 
     /tmp/ccahhE84.s:799    .text:00000000000002b8 .L0 
     /tmp/ccahhE84.s:800    .text:00000000000002b8 .L0 
     /tmp/ccahhE84.s:806    .text:00000000000002bc .L0 
     /tmp/ccahhE84.s:807    .text:00000000000002bc .L0 
     /tmp/ccahhE84.s:809    .text:00000000000002c0 .L0 
     /tmp/ccahhE84.s:810    .text:00000000000002c0 .L0 
     /tmp/ccahhE84.s:812    .text:00000000000002c4 .L0 
     /tmp/ccahhE84.s:814    .text:00000000000002c8 .L0 
     /tmp/ccahhE84.s:817    .text:00000000000002cc .L0 
     /tmp/ccahhE84.s:819    .text:00000000000002d0 .L0 
     /tmp/ccahhE84.s:827    .text:00000000000002d4 .L0 
GAS LISTING /tmp/ccahhE84.s 			page 39


     /tmp/ccahhE84.s:828    .text:00000000000002d4 .L0 
     /tmp/ccahhE84.s:830    .text:00000000000002d8 .L0 
     /tmp/ccahhE84.s:831    .text:00000000000002d8 .L0 
     /tmp/ccahhE84.s:833    .text:00000000000002dc .L0 
     /tmp/ccahhE84.s:835    .text:00000000000002e0 .L0 
     /tmp/ccahhE84.s:837    .text:00000000000002e4 .L0 
     /tmp/ccahhE84.s:839    .text:00000000000002e8 .L0 
     /tmp/ccahhE84.s:845    .text:00000000000002ec .L0 
     /tmp/ccahhE84.s:847    .text:00000000000002f0 .L0 
     /tmp/ccahhE84.s:853    .text:00000000000002f4 .L0 
       src/RiscV.cpp:50     .text:00000000000002f4 .L0 
     /tmp/ccahhE84.s:859    .text:00000000000002f8 .L0 
       src/RiscV.cpp:51     .text:00000000000002f8 .L0 
     /tmp/ccahhE84.s:872    .text:0000000000000300 .L0 
     /tmp/ccahhE84.s:873    .text:0000000000000300 .L0 
     /tmp/ccahhE84.s:879    .text:0000000000000314 .L0 
     /tmp/ccahhE84.s:880    .text:0000000000000314 .L0 
     /tmp/ccahhE84.s:888    .text:0000000000000324 .L0 
     /tmp/ccahhE84.s:889    .text:0000000000000324 .L0 
     /tmp/ccahhE84.s:891    .text:0000000000000328 .L0 
     /tmp/ccahhE84.s:894    .text:0000000000000330 .L0 
     /tmp/ccahhE84.s:895    .text:0000000000000330 .L0 
     /tmp/ccahhE84.s:897    .text:0000000000000334 .L0 
     /tmp/ccahhE84.s:899    .text:0000000000000338 .L0 
     /tmp/ccahhE84.s:901    .text:000000000000033c .L0 
     /tmp/ccahhE84.s:902    .text:000000000000033c .L0 
     /tmp/ccahhE84.s:911    .text:0000000000000344 .L0 
     /tmp/ccahhE84.s:912    .text:0000000000000344 .L0 
     /tmp/ccahhE84.s:914    .text:0000000000000348 .L0 
     /tmp/ccahhE84.s:917    .text:0000000000000350 .L0 
     /tmp/ccahhE84.s:918    .text:0000000000000350 .L0 
     /tmp/ccahhE84.s:920    .text:0000000000000354 .L0 
     /tmp/ccahhE84.s:922    .text:0000000000000358 .L0 
     /tmp/ccahhE84.s:924    .text:000000000000035c .L0 
     /tmp/ccahhE84.s:925    .text:000000000000035c .L0 
     /tmp/ccahhE84.s:932    .text:0000000000000364 .L0 
     /tmp/ccahhE84.s:942    .text:000000000000036c .L0 
     /tmp/ccahhE84.s:943    .text:000000000000036c .L0 
     /tmp/ccahhE84.s:951    .text:0000000000000384 .L0 
       src/RiscV.cpp:54     .text:0000000000000384 .L0 
     /tmp/ccahhE84.s:957    .text:0000000000000388 .L0 
       src/RiscV.cpp:55     .text:0000000000000388 .L0 
     /tmp/ccahhE84.s:971    .text:0000000000000390 .L0 
     /tmp/ccahhE84.s:972    .text:0000000000000390 .L0 
     /tmp/ccahhE84.s:973    .text:0000000000000390 .L0 
     /tmp/ccahhE84.s:980    .text:00000000000003a8 .L0 
     /tmp/ccahhE84.s:981    .text:00000000000003a8 .L0 
     /tmp/ccahhE84.s:986    .text:00000000000003b0 .L0 
     /tmp/ccahhE84.s:987    .text:00000000000003b0 .L0 
     /tmp/ccahhE84.s:988    .text:00000000000003b0 .L0 
     /tmp/ccahhE84.s:994    .text:00000000000003b8 .L0 
       src/RiscV.cpp:59     .text:00000000000003b8 .L0 
     /tmp/ccahhE84.s:1006   .text:00000000000003c0 .L0 
     /tmp/ccahhE84.s:1007   .text:00000000000003c0 .L0 
     /tmp/ccahhE84.s:1008   .text:00000000000003c0 .L0 
     /tmp/ccahhE84.s:1011   .text:00000000000003c8 .L0 
     /tmp/ccahhE84.s:1019   .text:00000000000003cc .L0 
GAS LISTING /tmp/ccahhE84.s 			page 40


     /tmp/ccahhE84.s:1020   .text:00000000000003cc .L0 
     /tmp/ccahhE84.s:1028   .text:00000000000003e4 .L0 
       src/RiscV.cpp:64     .text:00000000000003e4 .L0 
     /tmp/ccahhE84.s:1034   .text:00000000000003e8 .L0 
       src/RiscV.cpp:65     .text:00000000000003e8 .L0 
     /tmp/ccahhE84.s:1045   .text:00000000000003f0 .L0 
     /tmp/ccahhE84.s:1046   .text:00000000000003f0 .L0 
     /tmp/ccahhE84.s:1056   .text:0000000000000404 .L0 
     /tmp/ccahhE84.s:1057   .text:0000000000000404 .L0 
     /tmp/ccahhE84.s:1063   .text:0000000000000418 .L0 
       src/RiscV.cpp:70     .text:0000000000000418 .L0 
     /tmp/ccahhE84.s:1069   .text:000000000000041c .L0 
       src/RiscV.cpp:71     .text:000000000000041c .L0 
     /tmp/ccahhE84.s:1081   .text:0000000000000424 .L0 
     /tmp/ccahhE84.s:1082   .text:0000000000000424 .L0 
     /tmp/ccahhE84.s:1086   .text:0000000000000430 .L0 
       src/RiscV.cpp:74     .text:0000000000000430 .L0 
     /tmp/ccahhE84.s:1092   .text:0000000000000434 .L0 
       src/RiscV.cpp:75     .text:0000000000000434 .L0 
     /tmp/ccahhE84.s:1104   .text:000000000000043c .L0 
     /tmp/ccahhE84.s:1105   .text:000000000000043c .L0 
     /tmp/ccahhE84.s:1109   .text:0000000000000448 .L0 
       src/RiscV.cpp:78     .text:0000000000000448 .L0 
     /tmp/ccahhE84.s:1115   .text:000000000000044c .L0 
       src/RiscV.cpp:79     .text:000000000000044c .L0 
     /tmp/ccahhE84.s:1127   .text:0000000000000454 .L0 
     /tmp/ccahhE84.s:1128   .text:0000000000000454 .L0 
     /tmp/ccahhE84.s:1132   .text:0000000000000460 .L0 
       src/RiscV.cpp:82     .text:0000000000000460 .L0 
     /tmp/ccahhE84.s:1138   .text:0000000000000464 .L0 
       src/RiscV.cpp:83     .text:0000000000000464 .L0 
     /tmp/ccahhE84.s:1150   .text:000000000000046c .L0 
     /tmp/ccahhE84.s:1151   .text:000000000000046c .L0 
     /tmp/ccahhE84.s:1154   .text:0000000000000474 .L0 
       src/RiscV.cpp:86     .text:0000000000000474 .L0 
     /tmp/ccahhE84.s:1160   .text:0000000000000478 .L0 
       src/RiscV.cpp:87     .text:0000000000000478 .L0 
     /tmp/ccahhE84.s:1185   .text:0000000000000480 .L0 
     /tmp/ccahhE84.s:1186   .text:0000000000000480 .L0 
     /tmp/ccahhE84.s:1187   .text:0000000000000480 .L0 
     /tmp/ccahhE84.s:1194   .text:0000000000000488 .L0 
     /tmp/ccahhE84.s:1198   .text:000000000000048c .L0 
     /tmp/ccahhE84.s:1206   .text:000000000000048c .L0 
     /tmp/ccahhE84.s:467    .text:0000000000000134 .L0 
     /tmp/ccahhE84.s:476    .text:0000000000000144 .L0 
     /tmp/ccahhE84.s:533    .text:000000000000019c .L0 
     /tmp/ccahhE84.s:591    .text:00000000000001f0 .L0 
     /tmp/ccahhE84.s:693    .text:000000000000023c .L0 
     /tmp/ccahhE84.s:725    .text:0000000000000258 .L0 
     /tmp/ccahhE84.s:873    .text:0000000000000300 .L0 
     /tmp/ccahhE84.s:880    .text:0000000000000314 .L0 
     /tmp/ccahhE84.s:974    .text:0000000000000394 .L0 
     /tmp/ccahhE84.s:178    .text:000000000000009c .L44
     /tmp/ccahhE84.s:1168   .text:0000000000000480 .L45
     /tmp/ccahhE84.s:661    .text:0000000000000228 .L3
     /tmp/ccahhE84.s:417    .text:0000000000000118 .L46
     /tmp/ccahhE84.s:697    .text:000000000000024c .L47
GAS LISTING /tmp/ccahhE84.s 			page 41


     /tmp/ccahhE84.s:935    .text:000000000000036c .L48
     /tmp/ccahhE84.s:965    .text:0000000000000390 .L49
     /tmp/ccahhE84.s:1001   .text:00000000000003c0 .L50
     /tmp/ccahhE84.s:1013   .text:00000000000003cc .L51
     /tmp/ccahhE84.s:1042   .text:00000000000003f0 .L52
     /tmp/ccahhE84.s:1052   .text:0000000000000404 .L53
     /tmp/ccahhE84.s:1077   .text:0000000000000424 .L54
     /tmp/ccahhE84.s:1100   .text:000000000000043c .L55
     /tmp/ccahhE84.s:1123   .text:0000000000000454 .L56
     /tmp/ccahhE84.s:1146   .text:000000000000046c .L57
     /tmp/ccahhE84.s:628    .text:0000000000000218 .L15
     /tmp/ccahhE84.s:608    .text:0000000000000210 .L6
     /tmp/ccahhE84.s:520    .text:0000000000000194 .L39
     /tmp/ccahhE84.s:538    .text:00000000000001ac .L8
     /tmp/ccahhE84.s:528    .text:000000000000019c .L9
     /tmp/ccahhE84.s:470    .text:0000000000000140 .L7
     /tmp/ccahhE84.s:505    .text:0000000000000180 .L10
     /tmp/ccahhE84.s:677    .text:0000000000000238 .L12
     /tmp/ccahhE84.s:567    .text:00000000000001d0 .L14
     /tmp/ccahhE84.s:558    .text:00000000000001c4 .L13
     /tmp/ccahhE84.s:743    .text:0000000000000280 .L40
     /tmp/ccahhE84.s:747    .text:0000000000000288 .L41
     /tmp/ccahhE84.s:750    .text:000000000000028c .L17
     /tmp/ccahhE84.s:732    .text:000000000000026c .L18
     /tmp/ccahhE84.s:867    .text:0000000000000300 .L19
     /tmp/ccahhE84.s:795    .text:00000000000002b4 .L21
     /tmp/ccahhE84.s:877    .text:0000000000000314 .L22
     /tmp/ccahhE84.s:820    .text:00000000000002d4 .L24
     /tmp/ccahhE84.s:884    .text:0000000000000324 .L58
     /tmp/ccahhE84.s:840    .text:00000000000002ec .L25
     /tmp/ccahhE84.s:905    .text:0000000000000344 .L59
     /tmp/ccahhE84.s:928    .text:0000000000000364 .L60
     /tmp/ccahhE84.s:786    .text:00000000000002a8 .L20
     /tmp/ccahhE84.s:801    .text:00000000000002bc .L23
     /tmp/ccahhE84.s:848    .text:00000000000002f4 .L26
     /tmp/ccahhE84.s:2861   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccahhE84.s:4652   .debug_str:00000000000008bf .LASF170
     /tmp/ccahhE84.s:4368   .debug_str:0000000000000051 .LASF171
     /tmp/ccahhE84.s:4446   .debug_str:00000000000002ad .LASF172
     /tmp/ccahhE84.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccahhE84.s:1201   .text:000000000000048c .Letext0
     /tmp/ccahhE84.s:4356   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccahhE84.s:4470   .debug_str:0000000000000350 .LASF0
     /tmp/ccahhE84.s:4494   .debug_str:000000000000040b .LASF1
     /tmp/ccahhE84.s:4596   .debug_str:0000000000000752 .LASF2
     /tmp/ccahhE84.s:4604   .debug_str:000000000000079b .LASF4
     /tmp/ccahhE84.s:4478   .debug_str:000000000000037a .LASF3
     /tmp/ccahhE84.s:4456   .debug_str:0000000000000310 .LASF5
     /tmp/ccahhE84.s:4570   .debug_str:00000000000006ae .LASF6
     /tmp/ccahhE84.s:4484   .debug_str:000000000000039c .LASF7
     /tmp/ccahhE84.s:4444   .debug_str:000000000000029d .LASF8
     /tmp/ccahhE84.s:4452   .debug_str:00000000000002e7 .LASF9
     /tmp/ccahhE84.s:4388   .debug_str:00000000000000e6 .LASF10
     /tmp/ccahhE84.s:4436   .debug_str:000000000000025b .LASF11
     /tmp/ccahhE84.s:4402   .debug_str:0000000000000149 .LASF12
     /tmp/ccahhE84.s:4386   .debug_str:00000000000000d6 .LASF13
     /tmp/ccahhE84.s:4634   .debug_str:0000000000000855 .LASF14
GAS LISTING /tmp/ccahhE84.s 			page 42


     /tmp/ccahhE84.s:4426   .debug_str:0000000000000208 .LASF15
     /tmp/ccahhE84.s:4626   .debug_str:0000000000000824 .LASF16
     /tmp/ccahhE84.s:4668   .debug_str:0000000000000a00 .LASF60
     /tmp/ccahhE84.s:4582   .debug_str:0000000000000709 .LASF173
     /tmp/ccahhE84.s:4500   .debug_str:0000000000000436 .LASF17
     /tmp/ccahhE84.s:4430   .debug_str:0000000000000234 .LASF18
     /tmp/ccahhE84.s:4694   .debug_str:0000000000000a9e .LASF19
     /tmp/ccahhE84.s:4460   .debug_str:0000000000000324 .LASF20
     /tmp/ccahhE84.s:4530   .debug_str:0000000000000544 .LASF22
     /tmp/ccahhE84.s:4612   .debug_str:00000000000007ce .LASF21
     /tmp/ccahhE84.s:4454   .debug_str:00000000000002f5 .LASF23
     /tmp/ccahhE84.s:4472   .debug_str:000000000000035d .LASF24
     /tmp/ccahhE84.s:4532   .debug_str:000000000000055c .LASF25
     /tmp/ccahhE84.s:4672   .debug_str:0000000000000a22 .LASF26
     /tmp/ccahhE84.s:4700   .debug_str:0000000000000ab8 .LASF28
     /tmp/ccahhE84.s:4592   .debug_str:000000000000073e .LASF30
     /tmp/ccahhE84.s:4702   .debug_str:0000000000000acd .LASF32
     /tmp/ccahhE84.s:4578   .debug_str:00000000000006ef .LASF27
     /tmp/ccahhE84.s:4492   .debug_str:00000000000003f8 .LASF29
     /tmp/ccahhE84.s:4542   .debug_str:00000000000005bc .LASF31
     /tmp/ccahhE84.s:4406   .debug_str:000000000000017b .LASF33
     /tmp/ccahhE84.s:4690   .debug_str:0000000000000a8a .LASF34
     /tmp/ccahhE84.s:4516   .debug_str:00000000000004c6 .LASF35
     /tmp/ccahhE84.s:4538   .debug_str:00000000000005aa .LASF36
     /tmp/ccahhE84.s:4412   .debug_str:00000000000001a1 .LASF37
     /tmp/ccahhE84.s:4510   .debug_str:000000000000049e .LASF38
     /tmp/ccahhE84.s:4440   .debug_str:000000000000027d .LASF39
     /tmp/ccahhE84.s:4714   .debug_str:0000000000000b33 .LASF40
     /tmp/ccahhE84.s:4712   .debug_str:0000000000000b1f .LASF41
     /tmp/ccahhE84.s:4630   .debug_str:0000000000000841 .LASF42
     /tmp/ccahhE84.s:4400   .debug_str:0000000000000136 .LASF43
     /tmp/ccahhE84.s:4608   .debug_str:00000000000007a7 .LASF44
     /tmp/ccahhE84.s:4580   .debug_str:00000000000006f6 .LASF45
     /tmp/ccahhE84.s:4420   .debug_str:00000000000001de .LASF46
     /tmp/ccahhE84.s:4562   .debug_str:0000000000000682 .LASF47
     /tmp/ccahhE84.s:4474   .debug_str:000000000000036a .LASF48
     /tmp/ccahhE84.s:4498   .debug_str:0000000000000424 .LASF49
     /tmp/ccahhE84.s:4370   .debug_str:000000000000005f .LASF50
     /tmp/ccahhE84.s:4662   .debug_str:00000000000009be .LASF51
     /tmp/ccahhE84.s:4594   .debug_str:0000000000000747 .LASF52
     /tmp/ccahhE84.s:4392   .debug_str:00000000000000fa .LASF53
     /tmp/ccahhE84.s:4684   .debug_str:0000000000000a69 .LASF54
     /tmp/ccahhE84.s:4490   .debug_str:00000000000003e2 .LASF55
     /tmp/ccahhE84.s:4682   .debug_str:0000000000000a5f .LASF56
     /tmp/ccahhE84.s:4428   .debug_str:000000000000021e .LASF57
     /tmp/ccahhE84.s:4688   .debug_str:0000000000000a7b .LASF58
     /tmp/ccahhE84.s:4670   .debug_str:0000000000000a06 .LASF59
     /tmp/ccahhE84.s:4572   .debug_str:00000000000006c1 .LASF126
     /tmp/ccahhE84.s:4404   .debug_str:0000000000000159 .LASF128
     /tmp/ccahhE84.s:4504   .debug_str:0000000000000458 .LASF61
     /tmp/ccahhE84.s:4648   .debug_str:00000000000008af .LASF84
     /tmp/ccahhE84.s:4390   .debug_str:00000000000000f5 .LASF62
     /tmp/ccahhE84.s:4372   .debug_str:000000000000006a .LASF63
     /tmp/ccahhE84.s:4408   .debug_str:000000000000018e .LASF64
     /tmp/ccahhE84.s:4622   .debug_str:0000000000000807 .LASF65
     /tmp/ccahhE84.s:4396   .debug_str:0000000000000125 .LASF66
     /tmp/ccahhE84.s:4488   .debug_str:00000000000003dd .LASF67
GAS LISTING /tmp/ccahhE84.s 			page 43


     /tmp/ccahhE84.s:4528   .debug_str:000000000000052a .LASF68
     /tmp/ccahhE84.s:4598   .debug_str:0000000000000760 .LASF69
     /tmp/ccahhE84.s:4600   .debug_str:000000000000077d .LASF70
     /tmp/ccahhE84.s:4536   .debug_str:000000000000058d .LASF71
     /tmp/ccahhE84.s:4692   .debug_str:0000000000000a92 .LASF72
     /tmp/ccahhE84.s:4524   .debug_str:00000000000004fb .LASF73
     /tmp/ccahhE84.s:4708   .debug_str:0000000000000b0a .LASF104
     /tmp/ccahhE84.s:4642   .debug_str:000000000000087e .LASF106
     /tmp/ccahhE84.s:4522   .debug_str:00000000000004f3 .LASF74
     /tmp/ccahhE84.s:4552   .debug_str:0000000000000617 .LASF76
     /tmp/ccahhE84.s:4424   .debug_str:00000000000001fa .LASF75
     /tmp/ccahhE84.s:4558   .debug_str:0000000000000656 .LASF77
     /tmp/ccahhE84.s:4476   .debug_str:0000000000000370 .LASF78
     /tmp/ccahhE84.s:4486   .debug_str:00000000000003af .LASF79
     /tmp/ccahhE84.s:4638   .debug_str:000000000000086a .LASF80
     /tmp/ccahhE84.s:4704   .debug_str:0000000000000ae2 .LASF81
     /tmp/ccahhE84.s:4526   .debug_str:0000000000000520 .LASF82
     /tmp/ccahhE84.s:4666   .debug_str:00000000000009de .LASF83
     /tmp/ccahhE84.s:4548   .debug_str:00000000000005e2 .LASF174
     /tmp/ccahhE84.s:4544   .debug_str:00000000000005c3 .LASF85
     /tmp/ccahhE84.s:4710   .debug_str:0000000000000b12 .LASF86
     /tmp/ccahhE84.s:4450   .debug_str:00000000000002db .LASF87
     /tmp/ccahhE84.s:4380   .debug_str:0000000000000093 .LASF88
     /tmp/ccahhE84.s:4442   .debug_str:0000000000000291 .LASF89
     /tmp/ccahhE84.s:4360   .debug_str:0000000000000005 .LASF90
     /tmp/ccahhE84.s:4620   .debug_str:00000000000007fa .LASF91
     /tmp/ccahhE84.s:4624   .debug_str:0000000000000811 .LASF92
     /tmp/ccahhE84.s:4458   .debug_str:0000000000000317 .LASF93
     /tmp/ccahhE84.s:4606   .debug_str:00000000000007a2 .LASF94
     /tmp/ccahhE84.s:4366   .debug_str:0000000000000045 .LASF95
     /tmp/ccahhE84.s:4632   .debug_str:0000000000000848 .LASF96
     /tmp/ccahhE84.s:4550   .debug_str:00000000000005f2 .LASF97
     /tmp/ccahhE84.s:4560   .debug_str:000000000000067d .LASF175
     /tmp/ccahhE84.s:4586   .debug_str:000000000000071f .LASF98
     /tmp/ccahhE84.s:4508   .debug_str:0000000000000483 .LASF99
     /tmp/ccahhE84.s:4520   .debug_str:00000000000004e7 .LASF100
     /tmp/ccahhE84.s:4434   .debug_str:0000000000000244 .LASF101
     /tmp/ccahhE84.s:4584   .debug_str:0000000000000714 .LASF102
     /tmp/ccahhE84.s:4512   .debug_str:00000000000004a6 .LASF103
     /tmp/ccahhE84.s:4540   .debug_str:00000000000005b2 .LASF105
     /tmp/ccahhE84.s:4602   .debug_str:0000000000000787 .LASF107
     /tmp/ccahhE84.s:4646   .debug_str:00000000000008a3 .LASF108
     /tmp/ccahhE84.s:4610   .debug_str:00000000000007ae .LASF109
     /tmp/ccahhE84.s:4640   .debug_str:0000000000000873 .LASF110
     /tmp/ccahhE84.s:4534   .debug_str:0000000000000576 .LASF111
     /tmp/ccahhE84.s:4374   .debug_str:000000000000006f .LASF112
     /tmp/ccahhE84.s:4556   .debug_str:000000000000063f .LASF113
     /tmp/ccahhE84.s:4496   .debug_str:000000000000041e .LASF114
     /tmp/ccahhE84.s:4656   .debug_str:0000000000000988 .LASF115
     /tmp/ccahhE84.s:4518   .debug_str:00000000000004da .LASF116
     /tmp/ccahhE84.s:4382   .debug_str:00000000000000a3 .LASF117
     /tmp/ccahhE84.s:4650   .debug_str:00000000000008b7 .LASF176
     /tmp/ccahhE84.s:4358   .debug_str:0000000000000000 .LASF118
     /tmp/ccahhE84.s:4706   .debug_str:0000000000000b04 .LASF119
     /tmp/ccahhE84.s:4664   .debug_str:00000000000009d6 .LASF120
     /tmp/ccahhE84.s:4636   .debug_str:0000000000000861 .LASF121
     /tmp/ccahhE84.s:4566   .debug_str:000000000000069c .LASF122
GAS LISTING /tmp/ccahhE84.s 			page 44


     /tmp/ccahhE84.s:4574   .debug_str:00000000000006d6 .LASF123
     /tmp/ccahhE84.s:4658   .debug_str:0000000000000998 .LASF124
     /tmp/ccahhE84.s:4462   .debug_str:000000000000032f .LASF125
     /tmp/ccahhE84.s:4378   .debug_str:0000000000000085 .LASF127
     /tmp/ccahhE84.s:4502   .debug_str:000000000000043f .LASF129
     /tmp/ccahhE84.s:4410   .debug_str:0000000000000193 .LASF177
     /tmp/ccahhE84.s:4364   .debug_str:000000000000001d .LASF178
     /tmp/ccahhE84.s:4418   .debug_str:00000000000001d5 .LASF130
     /tmp/ccahhE84.s:4394   .debug_str:0000000000000112 .LASF131
     /tmp/ccahhE84.s:4614   .debug_str:00000000000007dc .LASF132
     /tmp/ccahhE84.s:4696   .debug_str:0000000000000aa7 .LASF179
     /tmp/ccahhE84.s:4588   .debug_str:000000000000072f .LASF133
     /tmp/ccahhE84.s:4590   .debug_str:0000000000000734 .LASF134
     /tmp/ccahhE84.s:4464   .debug_str:000000000000033d .LASF135
     /tmp/ccahhE84.s:4546   .debug_str:00000000000005cb .LASF136
     /tmp/ccahhE84.s:4416   .debug_str:00000000000001cd .LASF137
     /tmp/ccahhE84.s:4676   .debug_str:0000000000000a35 .LASF138
     /tmp/ccahhE84.s:4480   .debug_str:000000000000038c .LASF139
     /tmp/ccahhE84.s:4384   .debug_str:00000000000000bb .LASF140
     /tmp/ccahhE84.s:4564   .debug_str:0000000000000694 .LASF141
     /tmp/ccahhE84.s:4506   .debug_str:0000000000000469 .LASF142
     /tmp/ccahhE84.s:4376   .debug_str:000000000000007b .LASF143
     /tmp/ccahhE84.s:4660   .debug_str:00000000000009a2 .LASF144
     /tmp/ccahhE84.s:4468   .debug_str:000000000000034a .LASF145
     /tmp/ccahhE84.s:4422   .debug_str:00000000000001e4 .LASF146
     /tmp/ccahhE84.s:4362   .debug_str:0000000000000015 .LASF147
     /tmp/ccahhE84.s:4414   .debug_str:00000000000001b5 .LASF148
     /tmp/ccahhE84.s:4554   .debug_str:0000000000000637 .LASF149
     /tmp/ccahhE84.s:46     .text:0000000000000020 .LFB49
     /tmp/ccahhE84.s:1199   .text:000000000000048c .LFE49
     /tmp/ccahhE84.s:4680   .debug_str:0000000000000a56 .LASF150
     /tmp/ccahhE84.s:4698   .debug_str:0000000000000ab2 .LASF151
     /tmp/ccahhE84.s:4716   .debug_str:0000000000000b3b .LASF152
     /tmp/ccahhE84.s:4576   .debug_str:00000000000006e1 .LASF153
     /tmp/ccahhE84.s:4674   .debug_str:0000000000000a2b .LASF154
     /tmp/ccahhE84.s:3919   .debug_loc:0000000000000000 .LLST0
     /tmp/ccahhE84.s:4438   .debug_str:000000000000026a .LASF155
     /tmp/ccahhE84.s:3978   .debug_loc:000000000000011a .LLST1
     /tmp/ccahhE84.s:4628   .debug_str:000000000000083a .LASF156
     /tmp/ccahhE84.s:3986   .debug_loc:000000000000013e .LLST2
     /tmp/ccahhE84.s:4654   .debug_str:0000000000000983 .LASF157
     /tmp/ccahhE84.s:4686   .debug_str:0000000000000a73 .LASF158
     /tmp/ccahhE84.s:4302   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccahhE84.s:4568   .debug_str:00000000000006a6 .LASF159
     /tmp/ccahhE84.s:4085   .debug_loc:00000000000002ad .LLST16
     /tmp/ccahhE84.s:443    .text:0000000000000124 .LBB216
     /tmp/ccahhE84.s:457    .text:0000000000000130 .LBE216
     /tmp/ccahhE84.s:4092   .debug_loc:00000000000002d0 .LLST17
     /tmp/ccahhE84.s:458    .text:0000000000000130 .LBB218
     /tmp/ccahhE84.s:4105   .debug_loc:0000000000000309 .LLST18
     /tmp/ccahhE84.s:4124   .debug_loc:0000000000000365 .LLST19
     /tmp/ccahhE84.s:4139   .debug_loc:00000000000003ae .LLST20
     /tmp/ccahhE84.s:4150   .debug_loc:00000000000003e4 .LLST10
     /tmp/ccahhE84.s:720    .text:0000000000000258 .LBB188
     /tmp/ccahhE84.s:4157   .debug_loc:0000000000000407 .LLST11
     /tmp/ccahhE84.s:4168   .debug_loc:000000000000043d .LLST12
     /tmp/ccahhE84.s:4197   .debug_loc:00000000000004c1 .LLST13
GAS LISTING /tmp/ccahhE84.s 			page 45


     /tmp/ccahhE84.s:804    .text:00000000000002bc .LBB190
     /tmp/ccahhE84.s:4204   .debug_loc:00000000000004e4 .LLST14
     /tmp/ccahhE84.s:825    .text:00000000000002d4 .LBB193
     /tmp/ccahhE84.s:4215   .debug_loc:000000000000051a .LLST15
     /tmp/ccahhE84.s:940    .text:000000000000036c .LBB176
     /tmp/ccahhE84.s:962    .text:000000000000038c .LBE176
     /tmp/ccahhE84.s:4616   .debug_str:00000000000007ed .LASF160
     /tmp/ccahhE84.s:4226   .debug_loc:0000000000000550 .LLST9
     /tmp/ccahhE84.s:949    .text:0000000000000384 .LVL52
     /tmp/ccahhE84.s:1017   .text:00000000000003cc .LBB147
     /tmp/ccahhE84.s:1039   .text:00000000000003ec .LBE147
     /tmp/ccahhE84.s:4233   .debug_loc:0000000000000573 .LLST8
     /tmp/ccahhE84.s:1026   .text:00000000000003e4 .LVL61
     /tmp/ccahhE84.s:1054   .text:0000000000000404 .LBB135
     /tmp/ccahhE84.s:1074   .text:0000000000000420 .LBE135
     /tmp/ccahhE84.s:4432   .debug_str:000000000000023d .LASF161
     /tmp/ccahhE84.s:4240   .debug_loc:0000000000000596 .LLST7
     /tmp/ccahhE84.s:1061   .text:0000000000000418 .LVL65
     /tmp/ccahhE84.s:1079   .text:0000000000000424 .LBB130
     /tmp/ccahhE84.s:1097   .text:0000000000000438 .LBE130
     /tmp/ccahhE84.s:4247   .debug_loc:00000000000005b9 .LLST6
     /tmp/ccahhE84.s:1084   .text:0000000000000430 .LVL67
     /tmp/ccahhE84.s:1102   .text:000000000000043c .LBB126
     /tmp/ccahhE84.s:1120   .text:0000000000000450 .LBE126
     /tmp/ccahhE84.s:4254   .debug_loc:00000000000005dc .LLST5
     /tmp/ccahhE84.s:1107   .text:0000000000000448 .LVL69
     /tmp/ccahhE84.s:1125   .text:0000000000000454 .LBB123
     /tmp/ccahhE84.s:1143   .text:0000000000000468 .LBE123
     /tmp/ccahhE84.s:4261   .debug_loc:00000000000005ff .LLST4
     /tmp/ccahhE84.s:1130   .text:0000000000000460 .LVL71
     /tmp/ccahhE84.s:1148   .text:000000000000046c .LBB122
     /tmp/ccahhE84.s:1165   .text:000000000000047c .LBE122
     /tmp/ccahhE84.s:4268   .debug_loc:0000000000000622 .LLST3
     /tmp/ccahhE84.s:1152   .text:0000000000000474 .LVL73
     /tmp/ccahhE84.s:90     .text:0000000000000040 .LBB102
     /tmp/ccahhE84.s:107    .text:000000000000004c .LBE102
     /tmp/ccahhE84.s:109    .text:000000000000004c .LBB104
     /tmp/ccahhE84.s:122    .text:0000000000000050 .LBE104
     /tmp/ccahhE84.s:128    .text:0000000000000058 .LBB106
     /tmp/ccahhE84.s:141    .text:000000000000005c .LBE106
     /tmp/ccahhE84.s:1004   .text:00000000000003c0 .LBB155
     /tmp/ccahhE84.s:1015   .text:00000000000003cc .LBE155
     /tmp/ccahhE84.s:1009   .text:00000000000003c8 .LVL58
     /tmp/ccahhE84.s:968    .text:0000000000000390 .LBB165
     /tmp/ccahhE84.s:985    .text:00000000000003b0 .LBE165
     /tmp/ccahhE84.s:978    .text:00000000000003a8 .LVL55
     /tmp/ccahhE84.s:982    .text:00000000000003b0 .LVL56
     /tmp/ccahhE84.s:635    .text:000000000000021c .LBB246
     /tmp/ccahhE84.s:646    .text:0000000000000220 .LBE246
     /tmp/ccahhE84.s:4275   .debug_loc:0000000000000645 .LLST21
     /tmp/ccahhE84.s:651    .text:0000000000000224 .LBB248
     /tmp/ccahhE84.s:663    .text:0000000000000228 .LBE248
     /tmp/ccahhE84.s:4282   .debug_loc:0000000000000668 .LLST22
     /tmp/ccahhE84.s:1183   .text:0000000000000480 .LBB265
     /tmp/ccahhE84.s:1196   .text:000000000000048c .LBE265
     /tmp/ccahhE84.s:173    .text:0000000000000098 .LVL5
     /tmp/ccahhE84.s:414    .text:0000000000000114 .LVL8
GAS LISTING /tmp/ccahhE84.s 			page 46


     /tmp/ccahhE84.s:1049   .text:0000000000000400 .LVL63
     /tmp/ccahhE84.s:4644   .debug_str:000000000000089e .LASF162
     /tmp/ccahhE84.s:10     .text:0000000000000000 .LFB48
     /tmp/ccahhE84.s:40     .text:0000000000000020 .LFE48
     /tmp/ccahhE84.s:4398   .debug_str:000000000000012e .LASF163
     /tmp/ccahhE84.s:4482   .debug_str:0000000000000395 .LASF164
     /tmp/ccahhE84.s:4618   .debug_str:00000000000007f5 .LASF165
     /tmp/ccahhE84.s:4678   .debug_str:0000000000000a51 .LASF166
     /tmp/ccahhE84.s:4466   .debug_str:0000000000000343 .LASF167
     /tmp/ccahhE84.s:4448   .debug_str:00000000000002cb .LASF168
     /tmp/ccahhE84.s:4514   .debug_str:00000000000004bf .LASF169
     /tmp/ccahhE84.s:150    .text:0000000000000064 .LVL3
     /tmp/ccahhE84.s:161    .text:0000000000000074 .LVL4
     /tmp/ccahhE84.s:177    .text:000000000000009c .LVL6
     /tmp/ccahhE84.s:416    .text:0000000000000118 .LVL9
     /tmp/ccahhE84.s:436    .text:000000000000011c .LVL10
     /tmp/ccahhE84.s:696    .text:000000000000024c .LVL33
     /tmp/ccahhE84.s:713    .text:0000000000000250 .LVL34
     /tmp/ccahhE84.s:934    .text:000000000000036c .LVL50
     /tmp/ccahhE84.s:964    .text:0000000000000390 .LVL53
     /tmp/ccahhE84.s:975    .text:000000000000039c .LVL54
     /tmp/ccahhE84.s:1000   .text:00000000000003c0 .LVL57
     /tmp/ccahhE84.s:1012   .text:00000000000003cc .LVL59
     /tmp/ccahhE84.s:1041   .text:00000000000003f0 .LVL62
     /tmp/ccahhE84.s:1051   .text:0000000000000404 .LVL64
     /tmp/ccahhE84.s:1076   .text:0000000000000424 .LVL66
     /tmp/ccahhE84.s:1099   .text:000000000000043c .LVL68
     /tmp/ccahhE84.s:1122   .text:0000000000000454 .LVL70
     /tmp/ccahhE84.s:1145   .text:000000000000046c .LVL72
     /tmp/ccahhE84.s:105    .text:000000000000004c .LVL0
     /tmp/ccahhE84.s:184    .text:00000000000000a0 .LVL7
     /tmp/ccahhE84.s:469    .text:0000000000000140 .LVL16
     /tmp/ccahhE84.s:815    .text:00000000000002cc .LVL42
     /tmp/ccahhE84.s:866    .text:0000000000000300 .LVL46
     /tmp/ccahhE84.s:883    .text:0000000000000324 .LVL47
     /tmp/ccahhE84.s:946    .text:0000000000000378 .LVL51
     /tmp/ccahhE84.s:1023   .text:00000000000003d8 .LVL60
     /tmp/ccahhE84.s:1167   .text:0000000000000480 .LVL74
     /tmp/ccahhE84.s:607    .text:0000000000000210 .LVL26
     /tmp/ccahhE84.s:626    .text:0000000000000218 .LVL27
     /tmp/ccahhE84.s:442    .text:0000000000000124 .LVL11
     /tmp/ccahhE84.s:449    .text:0000000000000128 .LVL12
     /tmp/ccahhE84.s:452    .text:000000000000012c .LVL13
     /tmp/ccahhE84.s:455    .text:0000000000000130 .LVL14
     /tmp/ccahhE84.s:504    .text:0000000000000180 .LVL17
     /tmp/ccahhE84.s:519    .text:0000000000000194 .LVL18
     /tmp/ccahhE84.s:534    .text:00000000000001a4 .LVL21
     /tmp/ccahhE84.s:537    .text:00000000000001ac .LVL22
     /tmp/ccahhE84.s:584    .text:00000000000001e8 .LVL25
     /tmp/ccahhE84.s:676    .text:0000000000000238 .LVL32
     /tmp/ccahhE84.s:525    .text:0000000000000198 .LVL19
     /tmp/ccahhE84.s:527    .text:000000000000019c .LVL20
     /tmp/ccahhE84.s:581    .text:00000000000001e4 .LVL24
     /tmp/ccahhE84.s:543    .text:00000000000001b0 .LVL23
     /tmp/ccahhE84.s:849    .text:00000000000002f4 .LVL45
     /tmp/ccahhE84.s:719    .text:0000000000000258 .LVL35
     /tmp/ccahhE84.s:731    .text:000000000000026c .LVL36
GAS LISTING /tmp/ccahhE84.s 			page 47


     /tmp/ccahhE84.s:737    .text:0000000000000274 .LVL37
     /tmp/ccahhE84.s:742    .text:0000000000000280 .LVL38
     /tmp/ccahhE84.s:749    .text:000000000000028c .LVL39
     /tmp/ccahhE84.s:803    .text:00000000000002bc .LVL41
     /tmp/ccahhE84.s:821    .text:00000000000002d4 .LVL43
     /tmp/ccahhE84.s:904    .text:0000000000000344 .LVL48
     /tmp/ccahhE84.s:841    .text:00000000000002ec .LVL44
     /tmp/ccahhE84.s:927    .text:0000000000000364 .LVL49
     /tmp/ccahhE84.s:634    .text:000000000000021c .LVL28
     /tmp/ccahhE84.s:643    .text:0000000000000220 .LVL29
     /tmp/ccahhE84.s:650    .text:0000000000000224 .LVL30
     /tmp/ccahhE84.s:659    .text:0000000000000228 .LVL31
     /tmp/ccahhE84.s:1207   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccahhE84.s:706    .text:000000000000024c .LBB187
     /tmp/ccahhE84.s:760    .text:0000000000000290 .LBE187
     /tmp/ccahhE84.s:770    .text:0000000000000290 .LBB202
     /tmp/ccahhE84.s:864    .text:00000000000002fc .LBE202
     /tmp/ccahhE84.s:868    .text:0000000000000300 .LBB203
     /tmp/ccahhE84.s:938    .text:000000000000036c .LBE203
     /tmp/ccahhE84.s:759    .text:0000000000000290 .LBE188
     /tmp/ccahhE84.s:771    .text:0000000000000290 .LBB200
     /tmp/ccahhE84.s:851    .text:00000000000002f4 .LBE200
     /tmp/ccahhE84.s:869    .text:0000000000000300 .LBB201
     /tmp/ccahhE84.s:937    .text:000000000000036c .LBE201
     /tmp/ccahhE84.s:823    .text:00000000000002d4 .LBE190
     /tmp/ccahhE84.s:885    .text:0000000000000324 .LBB196
     /tmp/ccahhE84.s:907    .text:0000000000000344 .LBE196
     /tmp/ccahhE84.s:843    .text:00000000000002ec .LBE193
     /tmp/ccahhE84.s:908    .text:0000000000000344 .LBB197
     /tmp/ccahhE84.s:930    .text:0000000000000364 .LBE197
     /tmp/ccahhE84.s:429    .text:0000000000000118 .LBB215
     /tmp/ccahhE84.s:629    .text:0000000000000218 .LBE215
     /tmp/ccahhE84.s:682    .text:0000000000000238 .LBB232
     /tmp/ccahhE84.s:704    .text:000000000000024c .LBE232
     /tmp/ccahhE84.s:614    .text:0000000000000210 .LBE218
     /tmp/ccahhE84.s:683    .text:0000000000000238 .LBB231
     /tmp/ccahhE84.s:703    .text:000000000000024c .LBE231
     /tmp/ccahhE84.s:465    .text:0000000000000134 .LBB220
     /tmp/ccahhE84.s:612    .text:0000000000000210 .LBE220
     /tmp/ccahhE84.s:685    .text:0000000000000238 .LBB229
     /tmp/ccahhE84.s:701    .text:000000000000024c .LBE229
     /tmp/ccahhE84.s:539    .text:00000000000001ac .LBB223
     /tmp/ccahhE84.s:609    .text:0000000000000210 .LBE223
     /tmp/ccahhE84.s:688    .text:0000000000000238 .LBB224
     /tmp/ccahhE84.s:698    .text:000000000000024c .LBE224

UNDEFINED SYMBOLS
console_handler
__putc
_ZN16MemoryAllocation9fmem_headE
_ZN3TCB12createThreadEPFvPvEPPS_S0_b
_ZN3TCB7runningE
_ZN3TCB11setFinishedEb
_ZN3TCB8dispatchEv
_ZN3TCB11startThreadEPPS_PFvPvE
_ZN9semaphore7semOpenEPPS_j
_ZN9semaphore8semCloseEPS_
GAS LISTING /tmp/ccahhE84.s 			page 48


_ZN9semaphore7semWaitEPS_
_ZN9semaphore9semSignalEPS_
__getc
