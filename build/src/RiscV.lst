GAS LISTING /tmp/ccf5Rp5d.s 			page 1


   1              		.file	"RiscV.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5RiscV10popSppSpieEv
   9              	_ZN5RiscV10popSppSpieEv:
  10              	.LFB44:
  11              		.file 1 "src/RiscV.cpp"
   1:src/RiscV.cpp **** //
   2:src/RiscV.cpp **** // Created by os on 8/14/22.
   3:src/RiscV.cpp **** //
   4:src/RiscV.cpp **** 
   5:src/RiscV.cpp **** #include "../h/RiscV.hpp"
   6:src/RiscV.cpp **** #include "../h/tcb.hpp"
   7:src/RiscV.cpp **** #include "../lib/console.h"
   8:src/RiscV.cpp **** #include "../h/MemoryAllocation.hpp"
   9:src/RiscV.cpp **** #include "../h/tcb.hpp"
  10:src/RiscV.cpp **** 
  11:src/RiscV.cpp **** 
  12:src/RiscV.cpp **** void RiscV::popSppSpie() {
  12              		.loc 1 12 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/RiscV.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 39 is_stmt 0
  22              	#APP
  23              	# 13 "src/RiscV.cpp" 1
  14              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 30 is_stmt 0
  28              	# 14 "src/RiscV.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE44:
  42              		.align	2
  43              		.globl	_ZN5RiscV20handleSupervisorTrapEv
  45              	_ZN5RiscV20handleSupervisorTrapEv:
GAS LISTING /tmp/ccf5Rp5d.s 			page 2


  46              	.LFB45:
  16:src/RiscV.cpp **** 
  17:src/RiscV.cpp **** void RiscV::handleSupervisorTrap() {
  47              		.loc 1 17 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040105 		addi	s0,sp,80
  56              		.cfi_def_cfa 8, 0
  18:src/RiscV.cpp ****     //class TCB;
  19:src/RiscV.cpp ****     typedef TCB* thread_t;
  57              		.loc 1 19 5
  20:src/RiscV.cpp ****     volatile uint64 size;
  58              		.loc 1 20 5
  21:src/RiscV.cpp ****     volatile uint64 handle;
  59              		.loc 1 21 5
  22:src/RiscV.cpp ****     volatile uint64 start_routine;
  60              		.loc 1 22 5
  23:src/RiscV.cpp ****     volatile uint64 arg;
  61              		.loc 1 23 5
  24:src/RiscV.cpp ****     volatile uint64 ptr;
  62              		.loc 1 24 5
  25:src/RiscV.cpp ****     __asm__ volatile("sd a3, %0" : "=m"(arg));
  63              		.loc 1 25 5
  64              		.loc 1 25 46 is_stmt 0
  65              	#APP
  66              	# 25 "src/RiscV.cpp" 1
  26              	    __asm__ volatile("sd a2, %0" : "=m"(start_routine));
  67              		sd a3, -48(s0)
  68              	# 0 "" 2
  69              		.loc 1 26 5 is_stmt 1
  70              		.loc 1 26 56 is_stmt 0
  71              	# 26 "src/RiscV.cpp" 1
  27              	    __asm__ volatile("sd a1, %0" : "=m"(handle));
  72              		sd a2, -40(s0)
  73              	# 0 "" 2
  74              		.loc 1 27 5 is_stmt 1
  75              		.loc 1 27 49 is_stmt 0
  76              	# 27 "src/RiscV.cpp" 1
  28              	    //__asm__ volatile("sd a1, %0" : "=m"(size));
  29:src/RiscV.cpp ****     //__asm__ volatile("sd a1, %0" : "=m"(ptr));
  30:src/RiscV.cpp ****     uint64 sysCallNr;
  77              		sd a1, -32(s0)
  78              	# 0 "" 2
  79              		.loc 1 30 5 is_stmt 1
  31:src/RiscV.cpp ****     int ret_value_thr_exit;
  80              		.loc 1 31 5
  32:src/RiscV.cpp ****     uint64 scause = r_scause();
  81              		.loc 1 32 5
  82              	#NO_APP
  83              	.LBB72:
  84              	.LBB73:
  85              		.file 2 "src/../h/RiscV.hpp"
GAS LISTING /tmp/ccf5Rp5d.s 			page 3


   1:src/../h/RiscV.hpp **** //
   2:src/../h/RiscV.hpp **** // Created by os on 8/14/22.
   3:src/../h/RiscV.hpp **** //
   4:src/../h/RiscV.hpp **** 
   5:src/../h/RiscV.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/RiscV.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/RiscV.hpp **** #include "../lib/hw.h"
   8:src/../h/RiscV.hpp **** 
   9:src/../h/RiscV.hpp **** class RiscV {
  10:src/../h/RiscV.hpp **** public:
  11:src/../h/RiscV.hpp ****     //pop sstatus.spp and sstatus.spie bits(mora da bude ne inline funkcija)
  12:src/../h/RiscV.hpp ****     static void popSppSpie();
  13:src/../h/RiscV.hpp **** 
  14:src/../h/RiscV.hpp ****     //push x3...x31 registers on stack
  15:src/../h/RiscV.hpp ****     static void pushRegisters();
  16:src/../h/RiscV.hpp **** 
  17:src/../h/RiscV.hpp ****     //pop x3...x31 registers on stack
  18:src/../h/RiscV.hpp ****     static void popRegisters();
  19:src/../h/RiscV.hpp **** 
  20:src/../h/RiscV.hpp ****     //read register scause
  21:src/../h/RiscV.hpp ****     static uint64 r_scause();
  22:src/../h/RiscV.hpp **** 
  23:src/../h/RiscV.hpp ****     //write register scause
  24:src/../h/RiscV.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/RiscV.hpp **** 
  26:src/../h/RiscV.hpp ****     //read register sepc
  27:src/../h/RiscV.hpp ****     static uint64 r_sepc();
  28:src/../h/RiscV.hpp **** 
  29:src/../h/RiscV.hpp ****     //write register sepc
  30:src/../h/RiscV.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/RiscV.hpp **** 
  32:src/../h/RiscV.hpp ****     //read register stvec
  33:src/../h/RiscV.hpp ****     static uint64 r_stvec();
  34:src/../h/RiscV.hpp **** 
  35:src/../h/RiscV.hpp ****     //write register stvec
  36:src/../h/RiscV.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/RiscV.hpp **** 
  38:src/../h/RiscV.hpp ****     //write register stval
  39:src/../h/RiscV.hpp ****     static uint64 r_stval();
  40:src/../h/RiscV.hpp **** 
  41:src/../h/RiscV.hpp ****     //write register stval
  42:src/../h/RiscV.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/RiscV.hpp **** 
  44:src/../h/RiscV.hpp ****     enum BitMaskSip{
  45:src/../h/RiscV.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/RiscV.hpp ****         SIP_STIP = (1 << 5),
  47:src/../h/RiscV.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/RiscV.hpp ****     };
  49:src/../h/RiscV.hpp **** 
  50:src/../h/RiscV.hpp ****     //mask set register sip
  51:src/../h/RiscV.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/RiscV.hpp **** 
  53:src/../h/RiscV.hpp ****     //mask clear register sip
  54:src/../h/RiscV.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/RiscV.hpp **** 
  56:src/../h/RiscV.hpp ****     //read register sip
  57:src/../h/RiscV.hpp ****     static uint64 r_sip();
GAS LISTING /tmp/ccf5Rp5d.s 			page 4


  58:src/../h/RiscV.hpp **** 
  59:src/../h/RiscV.hpp ****     //write register sip
  60:src/../h/RiscV.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/RiscV.hpp **** 
  62:src/../h/RiscV.hpp ****     enum BitMaskSstatus{
  63:src/../h/RiscV.hpp ****         SSTATUS_SIE = (1<<1),
  64:src/../h/RiscV.hpp ****         SSTATUS_SPIE = (1<<5),
  65:src/../h/RiscV.hpp ****         SSTATUS_SPP=  (1<<8),
  66:src/../h/RiscV.hpp ****     };
  67:src/../h/RiscV.hpp **** 
  68:src/../h/RiscV.hpp ****     //mask set register sstatus
  69:src/../h/RiscV.hpp ****     static void ms_sstatus(uint64 mask);
  70:src/../h/RiscV.hpp **** 
  71:src/../h/RiscV.hpp ****     //mask clear register sstatus
  72:src/../h/RiscV.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/RiscV.hpp **** 
  74:src/../h/RiscV.hpp ****     //read register sstatus
  75:src/../h/RiscV.hpp ****     static uint64 r_sstatus();
  76:src/../h/RiscV.hpp **** 
  77:src/../h/RiscV.hpp ****     //write register sstatus
  78:src/../h/RiscV.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/RiscV.hpp **** 
  80:src/../h/RiscV.hpp ****     static void supervisorTrap();
  81:src/../h/RiscV.hpp **** 
  82:src/../h/RiscV.hpp **** private:
  83:src/../h/RiscV.hpp ****     //obradjuje trap handler
  84:src/../h/RiscV.hpp ****     static void handleSupervisorTrap();
  85:src/../h/RiscV.hpp **** };
  86:src/../h/RiscV.hpp **** 
  87:src/../h/RiscV.hpp **** inline uint64 RiscV::r_scause() {
  88:src/../h/RiscV.hpp ****     uint64 volatile scause;
  86              		.loc 2 88 5
  89:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[scause], scause" : [scause] "=r"(scause));
  87              		.loc 2 89 5
  88              		.loc 2 89 71 is_stmt 0
  89              	#APP
  90              	# 89 "src/../h/RiscV.hpp" 1
  90              	    return scause;
  91              		csrr a5, scause
  92              	# 0 "" 2
  93              	#NO_APP
  94 0040 2338F4FA 		sd	a5,-80(s0)
  95              		.loc 2 90 5 is_stmt 1
  96              		.loc 2 90 12 is_stmt 0
  97 0044 033704FB 		ld	a4,-80(s0)
  98              	.LVL0:
  99              	.LBE73:
 100              	.LBE72:
  33:src/RiscV.cpp ****     volatile uint64 sepc = r_sepc() + 4;
 101              		.loc 1 33 5 is_stmt 1
 102              	.LBB74:
 103              	.LBB75:
  91:src/../h/RiscV.hpp **** 
  92:src/../h/RiscV.hpp **** }
  93:src/../h/RiscV.hpp **** 
  94:src/../h/RiscV.hpp **** inline void RiscV::w_scause(uint64 scause){
  95:src/../h/RiscV.hpp ****     __asm__ volatile("csrw scause, %[scause]": : [scause] "r"(scause));
GAS LISTING /tmp/ccf5Rp5d.s 			page 5


  96:src/../h/RiscV.hpp **** 
  97:src/../h/RiscV.hpp **** }
  98:src/../h/RiscV.hpp **** 
  99:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sepc(){
 100:src/../h/RiscV.hpp ****     uint64  sepc;
 104              		.loc 2 100 5
 101:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 105              		.loc 2 101 5
 106              		.loc 2 101 63 is_stmt 0
 107              	#APP
 108              	# 101 "src/../h/RiscV.hpp" 1
 102              	    return sepc;
 109              		csrr a5, sepc
 110              	# 0 "" 2
 111              	.LVL1:
 112              		.loc 2 102 5 is_stmt 1
 113              	#NO_APP
 114              	.LBE75:
 115              	.LBE74:
 116              		.loc 1 33 37 is_stmt 0
 117 004c 93874700 		addi	a5,a5,4
 118              		.loc 1 33 39
 119 0050 2330F4FC 		sd	a5,-64(s0)
  34:src/RiscV.cpp ****     volatile uint64 sstatus = r_sstatus();
 120              		.loc 1 34 5 is_stmt 1
 121              	.LBB76:
 122              	.LBB77:
 103:src/../h/RiscV.hpp **** }
 104:src/../h/RiscV.hpp **** 
 105:src/../h/RiscV.hpp **** inline void RiscV::w_sepc(uint64 volatile sepc){
 106:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]": : [sepc] "r"(sepc));
 107:src/../h/RiscV.hpp **** }
 108:src/../h/RiscV.hpp **** 
 109:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stvec() {
 110:src/../h/RiscV.hpp ****     uint64 volatile stvec;
 111:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 112:src/../h/RiscV.hpp ****     return stvec;
 113:src/../h/RiscV.hpp **** }
 114:src/../h/RiscV.hpp **** 
 115:src/../h/RiscV.hpp **** inline void RiscV::w_stvec(uint64 stvec){
 116:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]": : [stvec] "r"(stvec));
 117:src/../h/RiscV.hpp **** }
 118:src/../h/RiscV.hpp **** 
 119:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stval(){
 120:src/../h/RiscV.hpp ****     uint64 volatile stval;
 121:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[stval], stval" : [stval] "=r"(stval));
 122:src/../h/RiscV.hpp ****     return stval;
 123:src/../h/RiscV.hpp **** }
 124:src/../h/RiscV.hpp **** 
 125:src/../h/RiscV.hpp **** inline void RiscV::w_stval(uint64 stval) {
 126:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stval, %[stval]": : [stval] "r"(stval));
 127:src/../h/RiscV.hpp **** }
 128:src/../h/RiscV.hpp **** 
 129:src/../h/RiscV.hpp **** inline void RiscV::ms_sip(uint64 mask){
 130:src/../h/RiscV.hpp ****     __asm__ volatile("csrs sip, %[mask]": : [mask]"r"(mask));
 131:src/../h/RiscV.hpp **** }
 132:src/../h/RiscV.hpp **** 
GAS LISTING /tmp/ccf5Rp5d.s 			page 6


 133:src/../h/RiscV.hpp **** inline void RiscV::mc_sip(uint64 mask) {
 134:src/../h/RiscV.hpp ****     __asm__ volatile("csrc sip, %[mask]" : : [mask] "r"(mask));
 135:src/../h/RiscV.hpp **** }
 136:src/../h/RiscV.hpp **** 
 137:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sip(){
 138:src/../h/RiscV.hpp ****     uint64 volatile sip;
 139:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sip], sip" : [sip] "=r"(sip));
 140:src/../h/RiscV.hpp ****     return sip;
 141:src/../h/RiscV.hpp **** }
 142:src/../h/RiscV.hpp **** 
 143:src/../h/RiscV.hpp **** inline void RiscV::w_sip(uint64 sip) {
 144:src/../h/RiscV.hpp ****     __asm__ volatile("csrw sip, %[sip]": : [sip] "r"(sip));
 145:src/../h/RiscV.hpp **** }
 146:src/../h/RiscV.hpp **** 
 147:src/../h/RiscV.hpp **** inline void RiscV::ms_sstatus(uint64 mask) {
 148:src/../h/RiscV.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]": : [mask] "r"(mask));
 149:src/../h/RiscV.hpp **** }
 150:src/../h/RiscV.hpp **** 
 151:src/../h/RiscV.hpp **** inline void RiscV::mc_sstatus(uint64 mask) {
 152:src/../h/RiscV.hpp ****     __asm__ volatile("csrc sstatus, %[mask]": : [mask] "r"(mask));
 153:src/../h/RiscV.hpp **** }
 154:src/../h/RiscV.hpp **** 
 155:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sstatus() {
 156:src/../h/RiscV.hpp ****     uint64  sstatus;
 123              		.loc 2 156 5
 157:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus": [sstatus] "=r"(sstatus));
 124              		.loc 2 157 5
 125              		.loc 2 157 75 is_stmt 0
 126              	#APP
 127              	# 157 "src/../h/RiscV.hpp" 1
 158              	    return sstatus;
 128              		csrr a5, sstatus
 129              	# 0 "" 2
 130              	.LVL2:
 131              		.loc 2 158 5 is_stmt 1
 132              	#NO_APP
 133              	.LBE77:
 134              	.LBE76:
 135              		.loc 1 34 41 is_stmt 0
 136 0058 233CF4FA 		sd	a5,-72(s0)
  35:src/RiscV.cpp ****     __asm__ volatile("mv %[sysCallNr], a0" : [sysCallNr] "=r"(sysCallNr));
 137              		.loc 1 35 5 is_stmt 1
 138              		.loc 1 35 74 is_stmt 0
 139              	#APP
 140              	# 35 "src/RiscV.cpp" 1
  36              	    if (scause == 0x000000000000009UL || scause == 0x000000000000008UL){
 141              		mv a5, a0
 142              	# 0 "" 2
 143              	.LVL3:
 144              		.loc 1 36 5 is_stmt 1
 145              	#NO_APP
 146              	.LBB78:
 147              		.loc 1 36 39 is_stmt 0
 148 0060 130687FF 		addi	a2,a4,-8
 149              		.loc 1 36 5
 150 0064 93061000 		li	a3,1
 151 0068 63F8C602 		bleu	a2,a3,.L36
GAS LISTING /tmp/ccf5Rp5d.s 			page 7


  37:src/RiscV.cpp ****         if (sysCallNr == 0x01UL) {
  38:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
  39:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
  40:src/RiscV.cpp ****             //ja sam ovde spakovao argument koji se dobije, i saljem ga nazad u funkciju posle ecal
  41:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
  42:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  43:src/RiscV.cpp ****         } else if (sysCallNr == 0x02UL) {
  44:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
  45:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
  46:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
  47:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
  48:src/RiscV.cpp ****         }else if(sysCallNr == 0x11UL){
  49:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg)
  50:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
  51:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  52:src/RiscV.cpp ****         }else if(sysCallNr == 0x12UL){
  53:src/RiscV.cpp ****             ret_value_thr_exit=TCB::thread_exit();
  54:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
  55:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
  56:src/RiscV.cpp ****         }else if(sysCallNr == 0x13UL){
  57:src/RiscV.cpp ****             TCB::thread_dispatch();
  58:src/RiscV.cpp ****         }
  59:src/RiscV.cpp ****         //enviroment call from s-mode
  60:src/RiscV.cpp **** 
  61:src/RiscV.cpp ****         /*TCB::timeSliceCounter = 0;
  62:src/RiscV.cpp ****         TCB::dispatch();*/
  63:src/RiscV.cpp ****         w_sstatus(sstatus);
  64:src/RiscV.cpp ****         w_sepc(sepc);
  65:src/RiscV.cpp ****     }
  66:src/RiscV.cpp ****     else if(scause == 0x8000000000000001UL){
 152              		.loc 1 66 10 is_stmt 1
 153 006c 9307F0FF 		li	a5,-1
 154              	.LVL4:
 155 0070 9397F703 		slli	a5,a5,63
 156 0074 93871700 		addi	a5,a5,1
 157 0078 630EF72E 		beq	a4,a5,.L37
  67:src/RiscV.cpp ****         mc_sip(SIP_SSIP);
  68:src/RiscV.cpp ****     }else if(scause==0x8000000000000009UL){
 158              		.loc 1 68 11
 159 007c 9307F0FF 		li	a5,-1
 160 0080 9397F703 		slli	a5,a5,63
 161 0084 93879700 		addi	a5,a5,9
 162 0088 6314F704 		bne	a4,a5,.L3
  69:src/RiscV.cpp ****         //supervisor external interrupt (console)
  70:src/RiscV.cpp ****         console_handler();
 163              		.loc 1 70 9
 164              		.loc 1 70 24 is_stmt 0
 165 008c 97000000 		call	console_handler@plt
 165      E7800000 
 166              	.LVL5:
 167              	.LBE78:
  71:src/RiscV.cpp ****     }else {
  72:src/RiscV.cpp ****         //unexpected trap cause
  73:src/RiscV.cpp ****         //print (scause)
  74:src/RiscV.cpp ****         //print sepc
  75:src/RiscV.cpp ****         //print sval
  76:src/RiscV.cpp **** 
GAS LISTING /tmp/ccf5Rp5d.s 			page 8


  77:src/RiscV.cpp ****     }
  78:src/RiscV.cpp **** }...
 168              		.loc 1 78 1
 169 0094 6F00C003 		j	.L3
 170              	.LVL6:
 171              	.L36:
 172              	.LBB141:
 173              	.LBB79:
  37:src/RiscV.cpp ****         if (sysCallNr == 0x01UL) {
 174              		.loc 1 37 9 is_stmt 1
 175              	.LBB80:
 176 0098 13071000 		li	a4,1
 177              	.LVL7:
 178 009c 6382E704 		beq	a5,a4,.L38
 179              	.LBE80:
 180              	.LBE79:
 181              	.LBE141:
  43:src/RiscV.cpp ****         } else if (sysCallNr == 0x02UL) {
 182              		.loc 1 43 16
 183              	.LBB142:
 184              	.LBB135:
 185              	.LBB127:
 186              	.LBB81:
 187 00a0 13072000 		li	a4,2
 188 00a4 638AE714 		beq	a5,a4,.L39
 189              	.LBE81:
 190              	.LBE127:
 191              	.LBE135:
 192              	.LBE142:
  48:src/RiscV.cpp ****         }else if(sysCallNr == 0x11UL){
 193              		.loc 1 48 15
 194              	.LBB143:
 195              	.LBB136:
 196              	.LBB128:
 197              	.LBB106:
 198              	.LBB82:
 199 00a8 13071001 		li	a4,17
 200 00ac 6386E726 		beq	a5,a4,.L40
  52:src/RiscV.cpp ****         }else if(sysCallNr == 0x12UL){
 201              		.loc 1 52 15
 202 00b0 13072001 		li	a4,18
 203 00b4 6382E728 		beq	a5,a4,.L41
  56:src/RiscV.cpp ****         }else if(sysCallNr == 0x13UL){
 204              		.loc 1 56 15
 205 00b8 13073001 		li	a4,19
 206 00bc 6386E72A 		beq	a5,a4,.L42
 207              	.LVL8:
 208              	.L15:
 209              	.LBE82:
 210              	.LBE106:
 211              	.LBE128:
  63:src/RiscV.cpp ****         w_sstatus(sstatus);
 212              		.loc 1 63 9
  63:src/RiscV.cpp ****         w_sstatus(sstatus);
 213              		.loc 1 63 18 is_stmt 0
 214 00c0 833784FB 		ld	a5,-72(s0)
 215              	.LVL9:
GAS LISTING /tmp/ccf5Rp5d.s 			page 9


 216              	.LBB129:
 217              	.LBB130:
 159:src/../h/RiscV.hpp **** }
 160:src/../h/RiscV.hpp **** 
 161:src/../h/RiscV.hpp **** inline void RiscV::w_sstatus(uint64 volatile sstatus) {
 162:src/../h/RiscV.hpp ****     __asm__ volatile("csrw sstatus, %[sstatus]": : [sstatus] "r"(sstatus));
 218              		.loc 2 162 5 is_stmt 1
 219              		.loc 2 162 75 is_stmt 0
 220              	#APP
 221              	# 162 "src/../h/RiscV.hpp" 1
 163              	}
 222              		csrw sstatus, a5
 223              	# 0 "" 2
 224              	.LVL10:
 225              	#NO_APP
 226              	.LBE130:
 227              	.LBE129:
  64:src/RiscV.cpp ****         w_sepc(sepc);
 228              		.loc 1 64 9 is_stmt 1
  64:src/RiscV.cpp ****         w_sepc(sepc);
 229              		.loc 1 64 15 is_stmt 0
 230 00c8 833704FC 		ld	a5,-64(s0)
 231              	.LVL11:
 232              	.LBB131:
 233              	.LBB132:
 106:src/../h/RiscV.hpp **** }
 234              		.loc 2 106 5 is_stmt 1
 106:src/../h/RiscV.hpp **** }
 235              		.loc 2 106 64 is_stmt 0
 236              	#APP
 237              	# 106 "src/../h/RiscV.hpp" 1
 238              		csrw sepc, a5
 239              	# 0 "" 2
 240              	.LVL12:
 241              	#NO_APP
 242              	.L3:
 243              	.LBE132:
 244              	.LBE131:
 245              	.LBE136:
 246              	.LBE143:
 247              		.loc 1 78 1
 248 00d0 83308104 		ld	ra,72(sp)
 249              		.cfi_remember_state
 250              		.cfi_restore 1
 251 00d4 03340104 		ld	s0,64(sp)
 252              		.cfi_restore 8
 253              		.cfi_def_cfa 2, 80
 254 00d8 13010105 		addi	sp,sp,80
 255              		.cfi_def_cfa_offset 0
 256 00dc 67800000 		jr	ra
 257              	.LVL13:
 258              	.L38:
 259              		.cfi_restore_state
 260              	.LBB144:
 261              	.LBB137:
 262              	.LBB133:
 263              	.LBB107:
GAS LISTING /tmp/ccf5Rp5d.s 			page 10


  38:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
 264              		.loc 1 38 13 is_stmt 1
  38:src/RiscV.cpp ****             __asm__ volatile("mv %[size], a1" : [size] "=r"(size)); //promeni ovaj read, undefined 
 265              		.loc 1 38 67 is_stmt 0
 266              	#APP
 267              	# 38 "src/RiscV.cpp" 1
 268              		mv a5, a1
 269              	# 0 "" 2
 270              	.LVL14:
 271              	#NO_APP
 272 00e4 2334F4FE 		sd	a5,-24(s0)
  39:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
 273              		.loc 1 39 13 is_stmt 1
  39:src/RiscV.cpp ****             void* pointer=MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks((size_t)size)
 274              		.loc 1 39 86 is_stmt 0
 275 00e8 833784FE 		ld	a5,-24(s0)
 276              	.LVL15:
 277              	.LBB108:
 278              	.LBB109:
 279              		.file 3 "src/../h/../h/../h/MemoryAllocation.hpp"
   1:src/../h/../h/../h/MemoryAllocation.hpp **** #include "../lib/hw.h"
   2:src/../h/../h/../h/MemoryAllocation.hpp **** 
   3:src/../h/../h/../h/MemoryAllocation.hpp **** 
   4:src/../h/../h/../h/MemoryAllocation.hpp **** #ifndef PROJECT_BASE_MEMORYALLOCATION_HPP
   5:src/../h/../h/../h/MemoryAllocation.hpp **** #define PROJECT_BASE_MEMORYALLOCATION_HPP
   6:src/../h/../h/../h/MemoryAllocation.hpp **** 
   7:src/../h/../h/../h/MemoryAllocation.hpp **** 
   8:src/../h/../h/../h/MemoryAllocation.hpp **** class MemoryAllocation {
   9:src/../h/../h/../h/MemoryAllocation.hpp **** 
  10:src/../h/../h/../h/MemoryAllocation.hpp ****     //===========================DEFINICIJA SINGLETON KLASE POCETAK=======================k
  11:src/../h/../h/../h/MemoryAllocation.hpp **** private:
  12:src/../h/../h/../h/MemoryAllocation.hpp **** 
  13:src/../h/../h/../h/MemoryAllocation.hpp ****     struct FreeMem {
  14:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *next;
  15:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *prev;
  16:src/../h/../h/../h/MemoryAllocation.hpp ****         size_t size;
  17:src/../h/../h/../h/MemoryAllocation.hpp ****     };
  18:src/../h/../h/../h/MemoryAllocation.hpp **** 
  19:src/../h/../h/../h/MemoryAllocation.hpp **** 
  20:src/../h/../h/../h/MemoryAllocation.hpp ****     static FreeMem *fmem_head; //koja pocetna vrednost?
  21:src/../h/../h/../h/MemoryAllocation.hpp **** 
  22:src/../h/../h/../h/MemoryAllocation.hpp **** 
  23:src/../h/../h/../h/MemoryAllocation.hpp **** 
  24:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *instance;
  25:src/../h/../h/../h/MemoryAllocation.hpp ****     int data;
  26:src/../h/../h/../h/MemoryAllocation.hpp **** 
  27:src/../h/../h/../h/MemoryAllocation.hpp **** 
  28:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation() { //OVO SE SADA NIGGDE
  29:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  30:src/../h/../h/../h/MemoryAllocation.hpp ****                                     (char *) HEAP_START_ADDR); //da li smem ovo da castujem u size_
  31:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->next = nullptr;
  32:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->prev = nullptr;
  33:src/../h/../h/../h/MemoryAllocation.hpp ****         data = 0;
  34:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  35:src/../h/../h/../h/MemoryAllocation.hpp **** 
  36:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation(MemoryAllocation const &);
  37:src/../h/../h/../h/MemoryAllocation.hpp **** 
GAS LISTING /tmp/ccf5Rp5d.s 			page 11


  38:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const &);
  39:src/../h/../h/../h/MemoryAllocation.hpp **** 
  40:src/../h/../h/../h/MemoryAllocation.hpp **** public:
  41:src/../h/../h/../h/MemoryAllocation.hpp **** 
  42:src/../h/../h/../h/MemoryAllocation.hpp **** 
  43:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *getInstance() {
  44:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!instance) {
  45:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head =  (FreeMem*) HEAP_START_ADDR;
  46:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  47:src/../h/../h/../h/MemoryAllocation.hpp ****                                         (char *) HEAP_START_ADDR); //da li smem ovo da castujem u s
  48:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->next = nullptr;
  49:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->prev = nullptr;
  50:src/../h/../h/../h/MemoryAllocation.hpp ****             static MemoryAllocation* instance;
  51:src/../h/../h/../h/MemoryAllocation.hpp ****             return instance;
  52:src/../h/../h/../h/MemoryAllocation.hpp ****         }
  53:src/../h/../h/../h/MemoryAllocation.hpp ****         return instance;
  54:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  55:src/../h/../h/../h/MemoryAllocation.hpp **** 
  56:src/../h/../h/../h/MemoryAllocation.hpp **** 
  57:src/../h/../h/../h/MemoryAllocation.hpp ****     int getData() {
  58:src/../h/../h/../h/MemoryAllocation.hpp ****         return this->data;
  59:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  60:src/../h/../h/../h/MemoryAllocation.hpp **** 
  61:src/../h/../h/../h/MemoryAllocation.hpp ****     void setData(int data) {
  62:src/../h/../h/../h/MemoryAllocation.hpp ****         this->data = data;
  63:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  64:src/../h/../h/../h/MemoryAllocation.hpp **** 
  65:src/../h/../h/../h/MemoryAllocation.hpp ****     /*MemoryAllocation(MemoryAllocation const&) = delete;
  66:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const&)  = delete;*/
  67:src/../h/../h/../h/MemoryAllocation.hpp **** //===========================DEFINICIJA SINGLETON KLASE KRAJ========================
  68:src/../h/../h/../h/MemoryAllocation.hpp ****     static int bytesToBlocks(size_t size){
  69:src/../h/../h/../h/MemoryAllocation.hpp ****         return (size+sizeof(FreeMem)+MEM_BLOCK_SIZE-1)/MEM_BLOCK_SIZE;
 280              		.loc 3 69 9 is_stmt 1
 281              		.loc 3 69 52 is_stmt 0
 282 00ec 93877705 		addi	a5,a5,87
 283              	.LVL16:
 284              		.loc 3 69 55
 285 00f0 93D76700 		srli	a5,a5,6
 286              	.LVL17:
 287              		.loc 3 69 56
 288 00f4 9B870700 		sext.w	a5,a5
 289              	.LVL18:
 290              	.LBE109:
 291              	.LBE108:
 292              	.LBB110:
 293              	.LBB111:
  70:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  71:src/../h/../h/../h/MemoryAllocation.hpp **** 
  72:src/../h/../h/../h/MemoryAllocation.hpp **** 
  73:src/../h/../h/../h/MemoryAllocation.hpp **** //===========================METODE ZA ALOKACIJU MEMORIJE===========================
  74:src/../h/../h/../h/MemoryAllocation.hpp ****     static void tryToJoin (FreeMem* curr) {
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!curr) return;
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
  77:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->size += curr->next->size;
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
GAS LISTING /tmp/ccf5Rp5d.s 			page 12


  81:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
  82:src/../h/../h/../h/MemoryAllocation.hpp ****         }
  83:src/../h/../h/../h/MemoryAllocation.hpp **** 
  84:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  85:src/../h/../h/../h/MemoryAllocation.hpp **** 
  86:src/../h/../h/../h/MemoryAllocation.hpp ****     //===================================== mem_free, ali sa ptr ===============
  87:src/../h/../h/../h/MemoryAllocation.hpp ****         static int mem_free(void* ptr) { //radi i kada posaljem sa &
  88:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
  90:src/../h/../h/../h/MemoryAllocation.hpp ****         {
  91:src/../h/../h/../h/MemoryAllocation.hpp ****             cur=nullptr;
  92:src/../h/../h/../h/MemoryAllocation.hpp ****         }else {
  93:src/../h/../h/../h/MemoryAllocation.hpp ****                 for (cur=fmem_head; cur->next!=ptr && ptr>(char*)(cur->next); cur=cur->next); //moz
  94:src/../h/../h/../h/MemoryAllocation.hpp ****             }
  95:src/../h/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newSeg = (FreeMem*)ptr;
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
  97:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
  99:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=cur;
 101:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 103:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 104:src/../h/../h/../h/MemoryAllocation.hpp ****                 else {
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = fmem_head;
 106:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(newSeg->next) {
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 109:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 110:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur) {
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 112:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 113:src/../h/../h/../h/MemoryAllocation.hpp ****                 else {
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                     fmem_head = newSeg;
 115:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 116:src/../h/../h/../h/MemoryAllocation.hpp ****                 // Try to merge with the previous and next segments:
 117:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(newSeg);
 118:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 119:src/../h/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 120:src/../h/../h/../h/MemoryAllocation.hpp ****             if(newSeg==nullptr){
 121:src/../h/../h/../h/MemoryAllocation.hpp ****                 return -1;
 122:src/../h/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 123:src/../h/../h/../h/MemoryAllocation.hpp **** 
 124:src/../h/../h/../h/MemoryAllocation.hpp **** 
 125:src/../h/../h/../h/MemoryAllocation.hpp ****     }
 126:src/../h/../h/../h/MemoryAllocation.hpp ****     //===================================== kraj probe ==========================
 127:src/../h/../h/../h/MemoryAllocation.hpp **** 
 128:src/../h/../h/../h/MemoryAllocation.hpp **** 
 129:src/../h/../h/../h/MemoryAllocation.hpp **** 
 130:src/../h/../h/../h/MemoryAllocation.hpp ****     /*int mem_free(char* addr, size_t size) {
 131:src/../h/../h/../h/MemoryAllocation.hpp ****         // Find the place where to insert the new free segment (just after cur):
 132:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
 133:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!fmem_head || addr<(char*)fmem_head)
 134:src/../h/../h/../h/MemoryAllocation.hpp ****             cur = 0; // insert as the first
 135:src/../h/../h/../h/MemoryAllocation.hpp ****         else
 136:src/../h/../h/../h/MemoryAllocation.hpp ****             for (cur=fmem_head; cur->next!=0 && addr>(char*)(cur->next);
 137:src/../h/../h/../h/MemoryAllocation.hpp ****                  cur=cur->next);
GAS LISTING /tmp/ccf5Rp5d.s 			page 13


 138:src/../h/../h/../h/MemoryAllocation.hpp ****             // Insert the new segment after cur:
 139:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem* newSeg = (FreeMem*)addr;
 140:src/../h/../h/../h/MemoryAllocation.hpp ****         newSeg->size = size;
 141:src/../h/../h/../h/MemoryAllocation.hpp ****         newSeg->prev = cur;
 142:src/../h/../h/../h/MemoryAllocation.hpp ****         if (cur) newSeg->next = cur->next;
 143:src/../h/../h/../h/MemoryAllocation.hpp ****         else newSeg->next = fmem_head;
 144:src/../h/../h/../h/MemoryAllocation.hpp ****         if (newSeg->next) newSeg->next->prev = newSeg;
 145:src/../h/../h/../h/MemoryAllocation.hpp ****         if (cur) cur->next = newSeg;
 146:src/../h/../h/../h/MemoryAllocation.hpp ****         else fmem_head = newSeg;
 147:src/../h/../h/../h/MemoryAllocation.hpp ****             // Try to merge with the previous and next segments:
 148:src/../h/../h/../h/MemoryAllocation.hpp ****         tryToJoin(newSeg);
 149:src/../h/../h/../h/MemoryAllocation.hpp ****         tryToJoin(cur);
 150:src/../h/../h/../h/MemoryAllocation.hpp ****     }*/
 151:src/../h/../h/../h/MemoryAllocation.hpp **** 
 152:src/../h/../h/../h/MemoryAllocation.hpp ****     static void* mem_alloc(size_t size) {//uopste ne radi, iako u lotsofsmallmallocs pise da radi
 153:src/../h/../h/../h/MemoryAllocation.hpp ****         //size_t x=sizeof(fmem_head);
 154:src/../h/../h/../h/MemoryAllocation.hpp ****         //pozovi ovde samo bytes to blocks od size, da ne moras to da radis iz maina
 155:src/../h/../h/../h/MemoryAllocation.hpp ****         size=(size)*(size_t)MEM_BLOCK_SIZE; //kada je ovo ukljuceno, pravi problem u memfree, so il
 294              		.loc 3 155 9 is_stmt 1
 295              		.loc 3 155 13 is_stmt 0
 296 00f8 93976700 		slli	a5,a5,6
 297              	.LVL19:
 156:src/../h/../h/../h/MemoryAllocation.hpp ****         for (FreeMem* cur = fmem_head; cur != nullptr; cur=cur->next){ // U DRUGOJ ITERACIJI FMEM_H
 298              		.loc 3 156 9 is_stmt 1
 299              	.LBB112:
 300              		.loc 3 156 23 is_stmt 0
 301 00fc 17070000 		la	a4,_ZN16MemoryAllocation9fmem_headE
 301      03370700 
 302 0104 03370700 		ld	a4,0(a4)
 303              	.LVL20:
 304              	.L7:
 305              		.loc 3 156 44 is_stmt 1
 306 0108 6308070C 		beqz	a4,.L6
 307              	.LBB113:
 157:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 308              		.loc 3 157 13
 309              		.loc 3 157 34 is_stmt 0
 310 010c 97060000 		la	a3,_ZN16MemoryAllocation9fmem_headE
 310      83B60600 
 311 0114 03B60600 		ld	a2,0(a3)
 312 0118 03360600 		ld	a2,0(a2)
 313              		.loc 3 157 22
 314 011c 2330C700 		sd	a2,0(a4)
 158:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->prev=fmem_head->prev;
 315              		.loc 3 158 13 is_stmt 1
 316              		.loc 3 158 34 is_stmt 0
 317 0120 83B60600 		ld	a3,0(a3)
 318 0124 83B58600 		ld	a1,8(a3)
 319              		.loc 3 158 22
 320 0128 2334B700 		sd	a1,8(a4)
 159:src/../h/../h/../h/MemoryAllocation.hpp ****             if (cur->size<size) continue;
 321              		.loc 3 159 13 is_stmt 1
 322              		.loc 3 159 22 is_stmt 0
 323 012c 83360701 		ld	a3,16(a4)
 324              		.loc 3 159 13
 325 0130 63E6F602 		bgtu	a5,a3,.L31
 160:src/../h/../h/../h/MemoryAllocation.hpp ****             if (cur->size-size<=sizeof(FreeMem)){
GAS LISTING /tmp/ccf5Rp5d.s 			page 14


 326              		.loc 3 160 13 is_stmt 1
 327              	.LBB114:
 328              		.loc 3 160 26 is_stmt 0
 329 0134 B386F640 		sub	a3,a3,a5
 330              		.loc 3 160 13
 331 0138 13058001 		li	a0,24
 332 013c 636CD502 		bgtu	a3,a0,.L8
 161:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur->prev) cur->prev->next = cur->next;
 333              		.loc 3 161 17 is_stmt 1
 334 0140 63820502 		beqz	a1,.L9
 335              		.loc 3 161 32
 336              		.loc 3 161 48 is_stmt 0
 337 0144 23B0C500 		sd	a2,0(a1)
 338              	.LVL21:
 339              	.L10:
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 163:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur->next) cur->next->prev = cur->prev;
 340              		.loc 3 163 17 is_stmt 1
 341              		.loc 3 163 26 is_stmt 0
 342 0148 83370700 		ld	a5,0(a4)
 343              		.loc 3 163 17
 344 014c 63860708 		beqz	a5,.L6
 345              		.loc 3 163 32 is_stmt 1
 346              		.loc 3 163 55 is_stmt 0
 347 0150 83368700 		ld	a3,8(a4)
 348              		.loc 3 163 48
 349 0154 23B4D700 		sd	a3,8(a5)
 164:src/../h/../h/../h/MemoryAllocation.hpp ****                 return cur;
 350              		.loc 3 164 17 is_stmt 1
 351              		.loc 3 164 24 is_stmt 0
 352 0158 6F000008 		j	.L6
 353              	.LVL22:
 354              	.L31:
 355              	.LBE114:
 356              	.LBE113:
 156:src/../h/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 357              		.loc 3 156 59
 358 015c 13070600 		mv	a4,a2
 359              	.LVL23:
 360 0160 6FF09FFA 		j	.L7
 361              	.LVL24:
 362              	.L9:
 363              	.LBB119:
 364              	.LBB117:
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 365              		.loc 3 162 22 is_stmt 1
 162:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 366              		.loc 3 162 32 is_stmt 0
 367 0164 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 367      83B70700 
 368              	.LVL25:
 369 016c 23B0C700 		sd	a2,0(a5)
 370 0170 6FF09FFD 		j	.L10
 371              	.LVL26:
 372              	.L8:
 373              	.LBB115:
 165:src/../h/../h/../h/MemoryAllocation.hpp ****             }else {
GAS LISTING /tmp/ccf5Rp5d.s 			page 15


 166:src/../h/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newfrgm = (FreeMem*)((char*)cur+size);
 374              		.loc 3 166 17 is_stmt 1
 375              		.loc 3 166 26 is_stmt 0
 376 0174 B306F700 		add	a3,a4,a5
 377              	.LVL27:
 167:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev=nullptr;
 378              		.loc 3 167 17 is_stmt 1
 379              		.loc 3 167 30 is_stmt 0
 380 0178 23B40600 		sd	zero,8(a3)
 168:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next=nullptr;
 381              		.loc 3 168 17 is_stmt 1
 382              		.loc 3 168 30 is_stmt 0
 383 017c 23B00600 		sd	zero,0(a3)
 169:src/../h/../h/../h/MemoryAllocation.hpp ****                 //newfrgm->size=cur->size-size;// DODATO TOKOM PROBE NITI
 170:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->prev) cur->prev->next = newfrgm;
 384              		.loc 3 170 17 is_stmt 1
 385              		.loc 3 170 33 is_stmt 0
 386 0180 03368700 		ld	a2,8(a4)
 387              		.loc 3 170 25
 388 0184 63000606 		beqz	a2,.L12
 389              		.loc 3 170 39 is_stmt 1
 390              		.loc 3 170 55 is_stmt 0
 391 0188 2330D600 		sd	a3,0(a2)
 392              	.L13:
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = newfrgm+sizeof(fmem_head); // ovo sam dodao sizeof da bi mi radio 
 172:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 393              		.loc 3 172 17 is_stmt 1
 394              		.loc 3 172 33 is_stmt 0
 395 018c 03360700 		ld	a2,0(a4)
 396              		.loc 3 172 25
 397 0190 63040600 		beqz	a2,.L14
 398              		.loc 3 172 39 is_stmt 1
 399              		.loc 3 172 55 is_stmt 0
 400 0194 2334D600 		sd	a3,8(a2)
 401              	.L14:
 173:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev = cur->prev;
 402              		.loc 3 173 17 is_stmt 1
 403              		.loc 3 173 38 is_stmt 0
 404 0198 03368700 		ld	a2,8(a4)
 405              		.loc 3 173 31
 406 019c 23B4C600 		sd	a2,8(a3)
 174:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next = cur->next;
 407              		.loc 3 174 17 is_stmt 1
 408              		.loc 3 174 38 is_stmt 0
 409 01a0 83350700 		ld	a1,0(a4)
 410              		.loc 3 174 31
 411 01a4 23B0B600 		sd	a1,0(a3)
 175:src/../h/../h/../h/MemoryAllocation.hpp ****                 newfrgm->size = cur->size-size;
 412              		.loc 3 175 17 is_stmt 1
 413              		.loc 3 175 38 is_stmt 0
 414 01a8 03370701 		ld	a4,16(a4)
 415              	.LVL28:
 416              		.loc 3 175 42
 417 01ac B307F740 		sub	a5,a4,a5
 418              	.LVL29:
 419              		.loc 3 175 31
 420 01b0 23B8F600 		sd	a5,16(a3)
GAS LISTING /tmp/ccf5Rp5d.s 			page 16


 176:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head =newfrgm+sizeof(fmem_head);
 421              		.loc 3 176 17 is_stmt 1
 422              		.loc 3 176 35 is_stmt 0
 423 01b4 1387060C 		addi	a4,a3,192
 424              		.loc 3 176 27
 425 01b8 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 425      83B50500 
 426 01c0 23B0E500 		sd	a4,0(a1)
 177:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->next=newfrgm->next;
 427              		.loc 3 177 17 is_stmt 1
 428              		.loc 3 177 42 is_stmt 0
 429 01c4 83B50600 		ld	a1,0(a3)
 430              		.loc 3 177 32
 431 01c8 23B0B60C 		sd	a1,192(a3)
 178:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->prev=newfrgm->prev;
 432              		.loc 3 178 17 is_stmt 1
 433              		.loc 3 178 32 is_stmt 0
 434 01cc 23B4C60C 		sd	a2,200(a3)
 179:src/../h/../h/../h/MemoryAllocation.hpp ****                 fmem_head->size=newfrgm->size;
 435              		.loc 3 179 17 is_stmt 1
 436              		.loc 3 179 32 is_stmt 0
 437 01d0 23B8F60C 		sd	a5,208(a3)
 180:src/../h/../h/../h/MemoryAllocation.hpp ****                 //fmem_head = (FreeMem*) (char*)newfrgm;
 181:src/../h/../h/../h/MemoryAllocation.hpp ****                 return newfrgm;
 438              		.loc 3 181 17 is_stmt 1
 439              		.loc 3 181 24 is_stmt 0
 440 01d4 13870600 		mv	a4,a3
 441              	.LVL30:
 442              	.L6:
 443              	.LBE115:
 444              	.LBE117:
 445              	.LBE119:
 446              	.LBE112:
 447              	.LBE111:
 448              	.LBE110:
  41:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
 449              		.loc 1 41 13 is_stmt 1
  41:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [pointer] "r"(pointer) );
 450              		.loc 1 41 69 is_stmt 0
 451              	#APP
 452              	# 41 "src/RiscV.cpp" 1
  42:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 453              		mv a1, a4
 454              	# 0 "" 2
 455              		.loc 1 42 13 is_stmt 1
  42:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 456              		.loc 1 42 46 is_stmt 0
 457              	# 42 "src/RiscV.cpp" 1
 458              		sd a1, 88(s0)
 459              	# 0 "" 2
 460              	#NO_APP
 461              	.LBE107:
 462 01e0 6FF01FEE 		j	.L15
 463              	.LVL31:
 464              	.L12:
 465              	.LBB124:
 466              	.LBB123:
GAS LISTING /tmp/ccf5Rp5d.s 			page 17


 467              	.LBB122:
 468              	.LBB121:
 469              	.LBB120:
 470              	.LBB118:
 471              	.LBB116:
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 472              		.loc 3 171 22 is_stmt 1
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 473              		.loc 3 171 41 is_stmt 0
 474 01e4 1386060C 		addi	a2,a3,192
 171:src/../h/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 475              		.loc 3 171 32
 476 01e8 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 476      83B50500 
 477 01f0 23B0C500 		sd	a2,0(a1)
 478 01f4 6FF09FF9 		j	.L13
 479              	.LVL32:
 480              	.L39:
 481              	.LBE116:
 482              	.LBE118:
 483              	.LBE120:
 484              	.LBE121:
 485              	.LBE122:
 486              	.LBE123:
 487              	.LBE124:
 488              	.LBB125:
 489              	.LBB88:
  44:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
 490              		.loc 1 44 13 is_stmt 1
  44:src/RiscV.cpp ****             __asm__ volatile("mv %[ptr], a1" : [ptr] "=r"(ptr)); //promeni ovaj read, undefined ref
 491              		.loc 1 44 64 is_stmt 0
 492              	#APP
 493              	# 44 "src/RiscV.cpp" 1
 494              		mv a5, a1
 495              	# 0 "" 2
 496              	.LVL33:
 497              	#NO_APP
 498 01fc 2334F4FC 		sd	a5,-56(s0)
  45:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
 499              		.loc 1 45 13 is_stmt 1
  45:src/RiscV.cpp ****             int ret=MemoryAllocation::mem_free((void*)ptr);
 500              		.loc 1 45 47 is_stmt 0
 501 0200 033784FC 		ld	a4,-56(s0)
 502              	.LVL34:
 503              	.LBB89:
 504              	.LBB90:
  88:src/../h/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
 505              		.loc 3 88 9 is_stmt 1
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 506              		.loc 3 89 9
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 507              		.loc 3 89 12 is_stmt 0
 508 0204 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 508      83B70700 
 509 020c 83B70700 		ld	a5,0(a5)
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 510              		.loc 3 89 9
GAS LISTING /tmp/ccf5Rp5d.s 			page 18


 511 0210 638E0700 		beqz	a5,.L32
  89:src/../h/../h/../h/MemoryAllocation.hpp ****         {
 512              		.loc 3 89 23
 513 0214 6360F702 		bltu	a4,a5,.L33
 514              	.LVL35:
 515              	.L18:
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 516              		.loc 3 93 52 is_stmt 1
 517 0218 93860700 		mv	a3,a5
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 518              		.loc 3 93 42 is_stmt 0
 519 021c 83B70700 		ld	a5,0(a5)
 520              	.LVL36:
  93:src/../h/../h/../h/MemoryAllocation.hpp ****             }
 521              		.loc 3 93 52
 522 0220 630CF700 		beq	a4,a5,.L17
 523 0224 E3EAE7FE 		bgtu	a4,a5,.L18
 524 0228 6F000001 		j	.L17
 525              	.LVL37:
 526              	.L32:
  91:src/../h/../h/../h/MemoryAllocation.hpp ****         }else {
 527              		.loc 3 91 16
 528 022c 93860700 		mv	a3,a5
 529 0230 6F008000 		j	.L17
 530              	.L33:
 531 0234 93060000 		li	a3,0
 532              	.LVL38:
 533              	.L17:
  95:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
 534              		.loc 3 95 17 is_stmt 1
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
 535              		.loc 3 96 17
  96:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
 536              		.loc 3 96 29 is_stmt 0
 537 0238 23300700 		sd	zero,0(a4)
  97:src/../h/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
 538              		.loc 3 97 17 is_stmt 1
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 539              		.loc 3 98 17
 540              	.LVL39:
 541              	.LBE90:
 542              	.LBE89:
 543              	.LBE88:
 544              	.LBE125:
 545              	.LBE133:
 546              	.LBE137:
 547              	.LBE144:
  69:src/../h/../h/../h/MemoryAllocation.hpp ****     }
 548              		.loc 3 69 9
 549              	.LBB145:
 550              	.LBB138:
 551              	.LBB134:
 552              	.LBB126:
 553              	.LBB103:
 554              	.LBB101:
 555              	.LBB99:
  98:src/../h/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
GAS LISTING /tmp/ccf5Rp5d.s 			page 19


 556              		.loc 3 98 29 is_stmt 0
 557 023c 93070004 		li	a5,64
 558 0240 2338F700 		sd	a5,16(a4)
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 559              		.loc 3 100 17 is_stmt 1
 100:src/../h/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 560              		.loc 3 100 29 is_stmt 0
 561 0244 2334D700 		sd	a3,8(a4)
 101:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 562              		.loc 3 101 17 is_stmt 1
 563 0248 63820606 		beqz	a3,.L19
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 564              		.loc 3 102 21
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 565              		.loc 3 102 41 is_stmt 0
 566 024c 83B70600 		ld	a5,0(a3)
 102:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 567              		.loc 3 102 34
 568 0250 2330F700 		sd	a5,0(a4)
 569              	.L20:
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 570              		.loc 3 107 17 is_stmt 1
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 571              		.loc 3 107 28 is_stmt 0
 572 0254 83370700 		ld	a5,0(a4)
 107:src/../h/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 573              		.loc 3 107 17
 574 0258 63840700 		beqz	a5,.L21
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 575              		.loc 3 108 21 is_stmt 1
 108:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 576              		.loc 3 108 39 is_stmt 0
 577 025c 23B4E700 		sd	a4,8(a5)
 578              	.L21:
 110:src/../h/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 579              		.loc 3 110 17 is_stmt 1
 580 0260 63800606 		beqz	a3,.L22
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 581              		.loc 3 111 21
 111:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 582              		.loc 3 111 31 is_stmt 0
 583 0264 23B0E600 		sd	a4,0(a3)
 584              	.L23:
 117:src/../h/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 585              		.loc 3 117 13 is_stmt 1
 586              	.LVL40:
 587              	.LBB91:
 588              	.LBB92:
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
 589              		.loc 3 75 9
 590 0268 630C0700 		beqz	a4,.L24
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 591              		.loc 3 76 9
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 592              		.loc 3 76 19 is_stmt 0
 593 026c 83370700 		ld	a5,0(a4)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
GAS LISTING /tmp/ccf5Rp5d.s 			page 20


 594              		.loc 3 76 9
 595 0270 63880700 		beqz	a5,.L24
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 596              		.loc 3 76 45
 597 0274 03360701 		ld	a2,16(a4)
 598              	.LVL41:
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 599              		.loc 3 76 38
 600 0278 B305C700 		add	a1,a4,a2
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 601              		.loc 3 76 24
 602 027c 638AB704 		beq	a5,a1,.L43
 603              	.L24:
 604              	.LVL42:
 605              	.LBE92:
 606              	.LBE91:
 118:src/../h/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 607              		.loc 3 118 13 is_stmt 1
 608              	.LBB94:
 609              	.LBB95:
  75:src/../h/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
 610              		.loc 3 75 9
 611 0280 638C0600 		beqz	a3,.L25
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 612              		.loc 3 76 9
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 613              		.loc 3 76 19 is_stmt 0
 614 0284 83B70600 		ld	a5,0(a3)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 615              		.loc 3 76 9
 616 0288 63880700 		beqz	a5,.L25
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 617              		.loc 3 76 45
 618 028c 03B60601 		ld	a2,16(a3)
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 619              		.loc 3 76 38
 620 0290 B385C600 		add	a1,a3,a2
  76:src/../h/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
 621              		.loc 3 76 24
 622 0294 638EB704 		beq	a5,a1,.L44
 623              	.L25:
 624              	.LVL43:
 625              	.LBE95:
 626              	.LBE94:
 120:src/../h/../h/../h/MemoryAllocation.hpp ****                 return -1;
 627              		.loc 3 120 13 is_stmt 1
 628 0298 630C0706 		beqz	a4,.L45
 122:src/../h/../h/../h/MemoryAllocation.hpp **** 
 629              		.loc 3 122 26 is_stmt 0
 630 029c 93070000 		li	a5,0
 631              	.L26:
 632              	.LVL44:
 633              	.LBE99:
 634              	.LBE101:
  46:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
 635              		.loc 1 46 13 is_stmt 1
  46:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret] "r"(ret));
GAS LISTING /tmp/ccf5Rp5d.s 			page 21


 636              		.loc 1 46 60 is_stmt 0
 637              	#APP
 638              	# 46 "src/RiscV.cpp" 1
  47:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
 639              		mv a1, a5
 640              	# 0 "" 2
 641              		.loc 1 47 13 is_stmt 1
  47:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)"); //zasto je ovde bas 88
 642              		.loc 1 47 46 is_stmt 0
 643              	# 47 "src/RiscV.cpp" 1
 644              		sd a1, 88(s0)
 645              	# 0 "" 2
 646              	#NO_APP
 647              	.LBE103:
 648 02a8 6FF09FE1 		j	.L15
 649              	.LVL45:
 650              	.L19:
 651              	.LBB104:
 652              	.LBB102:
 653              	.LBB100:
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 654              		.loc 3 105 21 is_stmt 1
 105:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 655              		.loc 3 105 34 is_stmt 0
 656 02ac 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 656      83B70700 
 657 02b4 83B70700 		ld	a5,0(a5)
 658 02b8 2330F700 		sd	a5,0(a4)
 659 02bc 6FF09FF9 		j	.L20
 660              	.L22:
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 661              		.loc 3 114 21 is_stmt 1
 114:src/../h/../h/../h/MemoryAllocation.hpp ****                 }
 662              		.loc 3 114 31 is_stmt 0
 663 02c0 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
 663      83B70700 
 664 02c8 23B0E700 		sd	a4,0(a5)
 665 02cc 6FF0DFF9 		j	.L23
 666              	.LVL46:
 667              	.L43:
 668              	.LBB97:
 669              	.LBB93:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 670              		.loc 3 78 13 is_stmt 1
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 671              		.loc 3 78 39 is_stmt 0
 672 02d0 83B50701 		ld	a1,16(a5)
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 673              		.loc 3 78 24
 674 02d4 3306B600 		add	a2,a2,a1
 675 02d8 2338C700 		sd	a2,16(a4)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 676              		.loc 3 79 13 is_stmt 1
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 677              		.loc 3 79 38 is_stmt 0
 678 02dc 83B70700 		ld	a5,0(a5)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
GAS LISTING /tmp/ccf5Rp5d.s 			page 22


 679              		.loc 3 79 24
 680 02e0 2330F700 		sd	a5,0(a4)
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 681              		.loc 3 80 13 is_stmt 1
 682 02e4 E38E07F8 		beqz	a5,.L24
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 683              		.loc 3 80 29
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 684              		.loc 3 80 46 is_stmt 0
 685 02e8 23B4E700 		sd	a4,8(a5)
 686 02ec 6FF05FF9 		j	.L24
 687              	.LVL47:
 688              	.L44:
 689              	.LBE93:
 690              	.LBE97:
 691              	.LBB98:
 692              	.LBB96:
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 693              		.loc 3 78 13 is_stmt 1
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 694              		.loc 3 78 39 is_stmt 0
 695 02f0 83B50701 		ld	a1,16(a5)
  78:src/../h/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
 696              		.loc 3 78 24
 697 02f4 3306B600 		add	a2,a2,a1
 698 02f8 23B8C600 		sd	a2,16(a3)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 699              		.loc 3 79 13 is_stmt 1
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 700              		.loc 3 79 38 is_stmt 0
 701 02fc 83B70700 		ld	a5,0(a5)
  79:src/../h/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
 702              		.loc 3 79 24
 703 0300 23B0F600 		sd	a5,0(a3)
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 704              		.loc 3 80 13 is_stmt 1
 705 0304 E38A07F8 		beqz	a5,.L25
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 706              		.loc 3 80 29
  80:src/../h/../h/../h/MemoryAllocation.hpp ****             return;
 707              		.loc 3 80 46 is_stmt 0
 708 0308 23B4D700 		sd	a3,8(a5)
 709 030c 6FF0DFF8 		j	.L25
 710              	.LVL48:
 711              	.L45:
 712              	.LBE96:
 713              	.LBE98:
 121:src/../h/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 714              		.loc 3 121 25
 715 0310 9307F0FF 		li	a5,-1
 716 0314 6FF0DFF8 		j	.L26
 717              	.LVL49:
 718              	.L40:
 719              	.LBE100:
 720              	.LBE102:
 721              	.LBE104:
 722              	.LBB105:
GAS LISTING /tmp/ccf5Rp5d.s 			page 23


 723              	.LBB83:
  49:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg)
 724              		.loc 1 49 13 is_stmt 1
  49:src/RiscV.cpp ****             int ret_val=TCB::createThread((TCB::Body)start_routine, (thread_t*) handle, (void*)arg)
 725              		.loc 1 49 42 is_stmt 0
 726 0318 033584FD 		ld	a0,-40(s0)
 727 031c 833504FE 		ld	a1,-32(s0)
 728 0320 033604FD 		ld	a2,-48(s0)
 729              	.LVL50:
 730 0324 97000000 		call	_ZN3TCB12createThreadEPFvPvEPPS_S0_@plt
 730      E7800000 
 731              	.LVL51:
  50:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 732              		.loc 1 50 13 is_stmt 1
  50:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_val] "r"(ret_val));
 733              		.loc 1 50 68 is_stmt 0
 734              	#APP
 735              	# 50 "src/RiscV.cpp" 1
  51:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 736              		mv a1, a0
 737              	# 0 "" 2
 738              		.loc 1 51 13 is_stmt 1
  51:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 739              		.loc 1 51 46 is_stmt 0
 740              	# 51 "src/RiscV.cpp" 1
 741              		sd a1, 88(s0)
 742              	# 0 "" 2
 743              	#NO_APP
 744              	.LBE83:
 745 0334 6FF0DFD8 		j	.L15
 746              	.LVL52:
 747              	.L41:
  53:src/RiscV.cpp ****             ret_value_thr_exit=TCB::thread_exit();
 748              		.loc 1 53 13 is_stmt 1
 749              	.LBB84:
 750              	.LBB85:
 751              		.file 4 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by os on 8/14/22.
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   6:src/../h/tcb.hpp **** #define PROJECT_BASE_TCB_HPP
   7:src/../h/tcb.hpp **** #include "../lib/hw.h"
   8:src/../h/tcb.hpp **** #include "../h/Scheduler.hpp"
   9:src/../h/tcb.hpp **** #include "../h/MemoryAllocation.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** class TCB {
  12:src/../h/tcb.hpp **** 
  13:src/../h/tcb.hpp **** public:
  14:src/../h/tcb.hpp ****     void* operator new(uint64 n){//promenjeno uint64 u size_t
  15:src/../h/tcb.hpp ****         return MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(n)); //njemu je samo __m
  16:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  17:src/../h/tcb.hpp ****     }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void* operator new[](uint64 n){
  20:src/../h/tcb.hpp ****         return MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(n));
GAS LISTING /tmp/ccf5Rp5d.s 			page 24


  21:src/../h/tcb.hpp ****         //return __mem_alloc(n);
  22:src/../h/tcb.hpp ****     }
  23:src/../h/tcb.hpp **** 
  24:src/../h/tcb.hpp ****     void operator delete(void *p) noexcept {
  25:src/../h/tcb.hpp ****         MemoryAllocation::mem_free(p);
  26:src/../h/tcb.hpp ****         //__mem_free(p);
  27:src/../h/tcb.hpp ****     }
  28:src/../h/tcb.hpp **** 
  29:src/../h/tcb.hpp ****     void operator delete[] (void *p) noexcept{
  30:src/../h/tcb.hpp ****         MemoryAllocation::mem_free(p);
  31:src/../h/tcb.hpp ****         //__mem_free(p);
  32:src/../h/tcb.hpp ****     }
  33:src/../h/tcb.hpp **** 
  34:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  35:src/../h/tcb.hpp **** 
  36:src/../h/tcb.hpp ****     using Body = void (*)(void*); //mislim da mora da se promeni ovaj body sa nekim argumentima, i 
  37:src/../h/tcb.hpp **** 
  38:src/../h/tcb.hpp ****     static int createThread(Body body, TCB** handle, void* arguments);
  39:src/../h/tcb.hpp **** 
  40:src/../h/tcb.hpp ****     static void thread_dispatch(){dispatch();}
  41:src/../h/tcb.hpp **** 
  42:src/../h/tcb.hpp ****     static int thread_exit(){
  43:src/../h/tcb.hpp ****         running->setFinished(true);
 752              		.loc 4 43 9
 753              		.loc 4 43 29 is_stmt 0
 754 0338 93051000 		li	a1,1
 755 033c 97070000 		la	a5,_ZN3TCB7runningE
 755      83B70700 
 756              	.LVL53:
 757 0344 03B50700 		ld	a0,0(a5)
 758 0348 97000000 		call	_ZN3TCB11setFinishedEb@plt
 758      E7800000 
 759              	.LVL54:
  44:src/../h/tcb.hpp ****         dispatch();
 760              		.loc 4 44 9 is_stmt 1
 761              		.loc 4 44 17 is_stmt 0
 762 0350 97000000 		call	_ZN3TCB8dispatchEv@plt
 762      E7800000 
 763              	.LVL55:
  45:src/../h/tcb.hpp ****         //running nullptr->negativna
  46:src/../h/tcb.hpp ****         return 0;
 764              		.loc 4 46 9 is_stmt 1
 765              	.LBE85:
 766              	.LBE84:
  54:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
 767              		.loc 1 54 13
  54:src/RiscV.cpp ****             __asm__ volatile("mv a1, %0": : [ret_value_thr_exit] "r"(ret_value_thr_exit) );
 768              		.loc 1 54 91 is_stmt 0
 769 0358 93070000 		li	a5,0
 770              	#APP
 771              	# 54 "src/RiscV.cpp" 1
  55:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 772              		mv a1, a5
 773              	# 0 "" 2
 774              		.loc 1 55 13 is_stmt 1
  55:src/RiscV.cpp ****             __asm__ volatile("sd a1, 88(s0)");
 775              		.loc 1 55 46 is_stmt 0
GAS LISTING /tmp/ccf5Rp5d.s 			page 25


 776              	# 55 "src/RiscV.cpp" 1
 777              		sd a1, 88(s0)
 778              	# 0 "" 2
 779              	#NO_APP
 780 0364 6FF0DFD5 		j	.L15
 781              	.LVL56:
 782              	.L42:
  57:src/RiscV.cpp ****             TCB::thread_dispatch();
 783              		.loc 1 57 13 is_stmt 1
 784              	.LBB86:
 785              	.LBB87:
  40:src/../h/tcb.hpp **** 
 786              		.loc 4 40 35
  40:src/../h/tcb.hpp **** 
 787              		.loc 4 40 43 is_stmt 0
 788 0368 97000000 		call	_ZN3TCB8dispatchEv@plt
 788      E7800000 
 789              	.LVL57:
  40:src/../h/tcb.hpp **** 
 790              		.loc 4 40 46
 791 0370 6FF01FD5 		j	.L15
 792              	.LVL58:
 793              	.L37:
 794              	.LBE87:
 795              	.LBE86:
 796              	.LBE105:
 797              	.LBE126:
 798              	.LBE134:
 799              	.LBE138:
  67:src/RiscV.cpp ****         mc_sip(SIP_SSIP);
 800              		.loc 1 67 9 is_stmt 1
 801              	.LBB139:
 802              	.LBB140:
 134:src/../h/RiscV.hpp **** }
 803              		.loc 2 134 5
 134:src/../h/RiscV.hpp **** }
 804              		.loc 2 134 63 is_stmt 0
 805 0374 93072000 		li	a5,2
 806              	#APP
 807              	# 134 "src/../h/RiscV.hpp" 1
 135:src/../h/RiscV.hpp **** 
 808              		csrc sip, a5
 809              	# 0 "" 2
 810              		.loc 2 135 1
 811              	#NO_APP
 812 037c 6FF05FD5 		j	.L3
 813              	.LBE140:
 814              	.LBE139:
 815              	.LBE145:
 816              		.cfi_endproc
 817              	.LFE45:
 819              	.Letext0:
 820              		.file 5 "src/../h/../lib/hw.h"
 821              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccf5Rp5d.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 RiscV.cpp
     /tmp/ccf5Rp5d.s:9      .text:0000000000000000 _ZN5RiscV10popSppSpieEv
     /tmp/ccf5Rp5d.s:13     .text:0000000000000000 .L0 
     /tmp/ccf5Rp5d.s:14     .text:0000000000000000 .L0 
     /tmp/ccf5Rp5d.s:15     .text:0000000000000004 .L0 
     /tmp/ccf5Rp5d.s:17     .text:0000000000000008 .L0 
     /tmp/ccf5Rp5d.s:19     .text:000000000000000c .L0 
     /tmp/ccf5Rp5d.s:21     .text:000000000000000c .L0 
       src/RiscV.cpp:13     .text:000000000000000c .L0 
     /tmp/ccf5Rp5d.s:27     .text:0000000000000010 .L0 
       src/RiscV.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccf5Rp5d.s:33     .text:0000000000000014 .L0 
     /tmp/ccf5Rp5d.s:34     .text:0000000000000018 .L0 
     /tmp/ccf5Rp5d.s:35     .text:0000000000000018 .L0 
     /tmp/ccf5Rp5d.s:37     .text:000000000000001c .L0 
     /tmp/ccf5Rp5d.s:39     .text:0000000000000020 .L0 
     /tmp/ccf5Rp5d.s:45     .text:0000000000000020 _ZN5RiscV20handleSupervisorTrapEv
     /tmp/ccf5Rp5d.s:48     .text:0000000000000020 .L0 
     /tmp/ccf5Rp5d.s:49     .text:0000000000000020 .L0 
     /tmp/ccf5Rp5d.s:50     .text:0000000000000024 .L0 
     /tmp/ccf5Rp5d.s:53     .text:000000000000002c .L0 
     /tmp/ccf5Rp5d.s:54     .text:000000000000002c .L0 
     /tmp/ccf5Rp5d.s:56     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:58     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:59     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:60     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:61     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:62     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:63     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:64     .text:0000000000000030 .L0 
       src/RiscV.cpp:25     .text:0000000000000030 .L0 
     /tmp/ccf5Rp5d.s:70     .text:0000000000000034 .L0 
       src/RiscV.cpp:26     .text:0000000000000034 .L0 
     /tmp/ccf5Rp5d.s:75     .text:0000000000000038 .L0 
       src/RiscV.cpp:27     .text:0000000000000038 .L0 
     /tmp/ccf5Rp5d.s:80     .text:000000000000003c .L0 
     /tmp/ccf5Rp5d.s:81     .text:000000000000003c .L0 
     /tmp/ccf5Rp5d.s:86     .text:000000000000003c .L0 
     /tmp/ccf5Rp5d.s:87     .text:000000000000003c .L0 
     /tmp/ccf5Rp5d.s:88     .text:000000000000003c .L0 
  src/../h/RiscV.hpp:89     .text:000000000000003c .L0 
     /tmp/ccf5Rp5d.s:96     .text:0000000000000044 .L0 
     /tmp/ccf5Rp5d.s:97     .text:0000000000000044 .L0 
     /tmp/ccf5Rp5d.s:104    .text:0000000000000048 .L0 
     /tmp/ccf5Rp5d.s:105    .text:0000000000000048 .L0 
     /tmp/ccf5Rp5d.s:106    .text:0000000000000048 .L0 
  src/../h/RiscV.hpp:101    .text:0000000000000048 .L0 
     /tmp/ccf5Rp5d.s:116    .text:000000000000004c .L0 
     /tmp/ccf5Rp5d.s:117    .text:000000000000004c .L0 
     /tmp/ccf5Rp5d.s:119    .text:0000000000000050 .L0 
     /tmp/ccf5Rp5d.s:123    .text:0000000000000054 .L0 
     /tmp/ccf5Rp5d.s:124    .text:0000000000000054 .L0 
     /tmp/ccf5Rp5d.s:125    .text:0000000000000054 .L0 
  src/../h/RiscV.hpp:157    .text:0000000000000054 .L0 
     /tmp/ccf5Rp5d.s:135    .text:0000000000000058 .L0 
     /tmp/ccf5Rp5d.s:136    .text:0000000000000058 .L0 
GAS LISTING /tmp/ccf5Rp5d.s 			page 27


     /tmp/ccf5Rp5d.s:138    .text:000000000000005c .L0 
       src/RiscV.cpp:35     .text:000000000000005c .L0 
     /tmp/ccf5Rp5d.s:147    .text:0000000000000060 .L0 
     /tmp/ccf5Rp5d.s:148    .text:0000000000000060 .L0 
     /tmp/ccf5Rp5d.s:150    .text:0000000000000064 .L0 
     /tmp/ccf5Rp5d.s:153    .text:000000000000006c .L0 
     /tmp/ccf5Rp5d.s:159    .text:000000000000007c .L0 
     /tmp/ccf5Rp5d.s:164    .text:000000000000008c .L0 
     /tmp/ccf5Rp5d.s:165    .text:000000000000008c .L0 
     /tmp/ccf5Rp5d.s:169    .text:0000000000000094 .L0 
     /tmp/ccf5Rp5d.s:176    .text:0000000000000098 .L0 
     /tmp/ccf5Rp5d.s:187    .text:00000000000000a0 .L0 
     /tmp/ccf5Rp5d.s:199    .text:00000000000000a8 .L0 
     /tmp/ccf5Rp5d.s:202    .text:00000000000000b0 .L0 
     /tmp/ccf5Rp5d.s:205    .text:00000000000000b8 .L0 
     /tmp/ccf5Rp5d.s:213    .text:00000000000000c0 .L0 
     /tmp/ccf5Rp5d.s:214    .text:00000000000000c0 .L0 
     /tmp/ccf5Rp5d.s:219    .text:00000000000000c4 .L0 
  src/../h/RiscV.hpp:162    .text:00000000000000c4 .L0 
     /tmp/ccf5Rp5d.s:229    .text:00000000000000c8 .L0 
     /tmp/ccf5Rp5d.s:230    .text:00000000000000c8 .L0 
     /tmp/ccf5Rp5d.s:235    .text:00000000000000cc .L0 
  src/../h/RiscV.hpp:106    .text:00000000000000cc .L0 
     /tmp/ccf5Rp5d.s:248    .text:00000000000000d0 .L0 
     /tmp/ccf5Rp5d.s:249    .text:00000000000000d4 .L0 
     /tmp/ccf5Rp5d.s:250    .text:00000000000000d4 .L0 
     /tmp/ccf5Rp5d.s:252    .text:00000000000000d8 .L0 
     /tmp/ccf5Rp5d.s:253    .text:00000000000000d8 .L0 
     /tmp/ccf5Rp5d.s:255    .text:00000000000000dc .L0 
     /tmp/ccf5Rp5d.s:259    .text:00000000000000e0 .L0 
     /tmp/ccf5Rp5d.s:265    .text:00000000000000e0 .L0 
       src/RiscV.cpp:38     .text:00000000000000e0 .L0 
     /tmp/ccf5Rp5d.s:274    .text:00000000000000e8 .L0 
     /tmp/ccf5Rp5d.s:275    .text:00000000000000e8 .L0 
     /tmp/ccf5Rp5d.s:281    .text:00000000000000ec .L0 
     /tmp/ccf5Rp5d.s:282    .text:00000000000000ec .L0 
     /tmp/ccf5Rp5d.s:285    .text:00000000000000f0 .L0 
     /tmp/ccf5Rp5d.s:288    .text:00000000000000f4 .L0 
     /tmp/ccf5Rp5d.s:295    .text:00000000000000f8 .L0 
     /tmp/ccf5Rp5d.s:296    .text:00000000000000f8 .L0 
     /tmp/ccf5Rp5d.s:300    .text:00000000000000fc .L0 
     /tmp/ccf5Rp5d.s:301    .text:00000000000000fc .L0 
     /tmp/ccf5Rp5d.s:306    .text:0000000000000108 .L0 
     /tmp/ccf5Rp5d.s:309    .text:000000000000010c .L0 
     /tmp/ccf5Rp5d.s:310    .text:000000000000010c .L0 
     /tmp/ccf5Rp5d.s:314    .text:000000000000011c .L0 
     /tmp/ccf5Rp5d.s:316    .text:0000000000000120 .L0 
     /tmp/ccf5Rp5d.s:317    .text:0000000000000120 .L0 
     /tmp/ccf5Rp5d.s:320    .text:0000000000000128 .L0 
     /tmp/ccf5Rp5d.s:322    .text:000000000000012c .L0 
     /tmp/ccf5Rp5d.s:323    .text:000000000000012c .L0 
     /tmp/ccf5Rp5d.s:325    .text:0000000000000130 .L0 
     /tmp/ccf5Rp5d.s:328    .text:0000000000000134 .L0 
     /tmp/ccf5Rp5d.s:329    .text:0000000000000134 .L0 
     /tmp/ccf5Rp5d.s:331    .text:0000000000000138 .L0 
     /tmp/ccf5Rp5d.s:334    .text:0000000000000140 .L0 
     /tmp/ccf5Rp5d.s:336    .text:0000000000000144 .L0 
GAS LISTING /tmp/ccf5Rp5d.s 			page 28


     /tmp/ccf5Rp5d.s:337    .text:0000000000000144 .L0 
     /tmp/ccf5Rp5d.s:341    .text:0000000000000148 .L0 
     /tmp/ccf5Rp5d.s:342    .text:0000000000000148 .L0 
     /tmp/ccf5Rp5d.s:344    .text:000000000000014c .L0 
     /tmp/ccf5Rp5d.s:346    .text:0000000000000150 .L0 
     /tmp/ccf5Rp5d.s:347    .text:0000000000000150 .L0 
     /tmp/ccf5Rp5d.s:349    .text:0000000000000154 .L0 
     /tmp/ccf5Rp5d.s:351    .text:0000000000000158 .L0 
     /tmp/ccf5Rp5d.s:352    .text:0000000000000158 .L0 
     /tmp/ccf5Rp5d.s:358    .text:000000000000015c .L0 
     /tmp/ccf5Rp5d.s:366    .text:0000000000000164 .L0 
     /tmp/ccf5Rp5d.s:367    .text:0000000000000164 .L0 
     /tmp/ccf5Rp5d.s:375    .text:0000000000000174 .L0 
     /tmp/ccf5Rp5d.s:376    .text:0000000000000174 .L0 
     /tmp/ccf5Rp5d.s:379    .text:0000000000000178 .L0 
     /tmp/ccf5Rp5d.s:380    .text:0000000000000178 .L0 
     /tmp/ccf5Rp5d.s:382    .text:000000000000017c .L0 
     /tmp/ccf5Rp5d.s:383    .text:000000000000017c .L0 
     /tmp/ccf5Rp5d.s:385    .text:0000000000000180 .L0 
     /tmp/ccf5Rp5d.s:386    .text:0000000000000180 .L0 
     /tmp/ccf5Rp5d.s:388    .text:0000000000000184 .L0 
     /tmp/ccf5Rp5d.s:390    .text:0000000000000188 .L0 
     /tmp/ccf5Rp5d.s:391    .text:0000000000000188 .L0 
     /tmp/ccf5Rp5d.s:394    .text:000000000000018c .L0 
     /tmp/ccf5Rp5d.s:395    .text:000000000000018c .L0 
     /tmp/ccf5Rp5d.s:397    .text:0000000000000190 .L0 
     /tmp/ccf5Rp5d.s:399    .text:0000000000000194 .L0 
     /tmp/ccf5Rp5d.s:400    .text:0000000000000194 .L0 
     /tmp/ccf5Rp5d.s:403    .text:0000000000000198 .L0 
     /tmp/ccf5Rp5d.s:404    .text:0000000000000198 .L0 
     /tmp/ccf5Rp5d.s:406    .text:000000000000019c .L0 
     /tmp/ccf5Rp5d.s:408    .text:00000000000001a0 .L0 
     /tmp/ccf5Rp5d.s:409    .text:00000000000001a0 .L0 
     /tmp/ccf5Rp5d.s:411    .text:00000000000001a4 .L0 
     /tmp/ccf5Rp5d.s:413    .text:00000000000001a8 .L0 
     /tmp/ccf5Rp5d.s:414    .text:00000000000001a8 .L0 
     /tmp/ccf5Rp5d.s:417    .text:00000000000001ac .L0 
     /tmp/ccf5Rp5d.s:420    .text:00000000000001b0 .L0 
     /tmp/ccf5Rp5d.s:422    .text:00000000000001b4 .L0 
     /tmp/ccf5Rp5d.s:423    .text:00000000000001b4 .L0 
     /tmp/ccf5Rp5d.s:425    .text:00000000000001b8 .L0 
     /tmp/ccf5Rp5d.s:428    .text:00000000000001c4 .L0 
     /tmp/ccf5Rp5d.s:429    .text:00000000000001c4 .L0 
     /tmp/ccf5Rp5d.s:431    .text:00000000000001c8 .L0 
     /tmp/ccf5Rp5d.s:433    .text:00000000000001cc .L0 
     /tmp/ccf5Rp5d.s:434    .text:00000000000001cc .L0 
     /tmp/ccf5Rp5d.s:436    .text:00000000000001d0 .L0 
     /tmp/ccf5Rp5d.s:437    .text:00000000000001d0 .L0 
     /tmp/ccf5Rp5d.s:439    .text:00000000000001d4 .L0 
     /tmp/ccf5Rp5d.s:440    .text:00000000000001d4 .L0 
     /tmp/ccf5Rp5d.s:450    .text:00000000000001d8 .L0 
       src/RiscV.cpp:41     .text:00000000000001d8 .L0 
     /tmp/ccf5Rp5d.s:456    .text:00000000000001dc .L0 
       src/RiscV.cpp:42     .text:00000000000001dc .L0 
     /tmp/ccf5Rp5d.s:473    .text:00000000000001e4 .L0 
     /tmp/ccf5Rp5d.s:474    .text:00000000000001e4 .L0 
     /tmp/ccf5Rp5d.s:476    .text:00000000000001e8 .L0 
GAS LISTING /tmp/ccf5Rp5d.s 			page 29


     /tmp/ccf5Rp5d.s:491    .text:00000000000001f8 .L0 
       src/RiscV.cpp:44     .text:00000000000001f8 .L0 
     /tmp/ccf5Rp5d.s:500    .text:0000000000000200 .L0 
     /tmp/ccf5Rp5d.s:501    .text:0000000000000200 .L0 
     /tmp/ccf5Rp5d.s:506    .text:0000000000000204 .L0 
     /tmp/ccf5Rp5d.s:507    .text:0000000000000204 .L0 
     /tmp/ccf5Rp5d.s:508    .text:0000000000000204 .L0 
     /tmp/ccf5Rp5d.s:511    .text:0000000000000210 .L0 
     /tmp/ccf5Rp5d.s:513    .text:0000000000000214 .L0 
     /tmp/ccf5Rp5d.s:517    .text:0000000000000218 .L0 
     /tmp/ccf5Rp5d.s:519    .text:000000000000021c .L0 
     /tmp/ccf5Rp5d.s:522    .text:0000000000000220 .L0 
     /tmp/ccf5Rp5d.s:528    .text:000000000000022c .L0 
     /tmp/ccf5Rp5d.s:535    .text:0000000000000238 .L0 
     /tmp/ccf5Rp5d.s:536    .text:0000000000000238 .L0 
     /tmp/ccf5Rp5d.s:537    .text:0000000000000238 .L0 
     /tmp/ccf5Rp5d.s:539    .text:000000000000023c .L0 
     /tmp/ccf5Rp5d.s:548    .text:000000000000023c .L0 
     /tmp/ccf5Rp5d.s:556    .text:000000000000023c .L0 
     /tmp/ccf5Rp5d.s:557    .text:000000000000023c .L0 
     /tmp/ccf5Rp5d.s:560    .text:0000000000000244 .L0 
     /tmp/ccf5Rp5d.s:561    .text:0000000000000244 .L0 
     /tmp/ccf5Rp5d.s:563    .text:0000000000000248 .L0 
     /tmp/ccf5Rp5d.s:565    .text:000000000000024c .L0 
     /tmp/ccf5Rp5d.s:566    .text:000000000000024c .L0 
     /tmp/ccf5Rp5d.s:568    .text:0000000000000250 .L0 
     /tmp/ccf5Rp5d.s:571    .text:0000000000000254 .L0 
     /tmp/ccf5Rp5d.s:572    .text:0000000000000254 .L0 
     /tmp/ccf5Rp5d.s:574    .text:0000000000000258 .L0 
     /tmp/ccf5Rp5d.s:576    .text:000000000000025c .L0 
     /tmp/ccf5Rp5d.s:577    .text:000000000000025c .L0 
     /tmp/ccf5Rp5d.s:580    .text:0000000000000260 .L0 
     /tmp/ccf5Rp5d.s:582    .text:0000000000000264 .L0 
     /tmp/ccf5Rp5d.s:583    .text:0000000000000264 .L0 
     /tmp/ccf5Rp5d.s:589    .text:0000000000000268 .L0 
     /tmp/ccf5Rp5d.s:590    .text:0000000000000268 .L0 
     /tmp/ccf5Rp5d.s:592    .text:000000000000026c .L0 
     /tmp/ccf5Rp5d.s:593    .text:000000000000026c .L0 
     /tmp/ccf5Rp5d.s:595    .text:0000000000000270 .L0 
     /tmp/ccf5Rp5d.s:597    .text:0000000000000274 .L0 
     /tmp/ccf5Rp5d.s:600    .text:0000000000000278 .L0 
     /tmp/ccf5Rp5d.s:602    .text:000000000000027c .L0 
     /tmp/ccf5Rp5d.s:610    .text:0000000000000280 .L0 
     /tmp/ccf5Rp5d.s:611    .text:0000000000000280 .L0 
     /tmp/ccf5Rp5d.s:613    .text:0000000000000284 .L0 
     /tmp/ccf5Rp5d.s:614    .text:0000000000000284 .L0 
     /tmp/ccf5Rp5d.s:616    .text:0000000000000288 .L0 
     /tmp/ccf5Rp5d.s:618    .text:000000000000028c .L0 
     /tmp/ccf5Rp5d.s:620    .text:0000000000000290 .L0 
     /tmp/ccf5Rp5d.s:622    .text:0000000000000294 .L0 
     /tmp/ccf5Rp5d.s:628    .text:0000000000000298 .L0 
     /tmp/ccf5Rp5d.s:630    .text:000000000000029c .L0 
     /tmp/ccf5Rp5d.s:636    .text:00000000000002a0 .L0 
       src/RiscV.cpp:46     .text:00000000000002a0 .L0 
     /tmp/ccf5Rp5d.s:642    .text:00000000000002a4 .L0 
       src/RiscV.cpp:47     .text:00000000000002a4 .L0 
     /tmp/ccf5Rp5d.s:655    .text:00000000000002ac .L0 
GAS LISTING /tmp/ccf5Rp5d.s 			page 30


     /tmp/ccf5Rp5d.s:656    .text:00000000000002ac .L0 
     /tmp/ccf5Rp5d.s:662    .text:00000000000002c0 .L0 
     /tmp/ccf5Rp5d.s:663    .text:00000000000002c0 .L0 
     /tmp/ccf5Rp5d.s:671    .text:00000000000002d0 .L0 
     /tmp/ccf5Rp5d.s:672    .text:00000000000002d0 .L0 
     /tmp/ccf5Rp5d.s:674    .text:00000000000002d4 .L0 
     /tmp/ccf5Rp5d.s:677    .text:00000000000002dc .L0 
     /tmp/ccf5Rp5d.s:678    .text:00000000000002dc .L0 
     /tmp/ccf5Rp5d.s:680    .text:00000000000002e0 .L0 
     /tmp/ccf5Rp5d.s:682    .text:00000000000002e4 .L0 
     /tmp/ccf5Rp5d.s:684    .text:00000000000002e8 .L0 
     /tmp/ccf5Rp5d.s:685    .text:00000000000002e8 .L0 
     /tmp/ccf5Rp5d.s:694    .text:00000000000002f0 .L0 
     /tmp/ccf5Rp5d.s:695    .text:00000000000002f0 .L0 
     /tmp/ccf5Rp5d.s:697    .text:00000000000002f4 .L0 
     /tmp/ccf5Rp5d.s:700    .text:00000000000002fc .L0 
     /tmp/ccf5Rp5d.s:701    .text:00000000000002fc .L0 
     /tmp/ccf5Rp5d.s:703    .text:0000000000000300 .L0 
     /tmp/ccf5Rp5d.s:705    .text:0000000000000304 .L0 
     /tmp/ccf5Rp5d.s:707    .text:0000000000000308 .L0 
     /tmp/ccf5Rp5d.s:708    .text:0000000000000308 .L0 
     /tmp/ccf5Rp5d.s:715    .text:0000000000000310 .L0 
     /tmp/ccf5Rp5d.s:725    .text:0000000000000318 .L0 
     /tmp/ccf5Rp5d.s:726    .text:0000000000000318 .L0 
     /tmp/ccf5Rp5d.s:733    .text:000000000000032c .L0 
       src/RiscV.cpp:50     .text:000000000000032c .L0 
     /tmp/ccf5Rp5d.s:739    .text:0000000000000330 .L0 
       src/RiscV.cpp:51     .text:0000000000000330 .L0 
     /tmp/ccf5Rp5d.s:752    .text:0000000000000338 .L0 
     /tmp/ccf5Rp5d.s:753    .text:0000000000000338 .L0 
     /tmp/ccf5Rp5d.s:754    .text:0000000000000338 .L0 
     /tmp/ccf5Rp5d.s:761    .text:0000000000000350 .L0 
     /tmp/ccf5Rp5d.s:762    .text:0000000000000350 .L0 
     /tmp/ccf5Rp5d.s:767    .text:0000000000000358 .L0 
     /tmp/ccf5Rp5d.s:768    .text:0000000000000358 .L0 
     /tmp/ccf5Rp5d.s:769    .text:0000000000000358 .L0 
     /tmp/ccf5Rp5d.s:775    .text:0000000000000360 .L0 
       src/RiscV.cpp:55     .text:0000000000000360 .L0 
     /tmp/ccf5Rp5d.s:786    .text:0000000000000368 .L0 
     /tmp/ccf5Rp5d.s:787    .text:0000000000000368 .L0 
     /tmp/ccf5Rp5d.s:788    .text:0000000000000368 .L0 
     /tmp/ccf5Rp5d.s:791    .text:0000000000000370 .L0 
     /tmp/ccf5Rp5d.s:803    .text:0000000000000374 .L0 
     /tmp/ccf5Rp5d.s:804    .text:0000000000000374 .L0 
     /tmp/ccf5Rp5d.s:805    .text:0000000000000374 .L0 
     /tmp/ccf5Rp5d.s:812    .text:000000000000037c .L0 
     /tmp/ccf5Rp5d.s:816    .text:0000000000000380 .L0 
     /tmp/ccf5Rp5d.s:822    .text:0000000000000380 .L0 
     /tmp/ccf5Rp5d.s:301    .text:00000000000000fc .L0 
     /tmp/ccf5Rp5d.s:310    .text:000000000000010c .L0 
     /tmp/ccf5Rp5d.s:367    .text:0000000000000164 .L0 
     /tmp/ccf5Rp5d.s:425    .text:00000000000001b8 .L0 
     /tmp/ccf5Rp5d.s:476    .text:00000000000001e8 .L0 
     /tmp/ccf5Rp5d.s:508    .text:0000000000000204 .L0 
     /tmp/ccf5Rp5d.s:656    .text:00000000000002ac .L0 
     /tmp/ccf5Rp5d.s:663    .text:00000000000002c0 .L0 
     /tmp/ccf5Rp5d.s:755    .text:000000000000033c .L0 
GAS LISTING /tmp/ccf5Rp5d.s 			page 31


     /tmp/ccf5Rp5d.s:171    .text:0000000000000098 .L36
     /tmp/ccf5Rp5d.s:793    .text:0000000000000374 .L37
     /tmp/ccf5Rp5d.s:242    .text:00000000000000d0 .L3
     /tmp/ccf5Rp5d.s:258    .text:00000000000000e0 .L38
     /tmp/ccf5Rp5d.s:480    .text:00000000000001f8 .L39
     /tmp/ccf5Rp5d.s:718    .text:0000000000000318 .L40
     /tmp/ccf5Rp5d.s:747    .text:0000000000000338 .L41
     /tmp/ccf5Rp5d.s:782    .text:0000000000000368 .L42
     /tmp/ccf5Rp5d.s:442    .text:00000000000001d8 .L6
     /tmp/ccf5Rp5d.s:354    .text:000000000000015c .L31
     /tmp/ccf5Rp5d.s:372    .text:0000000000000174 .L8
     /tmp/ccf5Rp5d.s:362    .text:0000000000000164 .L9
     /tmp/ccf5Rp5d.s:304    .text:0000000000000108 .L7
     /tmp/ccf5Rp5d.s:339    .text:0000000000000148 .L10
     /tmp/ccf5Rp5d.s:464    .text:00000000000001e4 .L12
     /tmp/ccf5Rp5d.s:401    .text:0000000000000198 .L14
     /tmp/ccf5Rp5d.s:208    .text:00000000000000c0 .L15
     /tmp/ccf5Rp5d.s:392    .text:000000000000018c .L13
     /tmp/ccf5Rp5d.s:526    .text:000000000000022c .L32
     /tmp/ccf5Rp5d.s:530    .text:0000000000000234 .L33
     /tmp/ccf5Rp5d.s:533    .text:0000000000000238 .L17
     /tmp/ccf5Rp5d.s:515    .text:0000000000000218 .L18
     /tmp/ccf5Rp5d.s:650    .text:00000000000002ac .L19
     /tmp/ccf5Rp5d.s:578    .text:0000000000000260 .L21
     /tmp/ccf5Rp5d.s:660    .text:00000000000002c0 .L22
     /tmp/ccf5Rp5d.s:603    .text:0000000000000280 .L24
     /tmp/ccf5Rp5d.s:667    .text:00000000000002d0 .L43
     /tmp/ccf5Rp5d.s:623    .text:0000000000000298 .L25
     /tmp/ccf5Rp5d.s:688    .text:00000000000002f0 .L44
     /tmp/ccf5Rp5d.s:711    .text:0000000000000310 .L45
     /tmp/ccf5Rp5d.s:569    .text:0000000000000254 .L20
     /tmp/ccf5Rp5d.s:584    .text:0000000000000268 .L23
     /tmp/ccf5Rp5d.s:631    .text:00000000000002a0 .L26
     /tmp/ccf5Rp5d.s:2127   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccf5Rp5d.s:3715   .debug_str:00000000000006d4 .LASF137
     /tmp/ccf5Rp5d.s:3539   .debug_str:00000000000001ab .LASF138
     /tmp/ccf5Rp5d.s:3553   .debug_str:00000000000001fe .LASF139
     /tmp/ccf5Rp5d.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccf5Rp5d.s:819    .text:0000000000000380 .Letext0
     /tmp/ccf5Rp5d.s:3473   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccf5Rp5d.s:3625   .debug_str:0000000000000458 .LASF0
     /tmp/ccf5Rp5d.s:3643   .debug_str:00000000000004cc .LASF1
     /tmp/ccf5Rp5d.s:3607   .debug_str:00000000000003d9 .LASF2
     /tmp/ccf5Rp5d.s:3579   .debug_str:00000000000002fb .LASF4
     /tmp/ccf5Rp5d.s:3689   .debug_str:0000000000000617 .LASF3
     /tmp/ccf5Rp5d.s:3503   .debug_str:00000000000000ab .LASF5
     /tmp/ccf5Rp5d.s:3647   .debug_str:00000000000004e7 .LASF6
     /tmp/ccf5Rp5d.s:3623   .debug_str:0000000000000445 .LASF7
     /tmp/ccf5Rp5d.s:3731   .debug_str:000000000000080f .LASF8
     /tmp/ccf5Rp5d.s:3565   .debug_str:0000000000000263 .LASF9
     /tmp/ccf5Rp5d.s:3659   .debug_str:0000000000000554 .LASF10
     /tmp/ccf5Rp5d.s:3719   .debug_str:00000000000007a4 .LASF11
     /tmp/ccf5Rp5d.s:3505   .debug_str:00000000000000b2 .LASF12
     /tmp/ccf5Rp5d.s:3481   .debug_str:000000000000001b .LASF13
     /tmp/ccf5Rp5d.s:3519   .debug_str:0000000000000106 .LASF14
     /tmp/ccf5Rp5d.s:3681   .debug_str:00000000000005d3 .LASF15
     /tmp/ccf5Rp5d.s:3527   .debug_str:0000000000000146 .LASF16
GAS LISTING /tmp/ccf5Rp5d.s 			page 32


     /tmp/ccf5Rp5d.s:3605   .debug_str:00000000000003d3 .LASF60
     /tmp/ccf5Rp5d.s:3595   .debug_str:000000000000036f .LASF140
     /tmp/ccf5Rp5d.s:3701   .debug_str:000000000000067a .LASF17
     /tmp/ccf5Rp5d.s:3639   .debug_str:00000000000004b8 .LASF18
     /tmp/ccf5Rp5d.s:3587   .debug_str:0000000000000323 .LASF19
     /tmp/ccf5Rp5d.s:3679   .debug_str:00000000000005c8 .LASF20
     /tmp/ccf5Rp5d.s:3509   .debug_str:00000000000000c7 .LASF22
     /tmp/ccf5Rp5d.s:3497   .debug_str:000000000000007b .LASF21
     /tmp/ccf5Rp5d.s:3737   .debug_str:0000000000000850 .LASF23
     /tmp/ccf5Rp5d.s:3703   .debug_str:0000000000000683 .LASF24
     /tmp/ccf5Rp5d.s:3685   .debug_str:00000000000005ef .LASF25
     /tmp/ccf5Rp5d.s:3483   .debug_str:000000000000002b .LASF26
     /tmp/ccf5Rp5d.s:3669   .debug_str:0000000000000594 .LASF28
     /tmp/ccf5Rp5d.s:3537   .debug_str:00000000000001a2 .LASF30
     /tmp/ccf5Rp5d.s:3661   .debug_str:0000000000000563 .LASF32
     /tmp/ccf5Rp5d.s:3693   .debug_str:000000000000063a .LASF27
     /tmp/ccf5Rp5d.s:3541   .debug_str:00000000000001b9 .LASF29
     /tmp/ccf5Rp5d.s:3713   .debug_str:00000000000006cd .LASF31
     /tmp/ccf5Rp5d.s:3601   .debug_str:00000000000003b2 .LASF33
     /tmp/ccf5Rp5d.s:3557   .debug_str:0000000000000230 .LASF34
     /tmp/ccf5Rp5d.s:3555   .debug_str:000000000000021c .LASF35
     /tmp/ccf5Rp5d.s:3477   .debug_str:0000000000000009 .LASF36
     /tmp/ccf5Rp5d.s:3597   .debug_str:000000000000037a .LASF37
     /tmp/ccf5Rp5d.s:3545   .debug_str:00000000000001d6 .LASF38
     /tmp/ccf5Rp5d.s:3531   .debug_str:0000000000000179 .LASF39
     /tmp/ccf5Rp5d.s:3763   .debug_str:0000000000000931 .LASF40
     /tmp/ccf5Rp5d.s:3573   .debug_str:00000000000002b5 .LASF41
     /tmp/ccf5Rp5d.s:3667   .debug_str:000000000000058d .LASF42
     /tmp/ccf5Rp5d.s:3495   .debug_str:0000000000000068 .LASF43
     /tmp/ccf5Rp5d.s:3493   .debug_str:0000000000000061 .LASF44
     /tmp/ccf5Rp5d.s:3741   .debug_str:0000000000000880 .LASF45
     /tmp/ccf5Rp5d.s:3561   .debug_str:0000000000000246 .LASF46
     /tmp/ccf5Rp5d.s:3657   .debug_str:0000000000000542 .LASF47
     /tmp/ccf5Rp5d.s:3491   .debug_str:000000000000005b .LASF48
     /tmp/ccf5Rp5d.s:3725   .debug_str:00000000000007d3 .LASF49
     /tmp/ccf5Rp5d.s:3761   .debug_str:0000000000000926 .LASF50
     /tmp/ccf5Rp5d.s:3633   .debug_str:000000000000047d .LASF51
     /tmp/ccf5Rp5d.s:3641   .debug_str:00000000000004c1 .LASF52
     /tmp/ccf5Rp5d.s:3723   .debug_str:00000000000007bb .LASF53
     /tmp/ccf5Rp5d.s:3517   .debug_str:00000000000000fc .LASF54
     /tmp/ccf5Rp5d.s:3593   .debug_str:0000000000000359 .LASF55
     /tmp/ccf5Rp5d.s:3613   .debug_str:00000000000003fa .LASF56
     /tmp/ccf5Rp5d.s:3501   .debug_str:0000000000000095 .LASF57
     /tmp/ccf5Rp5d.s:3697   .debug_str:000000000000065b .LASF58
     /tmp/ccf5Rp5d.s:3635   .debug_str:0000000000000495 .LASF59
     /tmp/ccf5Rp5d.s:3739   .debug_str:000000000000086b .LASF115
     /tmp/ccf5Rp5d.s:3729   .debug_str:00000000000007ed .LASF117
     /tmp/ccf5Rp5d.s:3705   .debug_str:0000000000000690 .LASF61
     /tmp/ccf5Rp5d.s:3551   .debug_str:00000000000001f6 .LASF84
     /tmp/ccf5Rp5d.s:3621   .debug_str:0000000000000440 .LASF62
     /tmp/ccf5Rp5d.s:3749   .debug_str:00000000000008b6 .LASF63
     /tmp/ccf5Rp5d.s:3707   .debug_str:00000000000006a1 .LASF64
     /tmp/ccf5Rp5d.s:3575   .debug_str:00000000000002c9 .LASF65
     /tmp/ccf5Rp5d.s:3631   .debug_str:0000000000000474 .LASF66
     /tmp/ccf5Rp5d.s:3675   .debug_str:00000000000005b6 .LASF67
     /tmp/ccf5Rp5d.s:3695   .debug_str:0000000000000641 .LASF68
     /tmp/ccf5Rp5d.s:3653   .debug_str:0000000000000520 .LASF69
GAS LISTING /tmp/ccf5Rp5d.s 			page 33


     /tmp/ccf5Rp5d.s:3617   .debug_str:0000000000000414 .LASF70
     /tmp/ccf5Rp5d.s:3529   .debug_str:000000000000015c .LASF71
     /tmp/ccf5Rp5d.s:3717   .debug_str:0000000000000798 .LASF72
     /tmp/ccf5Rp5d.s:3591   .debug_str:0000000000000334 .LASF73
     /tmp/ccf5Rp5d.s:3511   .debug_str:00000000000000df .LASF102
     /tmp/ccf5Rp5d.s:3755   .debug_str:00000000000008cc .LASF104
     /tmp/ccf5Rp5d.s:3515   .debug_str:00000000000000f4 .LASF74
     /tmp/ccf5Rp5d.s:3567   .debug_str:0000000000000271 .LASF76
     /tmp/ccf5Rp5d.s:3687   .debug_str:0000000000000609 .LASF75
     /tmp/ccf5Rp5d.s:3733   .debug_str:000000000000081f .LASF77
     /tmp/ccf5Rp5d.s:3543   .debug_str:00000000000001cc .LASF78
     /tmp/ccf5Rp5d.s:3757   .debug_str:00000000000008ec .LASF79
     /tmp/ccf5Rp5d.s:3663   .debug_str:0000000000000578 .LASF80
     /tmp/ccf5Rp5d.s:3619   .debug_str:000000000000041e .LASF81
     /tmp/ccf5Rp5d.s:3735   .debug_str:0000000000000846 .LASF82
     /tmp/ccf5Rp5d.s:3709   .debug_str:00000000000006a6 .LASF83
     /tmp/ccf5Rp5d.s:3489   .debug_str:0000000000000053 .LASF85
     /tmp/ccf5Rp5d.s:3745   .debug_str:00000000000008a1 .LASF86
     /tmp/ccf5Rp5d.s:3499   .debug_str:0000000000000089 .LASF87
     /tmp/ccf5Rp5d.s:3767   .debug_str:0000000000000950 .LASF88
     /tmp/ccf5Rp5d.s:3665   .debug_str:0000000000000581 .LASF89
     /tmp/ccf5Rp5d.s:3699   .debug_str:000000000000066a .LASF90
     /tmp/ccf5Rp5d.s:3677   .debug_str:00000000000005bb .LASF91
     /tmp/ccf5Rp5d.s:3581   .debug_str:0000000000000302 .LASF92
     /tmp/ccf5Rp5d.s:3513   .debug_str:00000000000000e7 .LASF93
     /tmp/ccf5Rp5d.s:3535   .debug_str:000000000000019d .LASF94
     /tmp/ccf5Rp5d.s:3485   .debug_str:0000000000000034 .LASF95
     /tmp/ccf5Rp5d.s:3525   .debug_str:0000000000000139 .LASF96
     /tmp/ccf5Rp5d.s:3599   .debug_str:000000000000038e .LASF97
     /tmp/ccf5Rp5d.s:3673   .debug_str:00000000000005b1 .LASF141
     /tmp/ccf5Rp5d.s:3521   .debug_str:0000000000000112 .LASF98
     /tmp/ccf5Rp5d.s:3651   .debug_str:0000000000000505 .LASF99
     /tmp/ccf5Rp5d.s:3759   .debug_str:000000000000091a .LASF100
     /tmp/ccf5Rp5d.s:3523   .debug_str:0000000000000122 .LASF101
     /tmp/ccf5Rp5d.s:3649   .debug_str:00000000000004fa .LASF103
     /tmp/ccf5Rp5d.s:3563   .debug_str:000000000000024c .LASF105
     /tmp/ccf5Rp5d.s:3609   .debug_str:00000000000003e7 .LASF106
     /tmp/ccf5Rp5d.s:3765   .debug_str:0000000000000939 .LASF107
     /tmp/ccf5Rp5d.s:3683   .debug_str:00000000000005e9 .LASF108
     /tmp/ccf5Rp5d.s:3615   .debug_str:0000000000000404 .LASF109
     /tmp/ccf5Rp5d.s:3747   .debug_str:00000000000008ae .LASF142
     /tmp/ccf5Rp5d.s:3585   .debug_str:000000000000031e .LASF110
     /tmp/ccf5Rp5d.s:3629   .debug_str:000000000000046e .LASF111
     /tmp/ccf5Rp5d.s:3589   .debug_str:000000000000032c .LASF112
     /tmp/ccf5Rp5d.s:3583   .debug_str:0000000000000315 .LASF113
     /tmp/ccf5Rp5d.s:3753   .debug_str:00000000000008c2 .LASF114
     /tmp/ccf5Rp5d.s:3603   .debug_str:00000000000003c5 .LASF116
     /tmp/ccf5Rp5d.s:3569   .debug_str:0000000000000291 .LASF118
     /tmp/ccf5Rp5d.s:3743   .debug_str:0000000000000893 .LASF143
     /tmp/ccf5Rp5d.s:3577   .debug_str:00000000000002d3 .LASF144
     /tmp/ccf5Rp5d.s:3627   .debug_str:0000000000000465 .LASF119
     /tmp/ccf5Rp5d.s:3547   .debug_str:00000000000001de .LASF120
     /tmp/ccf5Rp5d.s:3691   .debug_str:0000000000000629 .LASF121
     /tmp/ccf5Rp5d.s:3571   .debug_str:00000000000002aa .LASF145
     /tmp/ccf5Rp5d.s:3549   .debug_str:00000000000001f1 .LASF122
     /tmp/ccf5Rp5d.s:46     .text:0000000000000020 .LFB45
     /tmp/ccf5Rp5d.s:817    .text:0000000000000380 .LFE45
GAS LISTING /tmp/ccf5Rp5d.s 			page 34


     /tmp/ccf5Rp5d.s:3475   .debug_str:0000000000000000 .LASF123
     /tmp/ccf5Rp5d.s:3611   .debug_str:00000000000003f3 .LASF124
     /tmp/ccf5Rp5d.s:3559   .debug_str:0000000000000238 .LASF125
     /tmp/ccf5Rp5d.s:3479   .debug_str:0000000000000011 .LASF126
     /tmp/ccf5Rp5d.s:3148   .debug_loc:0000000000000000 .LLST0
     /tmp/ccf5Rp5d.s:3487   .debug_str:0000000000000040 .LASF127
     /tmp/ccf5Rp5d.s:3179   .debug_loc:0000000000000095 .LLST1
     /tmp/ccf5Rp5d.s:3751   .debug_str:00000000000008bb .LASF128
     /tmp/ccf5Rp5d.s:3187   .debug_loc:00000000000000b9 .LLST2
     /tmp/ccf5Rp5d.s:3507   .debug_str:00000000000000c2 .LASF129
     /tmp/ccf5Rp5d.s:3671   .debug_str:00000000000005a9 .LASF130
     /tmp/ccf5Rp5d.s:3419   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccf5Rp5d.s:3721   .debug_str:00000000000007b3 .LASF131
     /tmp/ccf5Rp5d.s:3244   .debug_loc:0000000000000195 .LLST10
     /tmp/ccf5Rp5d.s:277    .text:00000000000000ec .LBB108
     /tmp/ccf5Rp5d.s:291    .text:00000000000000f8 .LBE108
     /tmp/ccf5Rp5d.s:3251   .debug_loc:00000000000001b8 .LLST11
     /tmp/ccf5Rp5d.s:292    .text:00000000000000f8 .LBB110
     /tmp/ccf5Rp5d.s:3264   .debug_loc:00000000000001f1 .LLST12
     /tmp/ccf5Rp5d.s:3283   .debug_loc:000000000000024d .LLST13
     /tmp/ccf5Rp5d.s:3298   .debug_loc:0000000000000296 .LLST14
     /tmp/ccf5Rp5d.s:3309   .debug_loc:00000000000002cc .LLST4
     /tmp/ccf5Rp5d.s:503    .text:0000000000000204 .LBB89
     /tmp/ccf5Rp5d.s:3316   .debug_loc:00000000000002ef .LLST5
     /tmp/ccf5Rp5d.s:3327   .debug_loc:0000000000000325 .LLST6
     /tmp/ccf5Rp5d.s:3356   .debug_loc:00000000000003a9 .LLST7
     /tmp/ccf5Rp5d.s:587    .text:0000000000000268 .LBB91
     /tmp/ccf5Rp5d.s:3363   .debug_loc:00000000000003cc .LLST8
     /tmp/ccf5Rp5d.s:608    .text:0000000000000280 .LBB94
     /tmp/ccf5Rp5d.s:3374   .debug_loc:0000000000000402 .LLST9
     /tmp/ccf5Rp5d.s:723    .text:0000000000000318 .LBB83
     /tmp/ccf5Rp5d.s:744    .text:0000000000000334 .LBE83
     /tmp/ccf5Rp5d.s:3645   .debug_str:00000000000004df .LASF132
     /tmp/ccf5Rp5d.s:3385   .debug_loc:0000000000000438 .LLST3
     /tmp/ccf5Rp5d.s:731    .text:000000000000032c .LVL51
     /tmp/ccf5Rp5d.s:83     .text:000000000000003c .LBB72
     /tmp/ccf5Rp5d.s:100    .text:0000000000000048 .LBE72
     /tmp/ccf5Rp5d.s:102    .text:0000000000000048 .LBB74
     /tmp/ccf5Rp5d.s:115    .text:000000000000004c .LBE74
     /tmp/ccf5Rp5d.s:121    .text:0000000000000054 .LBB76
     /tmp/ccf5Rp5d.s:134    .text:0000000000000058 .LBE76
     /tmp/ccf5Rp5d.s:749    .text:0000000000000338 .LBB84
     /tmp/ccf5Rp5d.s:766    .text:0000000000000358 .LBE84
     /tmp/ccf5Rp5d.s:759    .text:0000000000000350 .LVL54
     /tmp/ccf5Rp5d.s:763    .text:0000000000000358 .LVL55
     /tmp/ccf5Rp5d.s:784    .text:0000000000000368 .LBB86
     /tmp/ccf5Rp5d.s:795    .text:0000000000000374 .LBE86
     /tmp/ccf5Rp5d.s:789    .text:0000000000000370 .LVL57
     /tmp/ccf5Rp5d.s:216    .text:00000000000000c4 .LBB129
     /tmp/ccf5Rp5d.s:227    .text:00000000000000c8 .LBE129
     /tmp/ccf5Rp5d.s:3392   .debug_loc:000000000000045b .LLST15
     /tmp/ccf5Rp5d.s:232    .text:00000000000000cc .LBB131
     /tmp/ccf5Rp5d.s:244    .text:00000000000000d0 .LBE131
     /tmp/ccf5Rp5d.s:3399   .debug_loc:000000000000047e .LLST16
     /tmp/ccf5Rp5d.s:801    .text:0000000000000374 .LBB139
     /tmp/ccf5Rp5d.s:814    .text:0000000000000380 .LBE139
     /tmp/ccf5Rp5d.s:166    .text:0000000000000094 .LVL5
GAS LISTING /tmp/ccf5Rp5d.s 			page 35


     /tmp/ccf5Rp5d.s:10     .text:0000000000000000 .LFB44
     /tmp/ccf5Rp5d.s:40     .text:0000000000000020 .LFE44
     /tmp/ccf5Rp5d.s:3727   .debug_str:00000000000007e5 .LASF133
     /tmp/ccf5Rp5d.s:3637   .debug_str:00000000000004b1 .LASF134
     /tmp/ccf5Rp5d.s:3655   .debug_str:000000000000053d .LASF135
     /tmp/ccf5Rp5d.s:3711   .debug_str:00000000000006c8 .LASF136
     /tmp/ccf5Rp5d.s:3533   .debug_str:000000000000018d .LASF146
     /tmp/ccf5Rp5d.s:143    .text:0000000000000060 .LVL3
     /tmp/ccf5Rp5d.s:154    .text:0000000000000070 .LVL4
     /tmp/ccf5Rp5d.s:170    .text:0000000000000098 .LVL6
     /tmp/ccf5Rp5d.s:207    .text:00000000000000c0 .LVL8
     /tmp/ccf5Rp5d.s:257    .text:00000000000000e0 .LVL13
     /tmp/ccf5Rp5d.s:270    .text:00000000000000e4 .LVL14
     /tmp/ccf5Rp5d.s:479    .text:00000000000001f8 .LVL32
     /tmp/ccf5Rp5d.s:496    .text:00000000000001fc .LVL33
     /tmp/ccf5Rp5d.s:717    .text:0000000000000318 .LVL49
     /tmp/ccf5Rp5d.s:746    .text:0000000000000338 .LVL52
     /tmp/ccf5Rp5d.s:756    .text:0000000000000344 .LVL53
     /tmp/ccf5Rp5d.s:781    .text:0000000000000368 .LVL56
     /tmp/ccf5Rp5d.s:98     .text:0000000000000048 .LVL0
     /tmp/ccf5Rp5d.s:177    .text:000000000000009c .LVL7
     /tmp/ccf5Rp5d.s:303    .text:0000000000000108 .LVL20
     /tmp/ccf5Rp5d.s:598    .text:0000000000000278 .LVL41
     /tmp/ccf5Rp5d.s:649    .text:00000000000002ac .LVL45
     /tmp/ccf5Rp5d.s:666    .text:00000000000002d0 .LVL46
     /tmp/ccf5Rp5d.s:729    .text:0000000000000324 .LVL50
     /tmp/ccf5Rp5d.s:792    .text:0000000000000374 .LVL58
     /tmp/ccf5Rp5d.s:441    .text:00000000000001d8 .LVL30
     /tmp/ccf5Rp5d.s:463    .text:00000000000001e4 .LVL31
     /tmp/ccf5Rp5d.s:276    .text:00000000000000ec .LVL15
     /tmp/ccf5Rp5d.s:283    .text:00000000000000f0 .LVL16
     /tmp/ccf5Rp5d.s:286    .text:00000000000000f4 .LVL17
     /tmp/ccf5Rp5d.s:289    .text:00000000000000f8 .LVL18
     /tmp/ccf5Rp5d.s:338    .text:0000000000000148 .LVL21
     /tmp/ccf5Rp5d.s:353    .text:000000000000015c .LVL22
     /tmp/ccf5Rp5d.s:368    .text:000000000000016c .LVL25
     /tmp/ccf5Rp5d.s:371    .text:0000000000000174 .LVL26
     /tmp/ccf5Rp5d.s:418    .text:00000000000001b0 .LVL29
     /tmp/ccf5Rp5d.s:359    .text:0000000000000160 .LVL23
     /tmp/ccf5Rp5d.s:361    .text:0000000000000164 .LVL24
     /tmp/ccf5Rp5d.s:415    .text:00000000000001ac .LVL28
     /tmp/ccf5Rp5d.s:377    .text:0000000000000178 .LVL27
     /tmp/ccf5Rp5d.s:632    .text:00000000000002a0 .LVL44
     /tmp/ccf5Rp5d.s:502    .text:0000000000000204 .LVL34
     /tmp/ccf5Rp5d.s:514    .text:0000000000000218 .LVL35
     /tmp/ccf5Rp5d.s:520    .text:0000000000000220 .LVL36
     /tmp/ccf5Rp5d.s:525    .text:000000000000022c .LVL37
     /tmp/ccf5Rp5d.s:532    .text:0000000000000238 .LVL38
     /tmp/ccf5Rp5d.s:586    .text:0000000000000268 .LVL40
     /tmp/ccf5Rp5d.s:604    .text:0000000000000280 .LVL42
     /tmp/ccf5Rp5d.s:687    .text:00000000000002f0 .LVL47
     /tmp/ccf5Rp5d.s:624    .text:0000000000000298 .LVL43
     /tmp/ccf5Rp5d.s:710    .text:0000000000000310 .LVL48
     /tmp/ccf5Rp5d.s:215    .text:00000000000000c4 .LVL9
     /tmp/ccf5Rp5d.s:224    .text:00000000000000c8 .LVL10
     /tmp/ccf5Rp5d.s:231    .text:00000000000000cc .LVL11
     /tmp/ccf5Rp5d.s:240    .text:00000000000000d0 .LVL12
GAS LISTING /tmp/ccf5Rp5d.s 			page 36


     /tmp/ccf5Rp5d.s:823    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccf5Rp5d.s:489    .text:00000000000001f8 .LBB88
     /tmp/ccf5Rp5d.s:543    .text:000000000000023c .LBE88
     /tmp/ccf5Rp5d.s:553    .text:000000000000023c .LBB103
     /tmp/ccf5Rp5d.s:647    .text:00000000000002a8 .LBE103
     /tmp/ccf5Rp5d.s:651    .text:00000000000002ac .LBB104
     /tmp/ccf5Rp5d.s:721    .text:0000000000000318 .LBE104
     /tmp/ccf5Rp5d.s:542    .text:000000000000023c .LBE89
     /tmp/ccf5Rp5d.s:554    .text:000000000000023c .LBB101
     /tmp/ccf5Rp5d.s:634    .text:00000000000002a0 .LBE101
     /tmp/ccf5Rp5d.s:652    .text:00000000000002ac .LBB102
     /tmp/ccf5Rp5d.s:720    .text:0000000000000318 .LBE102
     /tmp/ccf5Rp5d.s:606    .text:0000000000000280 .LBE91
     /tmp/ccf5Rp5d.s:668    .text:00000000000002d0 .LBB97
     /tmp/ccf5Rp5d.s:690    .text:00000000000002f0 .LBE97
     /tmp/ccf5Rp5d.s:626    .text:0000000000000298 .LBE94
     /tmp/ccf5Rp5d.s:691    .text:00000000000002f0 .LBB98
     /tmp/ccf5Rp5d.s:713    .text:0000000000000310 .LBE98
     /tmp/ccf5Rp5d.s:263    .text:00000000000000e0 .LBB107
     /tmp/ccf5Rp5d.s:461    .text:00000000000001e0 .LBE107
     /tmp/ccf5Rp5d.s:465    .text:00000000000001e4 .LBB124
     /tmp/ccf5Rp5d.s:487    .text:00000000000001f8 .LBE124
     /tmp/ccf5Rp5d.s:448    .text:00000000000001d8 .LBE110
     /tmp/ccf5Rp5d.s:466    .text:00000000000001e4 .LBB123
     /tmp/ccf5Rp5d.s:486    .text:00000000000001f8 .LBE123
     /tmp/ccf5Rp5d.s:299    .text:00000000000000fc .LBB112
     /tmp/ccf5Rp5d.s:446    .text:00000000000001d8 .LBE112
     /tmp/ccf5Rp5d.s:468    .text:00000000000001e4 .LBB121
     /tmp/ccf5Rp5d.s:484    .text:00000000000001f8 .LBE121
     /tmp/ccf5Rp5d.s:373    .text:0000000000000174 .LBB115
     /tmp/ccf5Rp5d.s:443    .text:00000000000001d8 .LBE115
     /tmp/ccf5Rp5d.s:471    .text:00000000000001e4 .LBB116
     /tmp/ccf5Rp5d.s:481    .text:00000000000001f8 .LBE116

UNDEFINED SYMBOLS
console_handler
_ZN16MemoryAllocation9fmem_headE
_ZN3TCB12createThreadEPFvPvEPPS_S0_
_ZN3TCB7runningE
_ZN3TCB11setFinishedEb
_ZN3TCB8dispatchEv
