GAS LISTING /tmp/ccfNW6m3.s 			page 1


   1              		.file	"queue.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   8              	_Z41__static_initialization_and_destruction_0ii:
   9              	.LFB29:
  10              		.file 1 "src/queue.cpp"
   1:src/queue.cpp **** //
   2:src/queue.cpp **** // Created by os on 9/7/22.
   3:src/queue.cpp **** //
   4:src/queue.cpp **** 
   5:src/queue.cpp **** #include "../h/queue.hpp"
   6:src/queue.cpp **** 
   7:src/queue.cpp **** LinkedList<TCB> Queue::queue;
   8:src/queue.cpp **** 
   9:src/queue.cpp **** void Queue::put(TCB *thread) {
  10:src/queue.cpp ****     queue.addLast(thread);
  11:src/queue.cpp **** }
  12:src/queue.cpp **** 
  13:src/queue.cpp **** TCB *Queue::get()
  14:src/queue.cpp ****     {
  15:src/queue.cpp ****         TCB* thread = queue.removeFirst();
  16:src/queue.cpp ****         return thread;
  17:src/queue.cpp ****     }
  18:src/queue.cpp **** 
  19:src/queue.cpp **** bool Queue::isEmpty() {
  20:src/queue.cpp ****     if(queue.listEmpty()==true){
  21:src/queue.cpp ****         return true;
  22:src/queue.cpp ****     }else{return false;}
  23:src/queue.cpp **** }
  11              		.loc 1 23 1
  12              		.cfi_startproc
  13              	.LVL0:
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  20              		.loc 1 23 1 is_stmt 0
  21 000c 93071000 		li	a5,1
  22 0010 6308F500 		beq	a0,a5,.L4
  23              	.L1:
  24 0014 03348100 		ld	s0,8(sp)
  25              		.cfi_remember_state
  26              		.cfi_restore 8
  27              		.cfi_def_cfa 2, 16
  28 0018 13010101 		addi	sp,sp,16
  29              		.cfi_def_cfa_offset 0
  30 001c 67800000 		jr	ra
  31              	.L4:
  32              		.cfi_restore_state
  33              		.loc 1 23 1 discriminator 1
  34 0020 B7070100 		li	a5,65536
  35 0024 9387F7FF 		addi	a5,a5,-1
GAS LISTING /tmp/ccfNW6m3.s 			page 2


  36 0028 E396F5FE 		bne	a1,a5,.L1
  37              	.LVL1:
  38              	.LBB17:
  39              	.LBB18:
  40              	.LBB19:
  41              		.file 2 "src/../h/LinkedList.hpp"
   1:src/../h/LinkedList.hpp **** 
   2:src/../h/LinkedList.hpp **** 
   3:src/../h/LinkedList.hpp **** #ifndef PROJECT_BASE_LINKEDLIST_HPP
   4:src/../h/LinkedList.hpp **** #define PROJECT_BASE_LINKEDLIST_HPP
   5:src/../h/LinkedList.hpp **** #include "../h/MemoryAllocation.hpp"
   6:src/../h/LinkedList.hpp **** 
   7:src/../h/LinkedList.hpp **** //uradi sutra kada te ne bi mrzelo, jer me sada mrzi da radim double linked, a vrv ce te i sutra mr
   8:src/../h/LinkedList.hpp **** template<typename T>
   9:src/../h/LinkedList.hpp **** class LinkedList{
  10:src/../h/LinkedList.hpp ****     private:
  11:src/../h/LinkedList.hpp ****     struct Elem{
  12:src/../h/LinkedList.hpp ****         T* data;
  13:src/../h/LinkedList.hpp ****         Elem* next;
  14:src/../h/LinkedList.hpp **** 
  15:src/../h/LinkedList.hpp ****         Elem(T* data, Elem * next) : data(data), next(next) {}
  16:src/../h/LinkedList.hpp ****     };
  17:src/../h/LinkedList.hpp **** 
  18:src/../h/LinkedList.hpp ****     Elem *head, *tail;
  19:src/../h/LinkedList.hpp ****     public:
  20:src/../h/LinkedList.hpp ****     LinkedList() : head(0), tail(0) {}
  42              		.loc 2 20 35
  43 002c 97070000 		lla	a5,.LANCHOR0
  43      93870700 
  44 0034 23B00700 		sd	zero,0(a5)
  45 0038 23B40700 		sd	zero,8(a5)
  46              	.LVL2:
  47              	.LBE19:
  48              	.LBE18:
  49              	.LBE17:
  50              		.loc 1 23 1
  51 003c 6FF09FFD 		j	.L1
  52              		.cfi_endproc
  53              	.LFE29:
  55              		.align	2
  56              		.globl	_ZN5Queue3putEP3TCB
  58              	_ZN5Queue3putEP3TCB:
  59              	.LFB19:
   9:src/queue.cpp ****     queue.addLast(thread);
  60              		.loc 1 9 30 is_stmt 1
  61              		.cfi_startproc
  62              	.LVL3:
  63 0040 130101FF 		addi	sp,sp,-16
  64              		.cfi_def_cfa_offset 16
  65 0044 23348100 		sd	s0,8(sp)
  66              		.cfi_offset 8, -8
  67 0048 13040101 		addi	s0,sp,16
  68              		.cfi_def_cfa 8, 0
  10:src/queue.cpp **** }
  69              		.loc 1 10 5
  70              	.LVL4:
  71              		.file 3 "src/../h/../h/MemoryAllocation.hpp"
GAS LISTING /tmp/ccfNW6m3.s 			page 3


   1:src/../h/../h/MemoryAllocation.hpp **** #include "../lib/hw.h"
   2:src/../h/../h/MemoryAllocation.hpp **** 
   3:src/../h/../h/MemoryAllocation.hpp **** 
   4:src/../h/../h/MemoryAllocation.hpp **** #ifndef PROJECT_BASE_MEMORYALLOCATION_HPP
   5:src/../h/../h/MemoryAllocation.hpp **** #define PROJECT_BASE_MEMORYALLOCATION_HPP
   6:src/../h/../h/MemoryAllocation.hpp **** 
   7:src/../h/../h/MemoryAllocation.hpp **** 
   8:src/../h/../h/MemoryAllocation.hpp **** class MemoryAllocation {
   9:src/../h/../h/MemoryAllocation.hpp **** 
  10:src/../h/../h/MemoryAllocation.hpp ****     //===========================DEFINICIJA SINGLETON KLASE POCETAK=======================k
  11:src/../h/../h/MemoryAllocation.hpp **** private:
  12:src/../h/../h/MemoryAllocation.hpp **** 
  13:src/../h/../h/MemoryAllocation.hpp ****     struct FreeMem {
  14:src/../h/../h/MemoryAllocation.hpp ****         FreeMem *next;
  15:src/../h/../h/MemoryAllocation.hpp ****         FreeMem *prev;
  16:src/../h/../h/MemoryAllocation.hpp ****         size_t size;
  17:src/../h/../h/MemoryAllocation.hpp ****     };
  18:src/../h/../h/MemoryAllocation.hpp **** 
  19:src/../h/../h/MemoryAllocation.hpp **** 
  20:src/../h/../h/MemoryAllocation.hpp ****     static FreeMem *fmem_head; //koja pocetna vrednost?
  21:src/../h/../h/MemoryAllocation.hpp **** 
  22:src/../h/../h/MemoryAllocation.hpp **** 
  23:src/../h/../h/MemoryAllocation.hpp **** 
  24:src/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *instance;
  25:src/../h/../h/MemoryAllocation.hpp ****     int data;
  26:src/../h/../h/MemoryAllocation.hpp **** 
  27:src/../h/../h/MemoryAllocation.hpp **** 
  28:src/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation() { //OVO SE SADA NIGGDE
  29:src/../h/../h/MemoryAllocation.hpp ****         fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  30:src/../h/../h/MemoryAllocation.hpp ****                                     (char *) HEAP_START_ADDR); //da li smem ovo da castujem u size_
  31:src/../h/../h/MemoryAllocation.hpp ****         fmem_head->next = nullptr;
  32:src/../h/../h/MemoryAllocation.hpp ****         fmem_head->prev = nullptr;
  33:src/../h/../h/MemoryAllocation.hpp ****         data = 0;
  34:src/../h/../h/MemoryAllocation.hpp ****     }
  35:src/../h/../h/MemoryAllocation.hpp **** 
  36:src/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation(MemoryAllocation const &);
  37:src/../h/../h/MemoryAllocation.hpp **** 
  38:src/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const &);
  39:src/../h/../h/MemoryAllocation.hpp **** 
  40:src/../h/../h/MemoryAllocation.hpp **** public:
  41:src/../h/../h/MemoryAllocation.hpp **** 
  42:src/../h/../h/MemoryAllocation.hpp **** 
  43:src/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *getInstance() {
  44:src/../h/../h/MemoryAllocation.hpp ****         if (!instance) {
  45:src/../h/../h/MemoryAllocation.hpp ****             fmem_head =  (FreeMem*) HEAP_START_ADDR;
  46:src/../h/../h/MemoryAllocation.hpp ****             fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  47:src/../h/../h/MemoryAllocation.hpp ****                                         (char *) HEAP_START_ADDR); //da li smem ovo da castujem u s
  48:src/../h/../h/MemoryAllocation.hpp ****             fmem_head->next = nullptr;
  49:src/../h/../h/MemoryAllocation.hpp ****             fmem_head->prev = nullptr;
  50:src/../h/../h/MemoryAllocation.hpp ****             static MemoryAllocation* instance;
  51:src/../h/../h/MemoryAllocation.hpp ****             return instance;
  52:src/../h/../h/MemoryAllocation.hpp ****         }
  53:src/../h/../h/MemoryAllocation.hpp ****         return instance;
  54:src/../h/../h/MemoryAllocation.hpp ****     }
  55:src/../h/../h/MemoryAllocation.hpp **** 
  56:src/../h/../h/MemoryAllocation.hpp **** 
  57:src/../h/../h/MemoryAllocation.hpp ****     int getData() {
GAS LISTING /tmp/ccfNW6m3.s 			page 4


  58:src/../h/../h/MemoryAllocation.hpp ****         return this->data;
  59:src/../h/../h/MemoryAllocation.hpp ****     }
  60:src/../h/../h/MemoryAllocation.hpp **** 
  61:src/../h/../h/MemoryAllocation.hpp ****     void setData(int data) {
  62:src/../h/../h/MemoryAllocation.hpp ****         this->data = data;
  63:src/../h/../h/MemoryAllocation.hpp ****     }
  64:src/../h/../h/MemoryAllocation.hpp **** 
  65:src/../h/../h/MemoryAllocation.hpp ****     /*MemoryAllocation(MemoryAllocation const&) = delete;
  66:src/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const&)  = delete;*/
  67:src/../h/../h/MemoryAllocation.hpp **** //===========================DEFINICIJA SINGLETON KLASE KRAJ========================
  68:src/../h/../h/MemoryAllocation.hpp ****     static int bytesToBlocks(size_t size){
  69:src/../h/../h/MemoryAllocation.hpp ****         return (size+sizeof(FreeMem)+MEM_BLOCK_SIZE-1)/MEM_BLOCK_SIZE;
  72              		.loc 3 69 9
  73              	.LBB28:
  74              	.LBB29:
  75              	.LBB30:
  76              	.LBB31:
  70:src/../h/../h/MemoryAllocation.hpp ****     }
  71:src/../h/../h/MemoryAllocation.hpp **** 
  72:src/../h/../h/MemoryAllocation.hpp **** 
  73:src/../h/../h/MemoryAllocation.hpp **** //===========================METODE ZA ALOKACIJU MEMORIJE===========================
  74:src/../h/../h/MemoryAllocation.hpp ****     static void tryToJoin (FreeMem* curr) {
  75:src/../h/../h/MemoryAllocation.hpp ****         if (!curr) return;
  76:src/../h/../h/MemoryAllocation.hpp ****         if (curr->next && (char*)curr+curr->size == (char*)(curr->next)) {
  77:src/../h/../h/MemoryAllocation.hpp ****         // Remove the cur->next segment:
  78:src/../h/../h/MemoryAllocation.hpp ****             curr->size += curr->next->size;
  79:src/../h/../h/MemoryAllocation.hpp ****             curr->next = curr->next->next;
  80:src/../h/../h/MemoryAllocation.hpp ****             if (curr->next) curr->next->prev = curr;
  81:src/../h/../h/MemoryAllocation.hpp ****             return;
  82:src/../h/../h/MemoryAllocation.hpp ****         }
  83:src/../h/../h/MemoryAllocation.hpp **** 
  84:src/../h/../h/MemoryAllocation.hpp ****     }
  85:src/../h/../h/MemoryAllocation.hpp **** 
  86:src/../h/../h/MemoryAllocation.hpp ****     //===================================== mem_free, ali sa ptr ===============
  87:src/../h/../h/MemoryAllocation.hpp ****         static int mem_free(void* ptr) { //radi i kada posaljem sa &
  88:src/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
  89:src/../h/../h/MemoryAllocation.hpp ****         if(!fmem_head || ptr < (char*)fmem_head)
  90:src/../h/../h/MemoryAllocation.hpp ****         {
  91:src/../h/../h/MemoryAllocation.hpp ****             cur=nullptr;
  92:src/../h/../h/MemoryAllocation.hpp ****         }else {
  93:src/../h/../h/MemoryAllocation.hpp ****                 for (cur=fmem_head; cur->next!=ptr && ptr>(char*)(cur->next); cur=cur->next); //moz
  94:src/../h/../h/MemoryAllocation.hpp ****             }
  95:src/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newSeg = (FreeMem*)ptr;
  96:src/../h/../h/MemoryAllocation.hpp ****                 newSeg->next=nullptr;
  97:src/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=nullptr;
  98:src/../h/../h/MemoryAllocation.hpp ****                 newSeg->size=bytesToBlocks(sizeof(ptr))*MEM_BLOCK_SIZE;
  99:src/../h/../h/MemoryAllocation.hpp ****                         //sizeof(ptr);
 100:src/../h/../h/MemoryAllocation.hpp ****                 newSeg->prev=cur;
 101:src/../h/../h/MemoryAllocation.hpp ****                 if(cur) {
 102:src/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = cur->next;
 103:src/../h/../h/MemoryAllocation.hpp ****                 }
 104:src/../h/../h/MemoryAllocation.hpp ****                 else {
 105:src/../h/../h/MemoryAllocation.hpp ****                     newSeg->next = fmem_head;
 106:src/../h/../h/MemoryAllocation.hpp ****                 }
 107:src/../h/../h/MemoryAllocation.hpp ****                 if(newSeg->next) {
 108:src/../h/../h/MemoryAllocation.hpp ****                     newSeg->next->prev=newSeg;
 109:src/../h/../h/MemoryAllocation.hpp ****                 }
GAS LISTING /tmp/ccfNW6m3.s 			page 5


 110:src/../h/../h/MemoryAllocation.hpp ****                 if (cur) {
 111:src/../h/../h/MemoryAllocation.hpp ****                     cur->next = newSeg; //zasto ovde odjednom uzme vrednost x8000 umesto x8000f...?
 112:src/../h/../h/MemoryAllocation.hpp ****                 }
 113:src/../h/../h/MemoryAllocation.hpp ****                 else {
 114:src/../h/../h/MemoryAllocation.hpp ****                     fmem_head = newSeg;
 115:src/../h/../h/MemoryAllocation.hpp ****                 }
 116:src/../h/../h/MemoryAllocation.hpp ****                 // Try to merge with the previous and next segments:
 117:src/../h/../h/MemoryAllocation.hpp ****             tryToJoin(newSeg);
 118:src/../h/../h/MemoryAllocation.hpp ****             tryToJoin(cur);
 119:src/../h/../h/MemoryAllocation.hpp ****             //mozda da fmem_head nije jednako starom fmem_headu?
 120:src/../h/../h/MemoryAllocation.hpp ****             if(newSeg==nullptr){
 121:src/../h/../h/MemoryAllocation.hpp ****                 return -1;
 122:src/../h/../h/MemoryAllocation.hpp ****             }else{return 0;}
 123:src/../h/../h/MemoryAllocation.hpp **** 
 124:src/../h/../h/MemoryAllocation.hpp **** 
 125:src/../h/../h/MemoryAllocation.hpp ****     }
 126:src/../h/../h/MemoryAllocation.hpp ****     //===================================== kraj probe ==========================
 127:src/../h/../h/MemoryAllocation.hpp **** 
 128:src/../h/../h/MemoryAllocation.hpp **** 
 129:src/../h/../h/MemoryAllocation.hpp **** 
 130:src/../h/../h/MemoryAllocation.hpp ****     /*int mem_free(char* addr, size_t size) {
 131:src/../h/../h/MemoryAllocation.hpp ****         // Find the place where to insert the new free segment (just after cur):
 132:src/../h/../h/MemoryAllocation.hpp ****         FreeMem* cur=0;
 133:src/../h/../h/MemoryAllocation.hpp ****         if (!fmem_head || addr<(char*)fmem_head)
 134:src/../h/../h/MemoryAllocation.hpp ****             cur = 0; // insert as the first
 135:src/../h/../h/MemoryAllocation.hpp ****         else
 136:src/../h/../h/MemoryAllocation.hpp ****             for (cur=fmem_head; cur->next!=0 && addr>(char*)(cur->next);
 137:src/../h/../h/MemoryAllocation.hpp ****                  cur=cur->next);
 138:src/../h/../h/MemoryAllocation.hpp ****             // Insert the new segment after cur:
 139:src/../h/../h/MemoryAllocation.hpp ****         FreeMem* newSeg = (FreeMem*)addr;
 140:src/../h/../h/MemoryAllocation.hpp ****         newSeg->size = size;
 141:src/../h/../h/MemoryAllocation.hpp ****         newSeg->prev = cur;
 142:src/../h/../h/MemoryAllocation.hpp ****         if (cur) newSeg->next = cur->next;
 143:src/../h/../h/MemoryAllocation.hpp ****         else newSeg->next = fmem_head;
 144:src/../h/../h/MemoryAllocation.hpp ****         if (newSeg->next) newSeg->next->prev = newSeg;
 145:src/../h/../h/MemoryAllocation.hpp ****         if (cur) cur->next = newSeg;
 146:src/../h/../h/MemoryAllocation.hpp ****         else fmem_head = newSeg;
 147:src/../h/../h/MemoryAllocation.hpp ****             // Try to merge with the previous and next segments:
 148:src/../h/../h/MemoryAllocation.hpp ****         tryToJoin(newSeg);
 149:src/../h/../h/MemoryAllocation.hpp ****         tryToJoin(cur);
 150:src/../h/../h/MemoryAllocation.hpp ****     }*/
 151:src/../h/../h/MemoryAllocation.hpp **** 
 152:src/../h/../h/MemoryAllocation.hpp ****     static void* mem_alloc(size_t size) {//uopste ne radi, iako u lotsofsmallmallocs pise da radi
 153:src/../h/../h/MemoryAllocation.hpp ****         //size_t x=sizeof(fmem_head);
 154:src/../h/../h/MemoryAllocation.hpp ****         //pozovi ovde samo bytes to blocks od size, da ne moras to da radis iz maina
 155:src/../h/../h/MemoryAllocation.hpp ****         size=(size)*(size_t)MEM_BLOCK_SIZE; //kada je ovo ukljuceno, pravi problem u memfree, so il
  77              		.loc 3 155 9
 156:src/../h/../h/MemoryAllocation.hpp ****         for (FreeMem* cur = fmem_head; cur != nullptr; cur=cur->next){ // U DRUGOJ ITERACIJI FMEM_H
  78              		.loc 3 156 9
  79              	.LBB32:
  80              		.loc 3 156 23 is_stmt 0
  81 004c 97070000 		la	a5,_ZN16MemoryAllocation9fmem_headE
  81      83B70700 
  82 0054 83B70700 		ld	a5,0(a5)
  83              	.LVL5:
  84              	.L7:
  85              		.loc 3 156 44 is_stmt 1
GAS LISTING /tmp/ccfNW6m3.s 			page 6


  86 0058 638A070C 		beqz	a5,.L6
  87              	.LBB33:
 157:src/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
  88              		.loc 3 157 13
  89              		.loc 3 157 34 is_stmt 0
  90 005c 17070000 		la	a4,_ZN16MemoryAllocation9fmem_headE
  90      03370700 
  91 0064 83360700 		ld	a3,0(a4)
  92 0068 83B60600 		ld	a3,0(a3)
  93              		.loc 3 157 22
  94 006c 23B0D700 		sd	a3,0(a5)
 158:src/../h/../h/MemoryAllocation.hpp ****             cur->prev=fmem_head->prev;
  95              		.loc 3 158 13 is_stmt 1
  96              		.loc 3 158 34 is_stmt 0
  97 0070 03370700 		ld	a4,0(a4)
  98 0074 03368700 		ld	a2,8(a4)
  99              		.loc 3 158 22
 100 0078 23B4C700 		sd	a2,8(a5)
 159:src/../h/../h/MemoryAllocation.hpp ****             if (cur->size<size) continue;
 101              		.loc 3 159 13 is_stmt 1
 102              		.loc 3 159 22 is_stmt 0
 103 007c 03B70701 		ld	a4,16(a5)
 104              		.loc 3 159 13
 105 0080 9305F003 		li	a1,63
 106 0084 63F6E502 		bleu	a4,a1,.L17
 160:src/../h/../h/MemoryAllocation.hpp ****             if (cur->size-size<=sizeof(FreeMem)){
 107              		.loc 3 160 13 is_stmt 1
 108              	.LBB34:
 109              		.loc 3 160 26 is_stmt 0
 110 0088 130707FC 		addi	a4,a4,-64
 111              		.loc 3 160 13
 112 008c 93058001 		li	a1,24
 113 0090 63ECE502 		bgtu	a4,a1,.L8
 161:src/../h/../h/MemoryAllocation.hpp ****                 if (cur->prev) cur->prev->next = cur->next;
 114              		.loc 3 161 17 is_stmt 1
 115 0094 63020602 		beqz	a2,.L9
 116              		.loc 3 161 32
 117              		.loc 3 161 48 is_stmt 0
 118 0098 2330D600 		sd	a3,0(a2)
 119              	.L10:
 162:src/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 163:src/../h/../h/MemoryAllocation.hpp ****                 if (cur->next) cur->next->prev = cur->prev;
 120              		.loc 3 163 17 is_stmt 1
 121              		.loc 3 163 26 is_stmt 0
 122 009c 03B70700 		ld	a4,0(a5)
 123              		.loc 3 163 17
 124 00a0 63060708 		beqz	a4,.L6
 125              		.loc 3 163 32 is_stmt 1
 126              		.loc 3 163 55 is_stmt 0
 127 00a4 83B68700 		ld	a3,8(a5)
 128              		.loc 3 163 48
 129 00a8 2334D700 		sd	a3,8(a4)
 164:src/../h/../h/MemoryAllocation.hpp ****                 return cur;
 130              		.loc 3 164 17 is_stmt 1
 131              		.loc 3 164 24 is_stmt 0
 132 00ac 6F000008 		j	.L6
 133              	.L17:
GAS LISTING /tmp/ccfNW6m3.s 			page 7


 134              	.LBE34:
 135              	.LBE33:
 156:src/../h/../h/MemoryAllocation.hpp ****             cur->next=fmem_head->next;
 136              		.loc 3 156 59
 137 00b0 93870600 		mv	a5,a3
 138              	.LVL6:
 139 00b4 6FF05FFA 		j	.L7
 140              	.LVL7:
 141              	.L9:
 142              	.LBB39:
 143              	.LBB37:
 162:src/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 144              		.loc 3 162 22 is_stmt 1
 162:src/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = cur->next;
 145              		.loc 3 162 32 is_stmt 0
 146 00b8 17070000 		la	a4,_ZN16MemoryAllocation9fmem_headE
 146      03370700 
 147 00c0 2330D700 		sd	a3,0(a4)
 148 00c4 6FF09FFD 		j	.L10
 149              	.L8:
 150              	.LBB35:
 165:src/../h/../h/MemoryAllocation.hpp ****             }else {
 166:src/../h/../h/MemoryAllocation.hpp ****                 FreeMem* newfrgm = (FreeMem*)((char*)cur+size);
 151              		.loc 3 166 17 is_stmt 1
 152              		.loc 3 166 26 is_stmt 0
 153 00c8 13870704 		addi	a4,a5,64
 154              	.LVL8:
 167:src/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev=nullptr;
 155              		.loc 3 167 17 is_stmt 1
 156              		.loc 3 167 30 is_stmt 0
 157 00cc 23340700 		sd	zero,8(a4)
 168:src/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next=nullptr;
 158              		.loc 3 168 17 is_stmt 1
 159              		.loc 3 168 30 is_stmt 0
 160 00d0 23B00704 		sd	zero,64(a5)
 169:src/../h/../h/MemoryAllocation.hpp ****                 //newfrgm->size=cur->size-size;// DODATO TOKOM PROBE NITI
 170:src/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->prev) cur->prev->next = newfrgm;
 161              		.loc 3 170 17 is_stmt 1
 162              		.loc 3 170 33 is_stmt 0
 163 00d4 83B68700 		ld	a3,8(a5)
 164              		.loc 3 170 25
 165 00d8 63800608 		beqz	a3,.L12
 166              		.loc 3 170 39 is_stmt 1
 167              		.loc 3 170 55 is_stmt 0
 168 00dc 23B0E600 		sd	a4,0(a3)
 169              	.L13:
 171:src/../h/../h/MemoryAllocation.hpp ****                 else fmem_head = newfrgm+sizeof(fmem_head); // ovo sam dodao sizeof da bi mi radio 
 172:src/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 170              		.loc 3 172 17 is_stmt 1
 171              		.loc 3 172 33 is_stmt 0
 172 00e0 83B60700 		ld	a3,0(a5)
 173              		.loc 3 172 25
 174 00e4 63840600 		beqz	a3,.L14
 175              		.loc 3 172 39 is_stmt 1
 176              		.loc 3 172 55 is_stmt 0
 177 00e8 23B4E600 		sd	a4,8(a3)
 178              	.L14:
GAS LISTING /tmp/ccfNW6m3.s 			page 8


 173:src/../h/../h/MemoryAllocation.hpp ****                 newfrgm->prev = cur->prev;
 179              		.loc 3 173 17 is_stmt 1
 180              		.loc 3 173 38 is_stmt 0
 181 00ec 03B68700 		ld	a2,8(a5)
 182              		.loc 3 173 31
 183 00f0 2334C700 		sd	a2,8(a4)
 174:src/../h/../h/MemoryAllocation.hpp ****                 newfrgm->next = cur->next;
 184              		.loc 3 174 17 is_stmt 1
 185              		.loc 3 174 38 is_stmt 0
 186 00f4 83B60700 		ld	a3,0(a5)
 187              		.loc 3 174 31
 188 00f8 2330D700 		sd	a3,0(a4)
 175:src/../h/../h/MemoryAllocation.hpp ****                 newfrgm->size = cur->size-size;
 189              		.loc 3 175 17 is_stmt 1
 190              		.loc 3 175 38 is_stmt 0
 191 00fc 83B70701 		ld	a5,16(a5)
 192              	.LVL9:
 193              		.loc 3 175 42
 194 0100 938707FC 		addi	a5,a5,-64
 195              		.loc 3 175 31
 196 0104 2338F700 		sd	a5,16(a4)
 176:src/../h/../h/MemoryAllocation.hpp ****                 fmem_head =newfrgm+sizeof(fmem_head);
 197              		.loc 3 176 17 is_stmt 1
 198              		.loc 3 176 35 is_stmt 0
 199 0108 9306070C 		addi	a3,a4,192
 200              		.loc 3 176 27
 201 010c 97050000 		la	a1,_ZN16MemoryAllocation9fmem_headE
 201      83B50500 
 202 0114 23B0D500 		sd	a3,0(a1)
 177:src/../h/../h/MemoryAllocation.hpp ****                 fmem_head->next=newfrgm->next;
 203              		.loc 3 177 17 is_stmt 1
 204              		.loc 3 177 42 is_stmt 0
 205 0118 83350700 		ld	a1,0(a4)
 206              		.loc 3 177 32
 207 011c 2330B70C 		sd	a1,192(a4)
 178:src/../h/../h/MemoryAllocation.hpp ****                 fmem_head->prev=newfrgm->prev;
 208              		.loc 3 178 17 is_stmt 1
 209              		.loc 3 178 32 is_stmt 0
 210 0120 2334C70C 		sd	a2,200(a4)
 179:src/../h/../h/MemoryAllocation.hpp ****                 fmem_head->size=newfrgm->size;
 211              		.loc 3 179 17 is_stmt 1
 212              		.loc 3 179 32 is_stmt 0
 213 0124 2338F70C 		sd	a5,208(a4)
 180:src/../h/../h/MemoryAllocation.hpp ****                 //fmem_head = (FreeMem*) (char*)newfrgm;
 181:src/../h/../h/MemoryAllocation.hpp ****                 return newfrgm;
 214              		.loc 3 181 17 is_stmt 1
 215              		.loc 3 181 24 is_stmt 0
 216 0128 93070700 		mv	a5,a4
 217              	.LVL10:
 218              	.L6:
 219              	.LBE35:
 220              	.LBE37:
 221              	.LBE39:
 222              	.LBE32:
 223              	.LBE31:
 224              	.LBE30:
  21:src/../h/LinkedList.hpp **** 
GAS LISTING /tmp/ccfNW6m3.s 			page 9


  22:src/../h/LinkedList.hpp ****     LinkedList(const LinkedList<T> &) = delete;
  23:src/../h/LinkedList.hpp **** 
  24:src/../h/LinkedList.hpp ****     LinkedList<T> &operator=(const LinkedList<T> &) = delete;
  25:src/../h/LinkedList.hpp **** 
  26:src/../h/LinkedList.hpp ****     void addFirst(T *data){
  27:src/../h/LinkedList.hpp ****         Elem *elem = (Elem*) MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(sizeof(Ele
  28:src/../h/LinkedList.hpp ****         elem->data=data;
  29:src/../h/LinkedList.hpp ****         elem->next=nullptr;
  30:src/../h/LinkedList.hpp ****         head=elem;
  31:src/../h/LinkedList.hpp ****         if(!tail) {tail=head;}
  32:src/../h/LinkedList.hpp ****     }
  33:src/../h/LinkedList.hpp **** 
  34:src/../h/LinkedList.hpp ****     void addLast(T *data){
  35:src/../h/LinkedList.hpp ****         Elem *elem = (Elem*) MemoryAllocation::mem_alloc(MemoryAllocation::bytesToBlocks(sizeof(Ele
  36:src/../h/LinkedList.hpp ****         elem->data=data;
 225              		.loc 2 36 9
 226 012c 23B0A700 		sd	a0,0(a5)
  37:src/../h/LinkedList.hpp ****         elem->next=nullptr;
 227              		.loc 2 37 9
 228 0130 23B40700 		sd	zero,8(a5)
  38:src/../h/LinkedList.hpp ****         if (tail){
 229              		.loc 2 38 13
 230 0134 17070000 		ld	a4,.LANCHOR0+8
 230      03370700 
 231              		.loc 2 38 9
 232 013c 63080702 		beqz	a4,.L15
  39:src/../h/LinkedList.hpp ****             tail->next=elem;
 233              		.loc 2 39 13
 234 0140 2334F700 		sd	a5,8(a4)
  40:src/../h/LinkedList.hpp ****             tail=elem;
 235              		.loc 2 40 13
 236 0144 17070000 		sd	a5,.LANCHOR0+8,a4
 236      2330F700 
 237              	.LVL11:
 238              	.L5:
 239              	.LBE29:
 240              	.LBE28:
  11:src/queue.cpp **** 
 241              		.loc 1 11 1
 242 014c 03348100 		ld	s0,8(sp)
 243              		.cfi_remember_state
 244              		.cfi_restore 8
 245              		.cfi_def_cfa 2, 16
 246 0150 13010101 		addi	sp,sp,16
 247              		.cfi_def_cfa_offset 0
 248 0154 67800000 		jr	ra
 249              	.LVL12:
 250              	.L12:
 251              		.cfi_restore_state
 252              	.LBB45:
 253              	.LBB44:
 254              	.LBB43:
 255              	.LBB42:
 256              	.LBB41:
 257              	.LBB40:
 258              	.LBB38:
 259              	.LBB36:
GAS LISTING /tmp/ccfNW6m3.s 			page 10


 171:src/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 260              		.loc 3 171 22 is_stmt 1
 171:src/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 261              		.loc 3 171 41 is_stmt 0
 262 0158 9306070C 		addi	a3,a4,192
 171:src/../h/../h/MemoryAllocation.hpp ****                 if (cur && cur->next) cur->next->prev = newfrgm;
 263              		.loc 3 171 32
 264 015c 17060000 		la	a2,_ZN16MemoryAllocation9fmem_headE
 264      03360600 
 265 0164 2330D600 		sd	a3,0(a2)
 266 0168 6FF09FF7 		j	.L13
 267              	.LVL13:
 268              	.L15:
 269              	.LBE36:
 270              	.LBE38:
 271              	.LBE40:
 272              	.LBE41:
 273              	.LBE42:
 274              	.LBE43:
  41:src/../h/LinkedList.hpp ****         }else{
  42:src/../h/LinkedList.hpp ****             head=tail=elem;
 275              		.loc 2 42 13
 276 016c 17070000 		lla	a4,.LANCHOR0
 276      13070700 
 277 0174 2334F700 		sd	a5,8(a4)
 278 0178 2330F700 		sd	a5,0(a4)
 279              	.LVL14:
 280              	.LBE44:
 281              	.LBE45:
  11:src/queue.cpp **** 
 282              		.loc 1 11 1
 283 017c 6FF01FFD 		j	.L5
 284              		.cfi_endproc
 285              	.LFE19:
 287              		.align	2
 288              		.globl	_ZN5Queue3getEv
 290              	_ZN5Queue3getEv:
 291              	.LFB20:
  14:src/queue.cpp ****         TCB* thread = queue.removeFirst();
 292              		.loc 1 14 5 is_stmt 1
 293              		.cfi_startproc
 294 0180 130101FE 		addi	sp,sp,-32
 295              		.cfi_def_cfa_offset 32
 296 0184 233C1100 		sd	ra,24(sp)
 297 0188 23388100 		sd	s0,16(sp)
 298 018c 23349100 		sd	s1,8(sp)
 299              		.cfi_offset 1, -8
 300              		.cfi_offset 8, -16
 301              		.cfi_offset 9, -24
 302 0190 13040102 		addi	s0,sp,32
 303              		.cfi_def_cfa 8, 0
  15:src/queue.cpp ****         return thread;
 304              		.loc 1 15 9
 305              	.LVL15:
 306              	.LBB46:
 307              	.LBB47:
  43:src/../h/LinkedList.hpp ****         }
GAS LISTING /tmp/ccfNW6m3.s 			page 11


  44:src/../h/LinkedList.hpp ****     }
  45:src/../h/LinkedList.hpp **** 
  46:src/../h/LinkedList.hpp ****     T* removeFirst() {
  47:src/../h/LinkedList.hpp ****         if (!head) {return 0;}
 308              		.loc 2 47 14 is_stmt 0
 309 0194 17050000 		ld	a0,.LANCHOR0
 309      03350500 
 310              		.loc 2 47 9
 311 019c 63020504 		beqz	a0,.L22
 312              	.LVL16:
  48:src/../h/LinkedList.hpp ****         Elem *elem = head;
  49:src/../h/LinkedList.hpp ****         head = head->next;
 313              		.loc 2 49 22
 314 01a0 83378500 		ld	a5,8(a0)
 315              		.loc 2 49 9
 316 01a4 17070000 		sd	a5,.LANCHOR0,a4
 316      2330F700 
  50:src/../h/LinkedList.hpp ****         if(!head) {
 317              		.loc 2 50 9
 318 01ac 63840702 		beqz	a5,.L24
 319              	.L21:
  51:src/../h/LinkedList.hpp ****             tail = 0;
  52:src/../h/LinkedList.hpp ****         }
  53:src/../h/LinkedList.hpp ****         T* ret = elem->data;
 320              		.loc 2 53 12
 321 01b0 83340500 		ld	s1,0(a0)
 322              	.LVL17:
  54:src/../h/LinkedList.hpp ****         delete elem;
 323              		.loc 2 54 9
 324 01b4 97000000 		call	_ZdlPv@plt
 324      E7800000 
 325              	.LVL18:
 326              	.L19:
 327              	.LBE47:
 328              	.LBE46:
  17:src/queue.cpp **** 
 329              		.loc 1 17 5
 330 01bc 13850400 		mv	a0,s1
 331 01c0 83308101 		ld	ra,24(sp)
 332              		.cfi_remember_state
 333              		.cfi_restore 1
 334 01c4 03340101 		ld	s0,16(sp)
 335              		.cfi_restore 8
 336              		.cfi_def_cfa 2, 32
 337 01c8 83348100 		ld	s1,8(sp)
 338              		.cfi_restore 9
 339 01cc 13010102 		addi	sp,sp,32
 340              		.cfi_def_cfa_offset 0
 341 01d0 67800000 		jr	ra
 342              	.LVL19:
 343              	.L24:
 344              		.cfi_restore_state
 345              	.LBB49:
 346              	.LBB48:
  51:src/../h/LinkedList.hpp ****             tail = 0;
 347              		.loc 2 51 13
 348 01d4 97070000 		sd	zero,.LANCHOR0+8,a5
GAS LISTING /tmp/ccfNW6m3.s 			page 12


 348      23B00700 
 349 01dc 6FF05FFD 		j	.L21
 350              	.LVL20:
 351              	.L22:
  47:src/../h/LinkedList.hpp ****         Elem *elem = head;
 352              		.loc 2 47 28
 353 01e0 93040500 		mv	s1,a0
 354              	.LVL21:
 355              	.LBE48:
 356              	.LBE49:
  16:src/queue.cpp ****     }
 357              		.loc 1 16 9 is_stmt 1
  16:src/queue.cpp ****     }
 358              		.loc 1 16 16 is_stmt 0
 359 01e4 6FF09FFD 		j	.L19
 360              		.cfi_endproc
 361              	.LFE20:
 363              		.align	2
 364              		.globl	_ZN5Queue7isEmptyEv
 366              	_ZN5Queue7isEmptyEv:
 367              	.LFB21:
  19:src/queue.cpp ****     if(queue.listEmpty()==true){
 368              		.loc 1 19 23 is_stmt 1
 369              		.cfi_startproc
 370 01e8 130101FF 		addi	sp,sp,-16
 371              		.cfi_def_cfa_offset 16
 372 01ec 23348100 		sd	s0,8(sp)
 373              		.cfi_offset 8, -8
 374 01f0 13040101 		addi	s0,sp,16
 375              		.cfi_def_cfa 8, 0
  20:src/queue.cpp ****         return true;
 376              		.loc 1 20 5
 377              	.LVL22:
 378              	.LBB50:
 379              	.LBB51:
 380              	.LBB52:
 381              	.LBB53:
  55:src/../h/LinkedList.hpp ****         return ret;
  56:src/../h/LinkedList.hpp ****     }
  57:src/../h/LinkedList.hpp **** 
  58:src/../h/LinkedList.hpp ****     T* peekFirst(){
  59:src/../h/LinkedList.hpp ****         if (!head) {return 0;}
 382              		.loc 2 59 14 is_stmt 0
 383 01f4 97070000 		ld	a5,.LANCHOR0
 383      83B70700 
 384              		.loc 2 59 9
 385 01fc 638E0700 		beqz	a5,.L27
  60:src/../h/LinkedList.hpp ****         return head->data;
 386              		.loc 2 60 22
 387 0200 83B70700 		ld	a5,0(a5)
 388              	.LVL23:
 389              	.LBE53:
 390              	.LBE52:
  61:src/../h/LinkedList.hpp ****     }
  62:src/../h/LinkedList.hpp **** 
  63:src/../h/LinkedList.hpp ****     T* removeLast() {
  64:src/../h/LinkedList.hpp ****         if (!head) { return 0;}
GAS LISTING /tmp/ccfNW6m3.s 			page 13


  65:src/../h/LinkedList.hpp ****         Elem *prev = 0;
  66:src/../h/LinkedList.hpp **** 
  67:src/../h/LinkedList.hpp ****         for (Elem* curr = head; curr && curr!=tail; curr=curr->next){prev-curr;}
  68:src/../h/LinkedList.hpp **** 
  69:src/../h/LinkedList.hpp ****         Elem *elem=tail;
  70:src/../h/LinkedList.hpp ****         if(prev) {prev->next = 0;}
  71:src/../h/LinkedList.hpp ****         else{head=0;}
  72:src/../h/LinkedList.hpp ****         tail=prev;
  73:src/../h/LinkedList.hpp **** 
  74:src/../h/LinkedList.hpp ****         T* ret = elem->data;
  75:src/../h/LinkedList.hpp ****         delete elem;
  76:src/../h/LinkedList.hpp ****         return ret;
  77:src/../h/LinkedList.hpp ****     }
  78:src/../h/LinkedList.hpp **** 
  79:src/../h/LinkedList.hpp ****     T* peekList(){
  80:src/../h/LinkedList.hpp ****         if(!tail) {return 0;}
  81:src/../h/LinkedList.hpp ****         return tail->data;
  82:src/../h/LinkedList.hpp ****     }
  83:src/../h/LinkedList.hpp **** 
  84:src/../h/LinkedList.hpp ****     bool listEmpty(){
  85:src/../h/LinkedList.hpp ****         if(peekFirst()==0){
 391              		.loc 2 85 9
 392 0204 638E0700 		beqz	a5,.L28
 393              	.LBE51:
 394              	.LBE50:
  22:src/queue.cpp **** }
 395              		.loc 1 22 18
 396 0208 13050000 		li	a0,0
 397              	.L26:
 398              	.LVL24:
 399              		.loc 1 23 1
 400 020c 03348100 		ld	s0,8(sp)
 401              		.cfi_remember_state
 402              		.cfi_restore 8
 403              		.cfi_def_cfa 2, 16
 404 0210 13010101 		addi	sp,sp,16
 405              		.cfi_def_cfa_offset 0
 406 0214 67800000 		jr	ra
 407              	.LVL25:
 408              	.L27:
 409              		.cfi_restore_state
  21:src/queue.cpp ****     }else{return false;}
 410              		.loc 1 21 16
 411 0218 13051000 		li	a0,1
 412 021c 6FF01FFF 		j	.L26
 413              	.LVL26:
 414              	.L28:
 415 0220 13051000 		li	a0,1
 416 0224 6FF09FFE 		j	.L26
 417              		.cfi_endproc
 418              	.LFE21:
 420              		.align	2
 422              	_GLOBAL__sub_I__ZN5Queue5queueE:
 423              	.LFB30:
 424              		.loc 1 23 1 is_stmt 1
 425              		.cfi_startproc
 426 0228 130101FF 		addi	sp,sp,-16
GAS LISTING /tmp/ccfNW6m3.s 			page 14


 427              		.cfi_def_cfa_offset 16
 428 022c 23341100 		sd	ra,8(sp)
 429 0230 23308100 		sd	s0,0(sp)
 430              		.cfi_offset 1, -8
 431              		.cfi_offset 8, -16
 432 0234 13040101 		addi	s0,sp,16
 433              		.cfi_def_cfa 8, 0
 434              		.loc 1 23 1 is_stmt 0
 435 0238 B7050100 		li	a1,65536
 436 023c 9385F5FF 		addi	a1,a1,-1
 437 0240 13051000 		li	a0,1
 438 0244 97000000 		call	_Z41__static_initialization_and_destruction_0ii
 438      E7800000 
 439              	.LVL27:
 440 024c 83308100 		ld	ra,8(sp)
 441              		.cfi_restore 1
 442 0250 03340100 		ld	s0,0(sp)
 443              		.cfi_restore 8
 444              		.cfi_def_cfa 2, 16
 445 0254 13010101 		addi	sp,sp,16
 446              		.cfi_def_cfa_offset 0
 447 0258 67800000 		jr	ra
 448              		.cfi_endproc
 449              	.LFE30:
 451              		.section	.init_array,"aw"
 452              		.align	3
 453 0000 00000000 		.dword	_GLOBAL__sub_I__ZN5Queue5queueE
 453      00000000 
 454              		.globl	_ZN5Queue5queueE
 455              		.bss
 456              		.align	3
 457              		.set	.LANCHOR0,. + 0
 460              	_ZN5Queue5queueE:
 461 0000 00000000 		.zero	16
 461      00000000 
 461      00000000 
 461      00000000 
 462              		.text
 463              	.Letext0:
 464              		.file 4 "src/../h/../h/../lib/hw.h"
 465              		.file 5 "src/../h/queue.hpp"
GAS LISTING /tmp/ccfNW6m3.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.cpp
     /tmp/ccfNW6m3.s:8      .text:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccfNW6m3.s:12     .text:0000000000000000 .L0 
     /tmp/ccfNW6m3.s:14     .text:0000000000000000 .L0 
     /tmp/ccfNW6m3.s:15     .text:0000000000000004 .L0 
     /tmp/ccfNW6m3.s:17     .text:0000000000000008 .L0 
     /tmp/ccfNW6m3.s:19     .text:000000000000000c .L0 
     /tmp/ccfNW6m3.s:21     .text:000000000000000c .L0 
     /tmp/ccfNW6m3.s:25     .text:0000000000000018 .L0 
     /tmp/ccfNW6m3.s:26     .text:0000000000000018 .L0 
     /tmp/ccfNW6m3.s:27     .text:0000000000000018 .L0 
     /tmp/ccfNW6m3.s:29     .text:000000000000001c .L0 
     /tmp/ccfNW6m3.s:32     .text:0000000000000020 .L0 
     /tmp/ccfNW6m3.s:34     .text:0000000000000020 .L0 
     /tmp/ccfNW6m3.s:43     .text:000000000000002c .L0 
     /tmp/ccfNW6m3.s:51     .text:000000000000003c .L0 
     /tmp/ccfNW6m3.s:52     .text:0000000000000040 .L0 
     /tmp/ccfNW6m3.s:58     .text:0000000000000040 _ZN5Queue3putEP3TCB
     /tmp/ccfNW6m3.s:61     .text:0000000000000040 .L0 
     /tmp/ccfNW6m3.s:63     .text:0000000000000040 .L0 
     /tmp/ccfNW6m3.s:64     .text:0000000000000044 .L0 
     /tmp/ccfNW6m3.s:66     .text:0000000000000048 .L0 
     /tmp/ccfNW6m3.s:68     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:72     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:77     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:78     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:80     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:81     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:86     .text:0000000000000058 .L0 
     /tmp/ccfNW6m3.s:89     .text:000000000000005c .L0 
     /tmp/ccfNW6m3.s:90     .text:000000000000005c .L0 
     /tmp/ccfNW6m3.s:94     .text:000000000000006c .L0 
     /tmp/ccfNW6m3.s:96     .text:0000000000000070 .L0 
     /tmp/ccfNW6m3.s:97     .text:0000000000000070 .L0 
     /tmp/ccfNW6m3.s:100    .text:0000000000000078 .L0 
     /tmp/ccfNW6m3.s:102    .text:000000000000007c .L0 
     /tmp/ccfNW6m3.s:103    .text:000000000000007c .L0 
     /tmp/ccfNW6m3.s:105    .text:0000000000000080 .L0 
     /tmp/ccfNW6m3.s:109    .text:0000000000000088 .L0 
     /tmp/ccfNW6m3.s:110    .text:0000000000000088 .L0 
     /tmp/ccfNW6m3.s:112    .text:000000000000008c .L0 
     /tmp/ccfNW6m3.s:115    .text:0000000000000094 .L0 
     /tmp/ccfNW6m3.s:117    .text:0000000000000098 .L0 
     /tmp/ccfNW6m3.s:118    .text:0000000000000098 .L0 
     /tmp/ccfNW6m3.s:121    .text:000000000000009c .L0 
     /tmp/ccfNW6m3.s:122    .text:000000000000009c .L0 
     /tmp/ccfNW6m3.s:124    .text:00000000000000a0 .L0 
     /tmp/ccfNW6m3.s:126    .text:00000000000000a4 .L0 
     /tmp/ccfNW6m3.s:127    .text:00000000000000a4 .L0 
     /tmp/ccfNW6m3.s:129    .text:00000000000000a8 .L0 
     /tmp/ccfNW6m3.s:131    .text:00000000000000ac .L0 
     /tmp/ccfNW6m3.s:132    .text:00000000000000ac .L0 
     /tmp/ccfNW6m3.s:137    .text:00000000000000b0 .L0 
     /tmp/ccfNW6m3.s:145    .text:00000000000000b8 .L0 
     /tmp/ccfNW6m3.s:146    .text:00000000000000b8 .L0 
     /tmp/ccfNW6m3.s:152    .text:00000000000000c8 .L0 
GAS LISTING /tmp/ccfNW6m3.s 			page 16


     /tmp/ccfNW6m3.s:153    .text:00000000000000c8 .L0 
     /tmp/ccfNW6m3.s:156    .text:00000000000000cc .L0 
     /tmp/ccfNW6m3.s:157    .text:00000000000000cc .L0 
     /tmp/ccfNW6m3.s:159    .text:00000000000000d0 .L0 
     /tmp/ccfNW6m3.s:160    .text:00000000000000d0 .L0 
     /tmp/ccfNW6m3.s:162    .text:00000000000000d4 .L0 
     /tmp/ccfNW6m3.s:163    .text:00000000000000d4 .L0 
     /tmp/ccfNW6m3.s:165    .text:00000000000000d8 .L0 
     /tmp/ccfNW6m3.s:167    .text:00000000000000dc .L0 
     /tmp/ccfNW6m3.s:168    .text:00000000000000dc .L0 
     /tmp/ccfNW6m3.s:171    .text:00000000000000e0 .L0 
     /tmp/ccfNW6m3.s:172    .text:00000000000000e0 .L0 
     /tmp/ccfNW6m3.s:174    .text:00000000000000e4 .L0 
     /tmp/ccfNW6m3.s:176    .text:00000000000000e8 .L0 
     /tmp/ccfNW6m3.s:177    .text:00000000000000e8 .L0 
     /tmp/ccfNW6m3.s:180    .text:00000000000000ec .L0 
     /tmp/ccfNW6m3.s:181    .text:00000000000000ec .L0 
     /tmp/ccfNW6m3.s:183    .text:00000000000000f0 .L0 
     /tmp/ccfNW6m3.s:185    .text:00000000000000f4 .L0 
     /tmp/ccfNW6m3.s:186    .text:00000000000000f4 .L0 
     /tmp/ccfNW6m3.s:188    .text:00000000000000f8 .L0 
     /tmp/ccfNW6m3.s:190    .text:00000000000000fc .L0 
     /tmp/ccfNW6m3.s:191    .text:00000000000000fc .L0 
     /tmp/ccfNW6m3.s:194    .text:0000000000000100 .L0 
     /tmp/ccfNW6m3.s:196    .text:0000000000000104 .L0 
     /tmp/ccfNW6m3.s:198    .text:0000000000000108 .L0 
     /tmp/ccfNW6m3.s:199    .text:0000000000000108 .L0 
     /tmp/ccfNW6m3.s:201    .text:000000000000010c .L0 
     /tmp/ccfNW6m3.s:204    .text:0000000000000118 .L0 
     /tmp/ccfNW6m3.s:205    .text:0000000000000118 .L0 
     /tmp/ccfNW6m3.s:207    .text:000000000000011c .L0 
     /tmp/ccfNW6m3.s:209    .text:0000000000000120 .L0 
     /tmp/ccfNW6m3.s:210    .text:0000000000000120 .L0 
     /tmp/ccfNW6m3.s:212    .text:0000000000000124 .L0 
     /tmp/ccfNW6m3.s:213    .text:0000000000000124 .L0 
     /tmp/ccfNW6m3.s:215    .text:0000000000000128 .L0 
     /tmp/ccfNW6m3.s:216    .text:0000000000000128 .L0 
     /tmp/ccfNW6m3.s:226    .text:000000000000012c .L0 
     /tmp/ccfNW6m3.s:228    .text:0000000000000130 .L0 
     /tmp/ccfNW6m3.s:230    .text:0000000000000134 .L0 
     /tmp/ccfNW6m3.s:232    .text:000000000000013c .L0 
     /tmp/ccfNW6m3.s:234    .text:0000000000000140 .L0 
     /tmp/ccfNW6m3.s:236    .text:0000000000000144 .L0 
     /tmp/ccfNW6m3.s:242    .text:000000000000014c .L0 
     /tmp/ccfNW6m3.s:243    .text:0000000000000150 .L0 
     /tmp/ccfNW6m3.s:244    .text:0000000000000150 .L0 
     /tmp/ccfNW6m3.s:245    .text:0000000000000150 .L0 
     /tmp/ccfNW6m3.s:247    .text:0000000000000154 .L0 
     /tmp/ccfNW6m3.s:251    .text:0000000000000158 .L0 
     /tmp/ccfNW6m3.s:261    .text:0000000000000158 .L0 
     /tmp/ccfNW6m3.s:262    .text:0000000000000158 .L0 
     /tmp/ccfNW6m3.s:264    .text:000000000000015c .L0 
     /tmp/ccfNW6m3.s:276    .text:000000000000016c .L0 
     /tmp/ccfNW6m3.s:283    .text:000000000000017c .L0 
     /tmp/ccfNW6m3.s:284    .text:0000000000000180 .L0 
     /tmp/ccfNW6m3.s:290    .text:0000000000000180 _ZN5Queue3getEv
     /tmp/ccfNW6m3.s:293    .text:0000000000000180 .L0 
GAS LISTING /tmp/ccfNW6m3.s 			page 17


     /tmp/ccfNW6m3.s:294    .text:0000000000000180 .L0 
     /tmp/ccfNW6m3.s:295    .text:0000000000000184 .L0 
     /tmp/ccfNW6m3.s:299    .text:0000000000000190 .L0 
     /tmp/ccfNW6m3.s:300    .text:0000000000000190 .L0 
     /tmp/ccfNW6m3.s:301    .text:0000000000000190 .L0 
     /tmp/ccfNW6m3.s:303    .text:0000000000000194 .L0 
     /tmp/ccfNW6m3.s:308    .text:0000000000000194 .L0 
     /tmp/ccfNW6m3.s:309    .text:0000000000000194 .L0 
     /tmp/ccfNW6m3.s:311    .text:000000000000019c .L0 
     /tmp/ccfNW6m3.s:314    .text:00000000000001a0 .L0 
     /tmp/ccfNW6m3.s:316    .text:00000000000001a4 .L0 
     /tmp/ccfNW6m3.s:318    .text:00000000000001ac .L0 
     /tmp/ccfNW6m3.s:321    .text:00000000000001b0 .L0 
     /tmp/ccfNW6m3.s:324    .text:00000000000001b4 .L0 
     /tmp/ccfNW6m3.s:330    .text:00000000000001bc .L0 
     /tmp/ccfNW6m3.s:332    .text:00000000000001c4 .L0 
     /tmp/ccfNW6m3.s:333    .text:00000000000001c4 .L0 
     /tmp/ccfNW6m3.s:335    .text:00000000000001c8 .L0 
     /tmp/ccfNW6m3.s:336    .text:00000000000001c8 .L0 
     /tmp/ccfNW6m3.s:338    .text:00000000000001cc .L0 
     /tmp/ccfNW6m3.s:340    .text:00000000000001d0 .L0 
     /tmp/ccfNW6m3.s:344    .text:00000000000001d4 .L0 
     /tmp/ccfNW6m3.s:348    .text:00000000000001d4 .L0 
     /tmp/ccfNW6m3.s:353    .text:00000000000001e0 .L0 
     /tmp/ccfNW6m3.s:358    .text:00000000000001e4 .L0 
     /tmp/ccfNW6m3.s:359    .text:00000000000001e4 .L0 
     /tmp/ccfNW6m3.s:360    .text:00000000000001e8 .L0 
     /tmp/ccfNW6m3.s:366    .text:00000000000001e8 _ZN5Queue7isEmptyEv
     /tmp/ccfNW6m3.s:369    .text:00000000000001e8 .L0 
     /tmp/ccfNW6m3.s:370    .text:00000000000001e8 .L0 
     /tmp/ccfNW6m3.s:371    .text:00000000000001ec .L0 
     /tmp/ccfNW6m3.s:373    .text:00000000000001f0 .L0 
     /tmp/ccfNW6m3.s:375    .text:00000000000001f4 .L0 
     /tmp/ccfNW6m3.s:382    .text:00000000000001f4 .L0 
     /tmp/ccfNW6m3.s:383    .text:00000000000001f4 .L0 
     /tmp/ccfNW6m3.s:385    .text:00000000000001fc .L0 
     /tmp/ccfNW6m3.s:387    .text:0000000000000200 .L0 
     /tmp/ccfNW6m3.s:392    .text:0000000000000204 .L0 
     /tmp/ccfNW6m3.s:396    .text:0000000000000208 .L0 
     /tmp/ccfNW6m3.s:400    .text:000000000000020c .L0 
     /tmp/ccfNW6m3.s:401    .text:0000000000000210 .L0 
     /tmp/ccfNW6m3.s:402    .text:0000000000000210 .L0 
     /tmp/ccfNW6m3.s:403    .text:0000000000000210 .L0 
     /tmp/ccfNW6m3.s:405    .text:0000000000000214 .L0 
     /tmp/ccfNW6m3.s:409    .text:0000000000000218 .L0 
     /tmp/ccfNW6m3.s:411    .text:0000000000000218 .L0 
     /tmp/ccfNW6m3.s:417    .text:0000000000000228 .L0 
     /tmp/ccfNW6m3.s:422    .text:0000000000000228 _GLOBAL__sub_I__ZN5Queue5queueE
     /tmp/ccfNW6m3.s:425    .text:0000000000000228 .L0 
     /tmp/ccfNW6m3.s:426    .text:0000000000000228 .L0 
     /tmp/ccfNW6m3.s:427    .text:000000000000022c .L0 
     /tmp/ccfNW6m3.s:430    .text:0000000000000234 .L0 
     /tmp/ccfNW6m3.s:431    .text:0000000000000234 .L0 
     /tmp/ccfNW6m3.s:433    .text:0000000000000238 .L0 
     /tmp/ccfNW6m3.s:435    .text:0000000000000238 .L0 
     /tmp/ccfNW6m3.s:441    .text:0000000000000250 .L0 
     /tmp/ccfNW6m3.s:443    .text:0000000000000254 .L0 
GAS LISTING /tmp/ccfNW6m3.s 			page 18


     /tmp/ccfNW6m3.s:444    .text:0000000000000254 .L0 
     /tmp/ccfNW6m3.s:446    .text:0000000000000258 .L0 
     /tmp/ccfNW6m3.s:448    .text:000000000000025c .L0 
     /tmp/ccfNW6m3.s:460    .bss:0000000000000000 _ZN5Queue5queueE
     /tmp/ccfNW6m3.s:457    .bss:0000000000000000 .LANCHOR0
     /tmp/ccfNW6m3.s:466    .text:000000000000025c .L0 
     /tmp/ccfNW6m3.s:43     .text:000000000000002c .L0 
     /tmp/ccfNW6m3.s:81     .text:000000000000004c .L0 
     /tmp/ccfNW6m3.s:90     .text:000000000000005c .L0 
     /tmp/ccfNW6m3.s:146    .text:00000000000000b8 .L0 
     /tmp/ccfNW6m3.s:201    .text:000000000000010c .L0 
     /tmp/ccfNW6m3.s:230    .text:0000000000000134 .L0 
     /tmp/ccfNW6m3.s:236    .text:0000000000000144 .L0 
     /tmp/ccfNW6m3.s:264    .text:000000000000015c .L0 
     /tmp/ccfNW6m3.s:276    .text:000000000000016c .L0 
     /tmp/ccfNW6m3.s:309    .text:0000000000000194 .L0 
     /tmp/ccfNW6m3.s:316    .text:00000000000001a4 .L0 
     /tmp/ccfNW6m3.s:348    .text:00000000000001d4 .L0 
     /tmp/ccfNW6m3.s:383    .text:00000000000001f4 .L0 
     /tmp/ccfNW6m3.s:31     .text:0000000000000020 .L4
     /tmp/ccfNW6m3.s:23     .text:0000000000000014 .L1
     /tmp/ccfNW6m3.s:218    .text:000000000000012c .L6
     /tmp/ccfNW6m3.s:133    .text:00000000000000b0 .L17
     /tmp/ccfNW6m3.s:149    .text:00000000000000c8 .L8
     /tmp/ccfNW6m3.s:141    .text:00000000000000b8 .L9
     /tmp/ccfNW6m3.s:84     .text:0000000000000058 .L7
     /tmp/ccfNW6m3.s:119    .text:000000000000009c .L10
     /tmp/ccfNW6m3.s:250    .text:0000000000000158 .L12
     /tmp/ccfNW6m3.s:178    .text:00000000000000ec .L14
     /tmp/ccfNW6m3.s:268    .text:000000000000016c .L15
     /tmp/ccfNW6m3.s:169    .text:00000000000000e0 .L13
     /tmp/ccfNW6m3.s:238    .text:000000000000014c .L5
     /tmp/ccfNW6m3.s:351    .text:00000000000001e0 .L22
     /tmp/ccfNW6m3.s:343    .text:00000000000001d4 .L24
     /tmp/ccfNW6m3.s:319    .text:00000000000001b0 .L21
     /tmp/ccfNW6m3.s:326    .text:00000000000001bc .L19
     /tmp/ccfNW6m3.s:408    .text:0000000000000218 .L27
     /tmp/ccfNW6m3.s:414    .text:0000000000000220 .L28
     /tmp/ccfNW6m3.s:397    .text:000000000000020c .L26
     /tmp/ccfNW6m3.s:1367   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccfNW6m3.s:2583   .debug_str:0000000000000500 .LASF77
     /tmp/ccfNW6m3.s:2441   .debug_str:000000000000003b .LASF78
     /tmp/ccfNW6m3.s:2479   .debug_str:000000000000013c .LASF79
     /tmp/ccfNW6m3.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccfNW6m3.s:463    .text:000000000000025c .Letext0
     /tmp/ccfNW6m3.s:2433   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccfNW6m3.s:2523   .debug_str:00000000000002eb .LASF0
     /tmp/ccfNW6m3.s:2533   .debug_str:0000000000000333 .LASF1
     /tmp/ccfNW6m3.s:2509   .debug_str:0000000000000264 .LASF2
     /tmp/ccfNW6m3.s:2491   .debug_str:00000000000001c8 .LASF4
     /tmp/ccfNW6m3.s:2565   .debug_str:0000000000000469 .LASF3
     /tmp/ccfNW6m3.s:2445   .debug_str:000000000000004e .LASF5
     /tmp/ccfNW6m3.s:2535   .debug_str:0000000000000346 .LASF6
     /tmp/ccfNW6m3.s:2521   .debug_str:00000000000002d8 .LASF7
     /tmp/ccfNW6m3.s:2593   .debug_str:0000000000000606 .LASF8
     /tmp/ccfNW6m3.s:2483   .debug_str:0000000000000162 .LASF9
     /tmp/ccfNW6m3.s:2541   .debug_str:0000000000000380 .LASF10
GAS LISTING /tmp/ccfNW6m3.s 			page 19


     /tmp/ccfNW6m3.s:2587   .debug_str:00000000000005d0 .LASF11
     /tmp/ccfNW6m3.s:2449   .debug_str:0000000000000069 .LASF12
     /tmp/ccfNW6m3.s:2439   .debug_str:000000000000002b .LASF13
     /tmp/ccfNW6m3.s:2457   .debug_str:0000000000000093 .LASF14
     /tmp/ccfNW6m3.s:2555   .debug_str:00000000000003dd .LASF15
     /tmp/ccfNW6m3.s:2463   .debug_str:00000000000000bb .LASF16
     /tmp/ccfNW6m3.s:2575   .debug_str:00000000000004bf .LASF23
     /tmp/ccfNW6m3.s:2477   .debug_str:0000000000000134 .LASF45
     /tmp/ccfNW6m3.s:2607   .debug_str:00000000000006a2 .LASF17
     /tmp/ccfNW6m3.s:2599   .debug_str:0000000000000644 .LASF18
     /tmp/ccfNW6m3.s:2577   .debug_str:00000000000004d0 .LASF19
     /tmp/ccfNW6m3.s:2539   .debug_str:0000000000000376 .LASF20
     /tmp/ccfNW6m3.s:2525   .debug_str:00000000000002f8 .LASF21
     /tmp/ccfNW6m3.s:2547   .debug_str:000000000000039d .LASF22
     /tmp/ccfNW6m3.s:2571   .debug_str:0000000000000495 .LASF24
     /tmp/ccfNW6m3.s:2537   .debug_str:0000000000000359 .LASF25
     /tmp/ccfNW6m3.s:2519   .debug_str:00000000000002ce .LASF26
     /tmp/ccfNW6m3.s:2465   .debug_str:00000000000000d1 .LASF27
     /tmp/ccfNW6m3.s:2585   .debug_str:00000000000005c4 .LASF40
     /tmp/ccfNW6m3.s:2495   .debug_str:00000000000001da .LASF42
     /tmp/ccfNW6m3.s:2451   .debug_str:0000000000000079 .LASF51
     /tmp/ccfNW6m3.s:2601   .debug_str:0000000000000649 .LASF52
     /tmp/ccfNW6m3.s:2455   .debug_str:000000000000008b .LASF28
     /tmp/ccfNW6m3.s:2485   .debug_str:0000000000000170 .LASF30
     /tmp/ccfNW6m3.s:2563   .debug_str:000000000000045b .LASF29
     /tmp/ccfNW6m3.s:2471   .debug_str:00000000000000fe .LASF31
     /tmp/ccfNW6m3.s:2473   .debug_str:0000000000000125 .LASF32
     /tmp/ccfNW6m3.s:2603   .debug_str:0000000000000669 .LASF33
     /tmp/ccfNW6m3.s:2543   .debug_str:000000000000038f .LASF34
     /tmp/ccfNW6m3.s:2497   .debug_str:00000000000001ff .LASF35
     /tmp/ccfNW6m3.s:2569   .debug_str:000000000000048b .LASF36
     /tmp/ccfNW6m3.s:2591   .debug_str:00000000000005e4 .LASF37
     /tmp/ccfNW6m3.s:2549   .debug_str:00000000000003a2 .LASF38
     /tmp/ccfNW6m3.s:2499   .debug_str:0000000000000221 .LASF39
     /tmp/ccfNW6m3.s:2461   .debug_str:00000000000000a7 .LASF80
     /tmp/ccfNW6m3.s:2553   .debug_str:00000000000003cd .LASF81
     /tmp/ccfNW6m3.s:2459   .debug_str:000000000000009f .LASF41
     /tmp/ccfNW6m3.s:2447   .debug_str:0000000000000055 .LASF43
     /tmp/ccfNW6m3.s:2567   .debug_str:000000000000047b .LASF44
     /tmp/ccfNW6m3.s:2589   .debug_str:00000000000005df .LASF46
     /tmp/ccfNW6m3.s:2597   .debug_str:000000000000061e .LASF82
     /tmp/ccfNW6m3.s:2469   .debug_str:00000000000000f9 .LASF47
     /tmp/ccfNW6m3.s:2503   .debug_str:0000000000000249 .LASF48
     /tmp/ccfNW6m3.s:2605   .debug_str:0000000000000697 .LASF49
     /tmp/ccfNW6m3.s:2487   .debug_str:0000000000000190 .LASF50
     /tmp/ccfNW6m3.s:2559   .debug_str:0000000000000413 .LASF53
     /tmp/ccfNW6m3.s:2489   .debug_str:00000000000001aa .LASF83
     /tmp/ccfNW6m3.s:2581   .debug_str:00000000000004f7 .LASF54
     /tmp/ccfNW6m3.s:2513   .debug_str:000000000000027e .LASF55
     /tmp/ccfNW6m3.s:2481   .debug_str:000000000000015a .LASF56
     /tmp/ccfNW6m3.s:2515   .debug_str:00000000000002a2 .LASF57
     /tmp/ccfNW6m3.s:2511   .debug_str:0000000000000272 .LASF58
     /tmp/ccfNW6m3.s:2551   .debug_str:00000000000003a8 .LASF59
     /tmp/ccfNW6m3.s:2453   .debug_str:0000000000000081 .LASF60
     /tmp/ccfNW6m3.s:2579   .debug_str:00000000000004d5 .LASF61
     /tmp/ccfNW6m3.s:2467   .debug_str:00000000000000ee .LASF62
     /tmp/ccfNW6m3.s:2609   .debug_str:00000000000006a7 .LASF63
GAS LISTING /tmp/ccfNW6m3.s 			page 20


     /tmp/ccfNW6m3.s:2517   .debug_str:00000000000002c5 .LASF64
     /tmp/ccfNW6m3.s:2435   .debug_str:0000000000000000 .LASF65
     /tmp/ccfNW6m3.s:2437   .debug_str:0000000000000021 .LASF66
     /tmp/ccfNW6m3.s:2501   .debug_str:0000000000000227 .LASF67
     /tmp/ccfNW6m3.s:2475   .debug_str:000000000000012f .LASF68
     /tmp/ccfNW6m3.s:2527   .debug_str:0000000000000301 .LASF84
     /tmp/ccfNW6m3.s:2557   .debug_str:00000000000003f3 .LASF69
     /tmp/ccfNW6m3.s:423    .text:0000000000000228 .LFB30
     /tmp/ccfNW6m3.s:449    .text:000000000000025c .LFE30
     /tmp/ccfNW6m3.s:439    .text:000000000000024c .LVL27
     /tmp/ccfNW6m3.s:2561   .debug_str:0000000000000431 .LASF70
     /tmp/ccfNW6m3.s:9      .text:0000000000000000 .LFB29
     /tmp/ccfNW6m3.s:53     .text:0000000000000040 .LFE29
     /tmp/ccfNW6m3.s:2505   .debug_str:000000000000024e .LASF71
     /tmp/ccfNW6m3.s:2493   .debug_str:00000000000001cf .LASF72
     /tmp/ccfNW6m3.s:38     .text:000000000000002c .LBB17
     /tmp/ccfNW6m3.s:49     .text:000000000000003c .LBE17
     /tmp/ccfNW6m3.s:2232   .debug_loc:0000000000000000 .LLST0
     /tmp/ccfNW6m3.s:2545   .debug_str:0000000000000398 .LASF73
     /tmp/ccfNW6m3.s:2443   .debug_str:0000000000000049 .LASF74
     /tmp/ccfNW6m3.s:2529   .debug_str:0000000000000312 .LASF85
     /tmp/ccfNW6m3.s:367    .text:00000000000001e8 .LFB21
     /tmp/ccfNW6m3.s:418    .text:0000000000000228 .LFE21
     /tmp/ccfNW6m3.s:378    .text:00000000000001f4 .LBB50
     /tmp/ccfNW6m3.s:394    .text:0000000000000208 .LBE50
     /tmp/ccfNW6m3.s:2241   .debug_loc:000000000000002c .LLST10
     /tmp/ccfNW6m3.s:380    .text:00000000000001f4 .LBB52
     /tmp/ccfNW6m3.s:390    .text:0000000000000204 .LBE52
     /tmp/ccfNW6m3.s:2256   .debug_loc:0000000000000074 .LLST11
     /tmp/ccfNW6m3.s:291    .text:0000000000000180 .LFB20
     /tmp/ccfNW6m3.s:361    .text:00000000000001e8 .LFE20
     /tmp/ccfNW6m3.s:2531   .debug_str:000000000000032c .LASF75
     /tmp/ccfNW6m3.s:306    .text:0000000000000194 .LBB46
     /tmp/ccfNW6m3.s:2401   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccfNW6m3.s:2271   .debug_loc:00000000000000bc .LLST7
     /tmp/ccfNW6m3.s:2286   .debug_loc:0000000000000104 .LLST8
     /tmp/ccfNW6m3.s:2297   .debug_loc:000000000000013a .LLST9
     /tmp/ccfNW6m3.s:325    .text:00000000000001bc .LVL18
     /tmp/ccfNW6m3.s:59     .text:0000000000000040 .LFB19
     /tmp/ccfNW6m3.s:285    .text:0000000000000180 .LFE19
     /tmp/ccfNW6m3.s:73     .text:000000000000004c .LBB28
     /tmp/ccfNW6m3.s:2304   .debug_loc:000000000000015d .LLST1
     /tmp/ccfNW6m3.s:2315   .debug_loc:0000000000000193 .LLST2
     /tmp/ccfNW6m3.s:2330   .debug_loc:00000000000001db .LLST3
     /tmp/ccfNW6m3.s:75     .text:000000000000004c .LBB30
     /tmp/ccfNW6m3.s:2341   .debug_loc:0000000000000211 .LLST4
     /tmp/ccfNW6m3.s:2356   .debug_loc:000000000000024b .LLST5
     /tmp/ccfNW6m3.s:2377   .debug_loc:00000000000002a9 .LLST6
     /tmp/ccfNW6m3.s:2595   .debug_str:0000000000000616 .LASF76
     /tmp/ccfNW6m3.s:2507   .debug_str:000000000000025d .LASF86
     /tmp/ccfNW6m3.s:2573   .debug_str:00000000000004af .LASF87
     /tmp/ccfNW6m3.s:37     .text:000000000000002c .LVL1
     /tmp/ccfNW6m3.s:46     .text:000000000000003c .LVL2
     /tmp/ccfNW6m3.s:377    .text:00000000000001f4 .LVL22
     /tmp/ccfNW6m3.s:398    .text:000000000000020c .LVL24
     /tmp/ccfNW6m3.s:407    .text:0000000000000218 .LVL25
     /tmp/ccfNW6m3.s:388    .text:0000000000000204 .LVL23
GAS LISTING /tmp/ccfNW6m3.s 			page 21


     /tmp/ccfNW6m3.s:413    .text:0000000000000220 .LVL26
     /tmp/ccfNW6m3.s:305    .text:0000000000000194 .LVL15
     /tmp/ccfNW6m3.s:342    .text:00000000000001d4 .LVL19
     /tmp/ccfNW6m3.s:354    .text:00000000000001e4 .LVL21
     /tmp/ccfNW6m3.s:312    .text:00000000000001a0 .LVL16
     /tmp/ccfNW6m3.s:350    .text:00000000000001e0 .LVL20
     /tmp/ccfNW6m3.s:322    .text:00000000000001b4 .LVL17
     /tmp/ccfNW6m3.s:70     .text:000000000000004c .LVL4
     /tmp/ccfNW6m3.s:237    .text:000000000000014c .LVL11
     /tmp/ccfNW6m3.s:249    .text:0000000000000158 .LVL12
     /tmp/ccfNW6m3.s:279    .text:000000000000017c .LVL14
     /tmp/ccfNW6m3.s:217    .text:000000000000012c .LVL10
     /tmp/ccfNW6m3.s:267    .text:000000000000016c .LVL13
     /tmp/ccfNW6m3.s:83     .text:0000000000000058 .LVL5
     /tmp/ccfNW6m3.s:138    .text:00000000000000b4 .LVL6
     /tmp/ccfNW6m3.s:140    .text:00000000000000b8 .LVL7
     /tmp/ccfNW6m3.s:192    .text:0000000000000100 .LVL9
     /tmp/ccfNW6m3.s:154    .text:00000000000000cc .LVL8
     /tmp/ccfNW6m3.s:467    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccfNW6m3.s:240    .text:000000000000014c .LBE28
     /tmp/ccfNW6m3.s:252    .text:0000000000000158 .LBB45
     /tmp/ccfNW6m3.s:281    .text:000000000000017c .LBE45
     /tmp/ccfNW6m3.s:224    .text:000000000000012c .LBE30
     /tmp/ccfNW6m3.s:254    .text:0000000000000158 .LBB43
     /tmp/ccfNW6m3.s:274    .text:000000000000016c .LBE43
     /tmp/ccfNW6m3.s:79     .text:000000000000004c .LBB32
     /tmp/ccfNW6m3.s:222    .text:000000000000012c .LBE32
     /tmp/ccfNW6m3.s:256    .text:0000000000000158 .LBB41
     /tmp/ccfNW6m3.s:272    .text:000000000000016c .LBE41
     /tmp/ccfNW6m3.s:150    .text:00000000000000c8 .LBB35
     /tmp/ccfNW6m3.s:219    .text:000000000000012c .LBE35
     /tmp/ccfNW6m3.s:259    .text:0000000000000158 .LBB36
     /tmp/ccfNW6m3.s:269    .text:000000000000016c .LBE36
     /tmp/ccfNW6m3.s:328    .text:00000000000001bc .LBE46
     /tmp/ccfNW6m3.s:345    .text:00000000000001d4 .LBB49
     /tmp/ccfNW6m3.s:356    .text:00000000000001e4 .LBE49

UNDEFINED SYMBOLS
_ZN16MemoryAllocation9fmem_headE
_ZdlPv
