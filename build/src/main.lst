GAS LISTING /tmp/ccUFvA0G.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB44:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../lib/hw.h"
   2:src/main.cpp  **** #include "../lib/console.h"
   3:src/main.cpp  **** #include "../h/tcb.hpp"
   4:src/main.cpp  **** #include "../h/workers.hpp"
   5:src/main.cpp  **** #include "../h/Print.hpp"
   6:src/main.cpp  **** #include "../h/MemoryAllocation.hpp"
   7:src/main.cpp  **** #include "../h/RiscV.hpp"
   8:src/main.cpp  **** #include "../h/syscall_c.hpp"
   9:src/main.cpp  **** //#include "../src/userMain.cpp"
  10:src/main.cpp  **** //#include "../test/Threads_C_API_test.hpp"
  11:src/main.cpp  **** extern void userMain();
  12:src/main.cpp  **** int main(){
  12              		.loc 1 12 11
  13              		.cfi_startproc
  14 0000 130101FE 		addi	sp,sp,-32
  15              		.cfi_def_cfa_offset 32
  16 0004 233C1100 		sd	ra,24(sp)
  17 0008 23388100 		sd	s0,16(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040102 		addi	s0,sp,32
  21              		.cfi_def_cfa 8, 0
  13:src/main.cpp  ****     MemoryAllocation* mem_obj;
  22              		.loc 1 13 5
  14:src/main.cpp  ****     mem_obj = mem_obj->getInstance();
  23              		.loc 1 14 5
  24              		.file 2 "src/../h/../h/../h/MemoryAllocation.hpp"
   1:src/../h/../h/../h/MemoryAllocation.hpp **** #include "../lib/hw.h"
   2:src/../h/../h/../h/MemoryAllocation.hpp **** 
   3:src/../h/../h/../h/MemoryAllocation.hpp **** 
   4:src/../h/../h/../h/MemoryAllocation.hpp **** #ifndef PROJECT_BASE_MEMORYALLOCATION_HPP
   5:src/../h/../h/../h/MemoryAllocation.hpp **** #define PROJECT_BASE_MEMORYALLOCATION_HPP
   6:src/../h/../h/../h/MemoryAllocation.hpp **** 
   7:src/../h/../h/../h/MemoryAllocation.hpp **** 
   8:src/../h/../h/../h/MemoryAllocation.hpp **** class MemoryAllocation {
   9:src/../h/../h/../h/MemoryAllocation.hpp **** 
  10:src/../h/../h/../h/MemoryAllocation.hpp ****     //===========================DEFINICIJA SINGLETON KLASE POCETAK=======================k
  11:src/../h/../h/../h/MemoryAllocation.hpp **** private:
  12:src/../h/../h/../h/MemoryAllocation.hpp **** 
  13:src/../h/../h/../h/MemoryAllocation.hpp ****     struct FreeMem {
  14:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *next;
  15:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *prev;
  16:src/../h/../h/../h/MemoryAllocation.hpp ****         size_t size;
  17:src/../h/../h/../h/MemoryAllocation.hpp ****     };
  18:src/../h/../h/../h/MemoryAllocation.hpp **** 
  19:src/../h/../h/../h/MemoryAllocation.hpp **** 
  20:src/../h/../h/../h/MemoryAllocation.hpp ****     static FreeMem *fmem_head; //koja pocetna vrednost?
GAS LISTING /tmp/ccUFvA0G.s 			page 2


  21:src/../h/../h/../h/MemoryAllocation.hpp **** 
  22:src/../h/../h/../h/MemoryAllocation.hpp **** 
  23:src/../h/../h/../h/MemoryAllocation.hpp **** 
  24:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *instance;
  25:src/../h/../h/../h/MemoryAllocation.hpp ****     int data;
  26:src/../h/../h/../h/MemoryAllocation.hpp **** 
  27:src/../h/../h/../h/MemoryAllocation.hpp **** 
  28:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation() { //OVO SE SADA NIGGDE
  29:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  30:src/../h/../h/../h/MemoryAllocation.hpp ****                                     (char *) HEAP_START_ADDR); //da li smem ovo da castujem u size_
  31:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->next = nullptr;
  32:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->prev = nullptr;
  33:src/../h/../h/../h/MemoryAllocation.hpp ****         data = 0;
  34:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  35:src/../h/../h/../h/MemoryAllocation.hpp **** 
  36:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation(MemoryAllocation const &);
  37:src/../h/../h/../h/MemoryAllocation.hpp **** 
  38:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const &);
  39:src/../h/../h/../h/MemoryAllocation.hpp **** 
  40:src/../h/../h/../h/MemoryAllocation.hpp **** public:
  41:src/../h/../h/../h/MemoryAllocation.hpp **** 
  42:src/../h/../h/../h/MemoryAllocation.hpp **** 
  43:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *getInstance() {
  44:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!instance) {
  25              		.loc 2 44 9
  26              	.LBB8:
  27              	.LBB9:
  28              		.loc 2 44 13 is_stmt 0
  29 0010 97070000 		la	a5,_ZN16MemoryAllocation8instanceE
  29      83B70700 
  30 0018 83B70700 		ld	a5,0(a5)
  31              		.loc 2 44 9
  32 001c 63880704 		beqz	a5,.L4
  33              	.L2:
  34              	.LBE9:
  35              	.LBE8:
  15:src/main.cpp  ****     RiscV::w_stvec((uint64) &RiscV::supervisorTrap);
  36              		.loc 1 15 5 is_stmt 1
  37              		.loc 1 15 19 is_stmt 0
  38 0020 97070000 		la	a5,_ZN5RiscV14supervisorTrapEv
  38      83B70700 
  39              	.LVL0:
  40              	.LBB12:
  41              	.LBB13:
  42              		.file 3 "src/../h/RiscV.hpp"
   1:src/../h/RiscV.hpp **** //
   2:src/../h/RiscV.hpp **** // Created by os on 8/14/22.
   3:src/../h/RiscV.hpp **** //
   4:src/../h/RiscV.hpp **** 
   5:src/../h/RiscV.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/RiscV.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/RiscV.hpp **** #include "../lib/hw.h"
   8:src/../h/RiscV.hpp **** 
   9:src/../h/RiscV.hpp **** class RiscV {
  10:src/../h/RiscV.hpp **** public:
  11:src/../h/RiscV.hpp ****     //pop sstatus.spp and sstatus.spie bits(mora da bude ne inline funkcija)
  12:src/../h/RiscV.hpp ****     static void popSppSpie();
GAS LISTING /tmp/ccUFvA0G.s 			page 3


  13:src/../h/RiscV.hpp **** 
  14:src/../h/RiscV.hpp ****     //push x3...x31 registers on stack
  15:src/../h/RiscV.hpp ****     static void pushRegisters();
  16:src/../h/RiscV.hpp **** 
  17:src/../h/RiscV.hpp ****     //pop x3...x31 registers on stack
  18:src/../h/RiscV.hpp ****     static void popRegisters();
  19:src/../h/RiscV.hpp **** 
  20:src/../h/RiscV.hpp ****     //read register scause
  21:src/../h/RiscV.hpp ****     static uint64 r_scause();
  22:src/../h/RiscV.hpp **** 
  23:src/../h/RiscV.hpp ****     //write register scause
  24:src/../h/RiscV.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/RiscV.hpp **** 
  26:src/../h/RiscV.hpp ****     //read register sepc
  27:src/../h/RiscV.hpp ****     static uint64 r_sepc();
  28:src/../h/RiscV.hpp **** 
  29:src/../h/RiscV.hpp ****     //write register sepc
  30:src/../h/RiscV.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/RiscV.hpp **** 
  32:src/../h/RiscV.hpp ****     //read register stvec
  33:src/../h/RiscV.hpp ****     static uint64 r_stvec();
  34:src/../h/RiscV.hpp **** 
  35:src/../h/RiscV.hpp ****     //write register stvec
  36:src/../h/RiscV.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/RiscV.hpp **** 
  38:src/../h/RiscV.hpp ****     //write register stval
  39:src/../h/RiscV.hpp ****     static uint64 r_stval();
  40:src/../h/RiscV.hpp **** 
  41:src/../h/RiscV.hpp ****     //write register stval
  42:src/../h/RiscV.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/RiscV.hpp **** 
  44:src/../h/RiscV.hpp ****     enum BitMaskSip{
  45:src/../h/RiscV.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/RiscV.hpp ****         SIP_STIP = (1 << 5),
  47:src/../h/RiscV.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/RiscV.hpp ****     };
  49:src/../h/RiscV.hpp **** 
  50:src/../h/RiscV.hpp ****     //mask set register sip
  51:src/../h/RiscV.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/RiscV.hpp **** 
  53:src/../h/RiscV.hpp ****     //mask clear register sip
  54:src/../h/RiscV.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/RiscV.hpp **** 
  56:src/../h/RiscV.hpp ****     //read register sip
  57:src/../h/RiscV.hpp ****     static uint64 r_sip();
  58:src/../h/RiscV.hpp **** 
  59:src/../h/RiscV.hpp ****     //write register sip
  60:src/../h/RiscV.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/RiscV.hpp **** 
  62:src/../h/RiscV.hpp ****     enum BitMaskSstatus{
  63:src/../h/RiscV.hpp ****         SSTATUS_SIE = (1<<1),
  64:src/../h/RiscV.hpp ****         SSTATUS_SPIE = (1<<5),
  65:src/../h/RiscV.hpp ****         SSTATUS_SPP=  (1<<8),
  66:src/../h/RiscV.hpp ****     };
  67:src/../h/RiscV.hpp **** 
  68:src/../h/RiscV.hpp ****     //mask set register sstatus
  69:src/../h/RiscV.hpp ****     static void ms_sstatus(uint64 mask);
GAS LISTING /tmp/ccUFvA0G.s 			page 4


  70:src/../h/RiscV.hpp **** 
  71:src/../h/RiscV.hpp ****     //mask clear register sstatus
  72:src/../h/RiscV.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/RiscV.hpp **** 
  74:src/../h/RiscV.hpp ****     //read register sstatus
  75:src/../h/RiscV.hpp ****     static uint64 r_sstatus();
  76:src/../h/RiscV.hpp **** 
  77:src/../h/RiscV.hpp ****     //write register sstatus
  78:src/../h/RiscV.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/RiscV.hpp **** 
  80:src/../h/RiscV.hpp ****     static void supervisorTrap();
  81:src/../h/RiscV.hpp **** 
  82:src/../h/RiscV.hpp **** private:
  83:src/../h/RiscV.hpp ****     //obradjuje trap handler
  84:src/../h/RiscV.hpp ****     static void handleSupervisorTrap();
  85:src/../h/RiscV.hpp **** };
  86:src/../h/RiscV.hpp **** 
  87:src/../h/RiscV.hpp **** inline uint64 RiscV::r_scause() {
  88:src/../h/RiscV.hpp ****     uint64 volatile scause;
  89:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[scause], scause" : [scause] "=r"(scause));
  90:src/../h/RiscV.hpp ****     return scause;
  91:src/../h/RiscV.hpp **** 
  92:src/../h/RiscV.hpp **** }
  93:src/../h/RiscV.hpp **** 
  94:src/../h/RiscV.hpp **** inline void RiscV::w_scause(uint64 scause){
  95:src/../h/RiscV.hpp ****     __asm__ volatile("csrw scause, %[scause]": : [scause] "r"(scause));
  96:src/../h/RiscV.hpp **** 
  97:src/../h/RiscV.hpp **** }
  98:src/../h/RiscV.hpp **** 
  99:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sepc(){
 100:src/../h/RiscV.hpp ****     uint64  sepc;
 101:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 102:src/../h/RiscV.hpp ****     return sepc;
 103:src/../h/RiscV.hpp **** }
 104:src/../h/RiscV.hpp **** 
 105:src/../h/RiscV.hpp **** inline void RiscV::w_sepc(uint64 volatile sepc){
 106:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]": : [sepc] "r"(sepc));
 107:src/../h/RiscV.hpp **** }
 108:src/../h/RiscV.hpp **** 
 109:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stvec() {
 110:src/../h/RiscV.hpp ****     uint64 volatile stvec;
 111:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 112:src/../h/RiscV.hpp ****     return stvec;
 113:src/../h/RiscV.hpp **** }
 114:src/../h/RiscV.hpp **** 
 115:src/../h/RiscV.hpp **** inline void RiscV::w_stvec(uint64 stvec){
 116:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]": : [stvec] "r"(stvec));
  43              		.loc 3 116 5 is_stmt 1
  44              		.loc 3 116 68 is_stmt 0
  45              	#APP
  46              	# 116 "src/../h/RiscV.hpp" 1
 117              	}
  47              		csrw stvec, a5
  48              	# 0 "" 2
  49              	.LVL1:
  50              	#NO_APP
  51              	.LBE13:
GAS LISTING /tmp/ccUFvA0G.s 			page 5


  52              	.LBE12:
  16:src/main.cpp  ****      //__asm__ volatile ("csrs sstatus, 0x2");
  17:src/main.cpp  ****      /*TCB *threads[3];
  18:src/main.cpp  **** 
  19:src/main.cpp  ****      thread_create( &threads[0], nullptr, nullptr);
  20:src/main.cpp  ****      TCB::running=threads[0];
  21:src/main.cpp  ****     thread_create(&threads[1], workerBodyA,  nullptr); //ovde su neki workeri, prepisi to ako te ne
  22:src/main.cpp  ****      printString("Thread A created\n");
  23:src/main.cpp  ****     thread_create(&threads[2], workerBodyB, nullptr); //ovde su neki workeri, prepisi to ako te ne 
  24:src/main.cpp  ****      printString("Thread B created\n");
  25:src/main.cpp  **** 
  26:src/main.cpp  **** 
  27:src/main.cpp  ****      //RiscV::ms_sstatus(RiscV::SSTATUS_SIE); //omogucava prekide, probaj i sa i bez toga, ali misl
  28:src/main.cpp  ****      //__asm__ volatile ("csrs sstatus, 0x2");
  29:src/main.cpp  **** 
  30:src/main.cpp  ****      while(!(threads[1]->isFinished() && threads[2]->isFinished())){
  31:src/main.cpp  ****          thread_dispatch();
  32:src/main.cpp  ****      }
  33:src/main.cpp  ****      for (auto &coroutine : threads){
  34:src/main.cpp  ****          delete coroutine;
  35:src/main.cpp  ****      }
  36:src/main.cpp  ****     printString("finished\n");*/
  37:src/main.cpp  **** 
  38:src/main.cpp  ****      TCB* thread;
  53              		.loc 1 38 6 is_stmt 1
  39:src/main.cpp  **** 
  40:src/main.cpp  ****     thread_create( &thread, nullptr, nullptr);
  54              		.loc 1 40 5
  55              		.loc 1 40 18 is_stmt 0
  56 002c 13060000 		li	a2,0
  57 0030 93050000 		li	a1,0
  58 0034 130584FE 		addi	a0,s0,-24
  59 0038 97000000 		call	_Z13thread_createPP3TCBPFvPvES2_@plt
  59      E7800000 
  60              	.LVL2:
  41:src/main.cpp  ****     TCB::running=thread;
  61              		.loc 1 41 5 is_stmt 1
  62              		.loc 1 41 17 is_stmt 0
  63 0040 97070000 		la	a5,_ZN3TCB7runningE
  63      83B70700 
  64 0048 033784FE 		ld	a4,-24(s0)
  65 004c 23B0E700 		sd	a4,0(a5)
  42:src/main.cpp  **** 
  43:src/main.cpp  ****     userMain();
  66              		.loc 1 43 5 is_stmt 1
  67              		.loc 1 43 13 is_stmt 0
  68 0050 97000000 		call	_Z8userMainv@plt
  68      E7800000 
  69              	.LVL3:
  44:src/main.cpp  ****     return 0;
  70              		.loc 1 44 5 is_stmt 1
  45:src/main.cpp  **** }...
  71              		.loc 1 45 1 is_stmt 0
  72 0058 13050000 		li	a0,0
  73 005c 83308101 		ld	ra,24(sp)
  74              		.cfi_remember_state
  75              		.cfi_restore 1
GAS LISTING /tmp/ccUFvA0G.s 			page 6


  76 0060 03340101 		ld	s0,16(sp)
  77              		.cfi_restore 8
  78              		.cfi_def_cfa 2, 32
  79 0064 13010102 		addi	sp,sp,32
  80              		.cfi_def_cfa_offset 0
  81 0068 67800000 		jr	ra
  82              	.L4:
  83              		.cfi_restore_state
  84              	.LBB14:
  85              	.LBB11:
  86              	.LBB10:
  45:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head =  (FreeMem*) HEAP_START_ADDR;
  87              		.loc 2 45 13 is_stmt 1
  88              		.loc 2 45 23 is_stmt 0
  89 006c 97070000 		la	a5,HEAP_START_ADDR
  89      83B70700 
  90 0074 83B70700 		ld	a5,0(a5)
  91 0078 97060000 		la	a3,_ZN16MemoryAllocation9fmem_headE
  91      83B60600 
  92 0080 23B0F600 		sd	a5,0(a3)
  46:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  93              		.loc 2 46 13 is_stmt 1
  94              		.loc 2 46 41 is_stmt 0
  95 0084 17070000 		la	a4,HEAP_END_ADDR
  95      03370700 
  96 008c 03370700 		ld	a4,0(a4)
  97              		.loc 2 46 64
  98 0090 3307F740 		sub	a4,a4,a5
  99              		.loc 2 46 29
 100 0094 23B8E700 		sd	a4,16(a5)
  47:src/../h/../h/../h/MemoryAllocation.hpp ****                                         (char *) HEAP_START_ADDR); //da li smem ovo da castujem u s
  48:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->next = nullptr;
 101              		.loc 2 48 13 is_stmt 1
 102              		.loc 2 48 29 is_stmt 0
 103 0098 23B00700 		sd	zero,0(a5)
  49:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->prev = nullptr;
 104              		.loc 2 49 13 is_stmt 1
 105              		.loc 2 49 24 is_stmt 0
 106 009c 83B70600 		ld	a5,0(a3)
 107              		.loc 2 49 29
 108 00a0 23B40700 		sd	zero,8(a5)
  50:src/../h/../h/../h/MemoryAllocation.hpp ****             static MemoryAllocation* instance;
 109              		.loc 2 50 13 is_stmt 1
  51:src/../h/../h/../h/MemoryAllocation.hpp ****             return instance;
 110              		.loc 2 51 13
 111              		.loc 2 51 20 is_stmt 0
 112 00a4 6FF0DFF7 		j	.L2
 113              	.LBE10:
 114              	.LBE11:
 115              	.LBE14:
 116              		.cfi_endproc
 117              	.LFE44:
 119              	.Letext0:
 120              		.file 4 "src/../lib/hw.h"
 121              		.file 5 "src/../h/tcb.hpp"
 122              		.file 6 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccUFvA0G.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccUFvA0G.s:9      .text:0000000000000000 main
     /tmp/ccUFvA0G.s:13     .text:0000000000000000 .L0 
     /tmp/ccUFvA0G.s:14     .text:0000000000000000 .L0 
     /tmp/ccUFvA0G.s:15     .text:0000000000000004 .L0 
     /tmp/ccUFvA0G.s:18     .text:000000000000000c .L0 
     /tmp/ccUFvA0G.s:19     .text:000000000000000c .L0 
     /tmp/ccUFvA0G.s:21     .text:0000000000000010 .L0 
     /tmp/ccUFvA0G.s:23     .text:0000000000000010 .L0 
     /tmp/ccUFvA0G.s:25     .text:0000000000000010 .L0 
     /tmp/ccUFvA0G.s:28     .text:0000000000000010 .L0 
     /tmp/ccUFvA0G.s:29     .text:0000000000000010 .L0 
     /tmp/ccUFvA0G.s:32     .text:000000000000001c .L0 
     /tmp/ccUFvA0G.s:37     .text:0000000000000020 .L0 
     /tmp/ccUFvA0G.s:38     .text:0000000000000020 .L0 
     /tmp/ccUFvA0G.s:44     .text:0000000000000028 .L0 
  src/../h/RiscV.hpp:116    .text:0000000000000028 .L0 
     /tmp/ccUFvA0G.s:54     .text:000000000000002c .L0 
     /tmp/ccUFvA0G.s:55     .text:000000000000002c .L0 
     /tmp/ccUFvA0G.s:56     .text:000000000000002c .L0 
     /tmp/ccUFvA0G.s:62     .text:0000000000000040 .L0 
     /tmp/ccUFvA0G.s:63     .text:0000000000000040 .L0 
     /tmp/ccUFvA0G.s:67     .text:0000000000000050 .L0 
     /tmp/ccUFvA0G.s:68     .text:0000000000000050 .L0 
     /tmp/ccUFvA0G.s:71     .text:0000000000000058 .L0 
     /tmp/ccUFvA0G.s:72     .text:0000000000000058 .L0 
     /tmp/ccUFvA0G.s:74     .text:0000000000000060 .L0 
     /tmp/ccUFvA0G.s:75     .text:0000000000000060 .L0 
     /tmp/ccUFvA0G.s:77     .text:0000000000000064 .L0 
     /tmp/ccUFvA0G.s:78     .text:0000000000000064 .L0 
     /tmp/ccUFvA0G.s:80     .text:0000000000000068 .L0 
     /tmp/ccUFvA0G.s:83     .text:000000000000006c .L0 
     /tmp/ccUFvA0G.s:88     .text:000000000000006c .L0 
     /tmp/ccUFvA0G.s:89     .text:000000000000006c .L0 
     /tmp/ccUFvA0G.s:94     .text:0000000000000084 .L0 
     /tmp/ccUFvA0G.s:95     .text:0000000000000084 .L0 
     /tmp/ccUFvA0G.s:98     .text:0000000000000090 .L0 
     /tmp/ccUFvA0G.s:100    .text:0000000000000094 .L0 
     /tmp/ccUFvA0G.s:102    .text:0000000000000098 .L0 
     /tmp/ccUFvA0G.s:103    .text:0000000000000098 .L0 
     /tmp/ccUFvA0G.s:105    .text:000000000000009c .L0 
     /tmp/ccUFvA0G.s:106    .text:000000000000009c .L0 
     /tmp/ccUFvA0G.s:108    .text:00000000000000a0 .L0 
     /tmp/ccUFvA0G.s:110    .text:00000000000000a4 .L0 
     /tmp/ccUFvA0G.s:111    .text:00000000000000a4 .L0 
     /tmp/ccUFvA0G.s:112    .text:00000000000000a4 .L0 
     /tmp/ccUFvA0G.s:116    .text:00000000000000a8 .L0 
     /tmp/ccUFvA0G.s:123    .text:00000000000000a8 .L0 
     /tmp/ccUFvA0G.s:29     .text:0000000000000010 .L0 
     /tmp/ccUFvA0G.s:38     .text:0000000000000020 .L0 
     /tmp/ccUFvA0G.s:63     .text:0000000000000040 .L0 
     /tmp/ccUFvA0G.s:89     .text:000000000000006c .L0 
     /tmp/ccUFvA0G.s:91     .text:0000000000000078 .L0 
     /tmp/ccUFvA0G.s:95     .text:0000000000000084 .L0 
     /tmp/ccUFvA0G.s:82     .text:000000000000006c .L4
     /tmp/ccUFvA0G.s:33     .text:0000000000000020 .L2
GAS LISTING /tmp/ccUFvA0G.s 			page 8


     /tmp/ccUFvA0G.s:1022   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccUFvA0G.s:2075   .debug_str:0000000000000704 .LASF126
     /tmp/ccUFvA0G.s:1961   .debug_str:00000000000003c7 .LASF127
     /tmp/ccUFvA0G.s:1915   .debug_str:0000000000000200 .LASF128
     /tmp/ccUFvA0G.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccUFvA0G.s:119    .text:00000000000000a8 .Letext0
     /tmp/ccUFvA0G.s:1837   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccUFvA0G.s:1993   .debug_str:00000000000004b5 .LASF0
     /tmp/ccUFvA0G.s:2007   .debug_str:0000000000000516 .LASF1
     /tmp/ccUFvA0G.s:1975   .debug_str:000000000000044e .LASF2
     /tmp/ccUFvA0G.s:1945   .debug_str:0000000000000358 .LASF4
     /tmp/ccUFvA0G.s:2053   .debug_str:0000000000000656 .LASF3
     /tmp/ccUFvA0G.s:1867   .debug_str:00000000000000b2 .LASF5
     /tmp/ccUFvA0G.s:2011   .debug_str:000000000000054a .LASF6
     /tmp/ccUFvA0G.s:1991   .debug_str:00000000000004a2 .LASF7
     /tmp/ccUFvA0G.s:2089   .debug_str:0000000000000851 .LASF8
     /tmp/ccUFvA0G.s:1929   .debug_str:0000000000000283 .LASF9
     /tmp/ccUFvA0G.s:2023   .debug_str:000000000000059b .LASF10
     /tmp/ccUFvA0G.s:2079   .debug_str:00000000000007d4 .LASF11
     /tmp/ccUFvA0G.s:1869   .debug_str:00000000000000b9 .LASF12
     /tmp/ccUFvA0G.s:1843   .debug_str:0000000000000022 .LASF13
     /tmp/ccUFvA0G.s:1883   .debug_str:00000000000000fe .LASF14
     /tmp/ccUFvA0G.s:2043   .debug_str:000000000000060a .LASF15
     /tmp/ccUFvA0G.s:1891   .debug_str:0000000000000144 .LASF16
     /tmp/ccUFvA0G.s:2069   .debug_str:00000000000006d6 .LASF23
     /tmp/ccUFvA0G.s:1913   .debug_str:00000000000001f8 .LASF38
     /tmp/ccUFvA0G.s:2111   .debug_str:000000000000093b .LASF17
     /tmp/ccUFvA0G.s:2101   .debug_str:00000000000008bc .LASF18
     /tmp/ccUFvA0G.s:2071   .debug_str:00000000000006e7 .LASF19
     /tmp/ccUFvA0G.s:2021   .debug_str:0000000000000591 .LASF20
     /tmp/ccUFvA0G.s:1999   .debug_str:00000000000004d1 .LASF21
     /tmp/ccUFvA0G.s:2037   .debug_str:00000000000005ed .LASF22
     /tmp/ccUFvA0G.s:2059   .debug_str:0000000000000683 .LASF24
     /tmp/ccUFvA0G.s:2017   .debug_str:000000000000056f .LASF25
     /tmp/ccUFvA0G.s:1985   .debug_str:0000000000000485 .LASF26
     /tmp/ccUFvA0G.s:1893   .debug_str:000000000000015a .LASF27
     /tmp/ccUFvA0G.s:2077   .debug_str:00000000000007c8 .LASF52
     /tmp/ccUFvA0G.s:1957   .debug_str:0000000000000395 .LASF54
     /tmp/ccUFvA0G.s:1875   .debug_str:00000000000000d7 .LASF56
     /tmp/ccUFvA0G.s:2105   .debug_str:00000000000008cb .LASF58
     /tmp/ccUFvA0G.s:1879   .debug_str:00000000000000ec .LASF28
     /tmp/ccUFvA0G.s:1931   .debug_str:0000000000000291 .LASF30
     /tmp/ccUFvA0G.s:2051   .debug_str:0000000000000648 .LASF29
     /tmp/ccUFvA0G.s:1903   .debug_str:00000000000001a7 .LASF31
     /tmp/ccUFvA0G.s:1905   .debug_str:00000000000001ce .LASF32
     /tmp/ccUFvA0G.s:2107   .debug_str:00000000000008eb .LASF33
     /tmp/ccUFvA0G.s:2027   .debug_str:00000000000005bf .LASF34
     /tmp/ccUFvA0G.s:2109   .debug_str:0000000000000919 .LASF35
     /tmp/ccUFvA0G.s:2057   .debug_str:0000000000000679 .LASF36
     /tmp/ccUFvA0G.s:2085   .debug_str:000000000000080d .LASF37
     /tmp/ccUFvA0G.s:1847   .debug_str:000000000000003b .LASF39
     /tmp/ccUFvA0G.s:2099   .debug_str:00000000000008af .LASF40
     /tmp/ccUFvA0G.s:1863   .debug_str:0000000000000090 .LASF41
     /tmp/ccUFvA0G.s:1925   .debug_str:000000000000025c .LASF42
     /tmp/ccUFvA0G.s:1841   .debug_str:0000000000000016 .LASF43
     /tmp/ccUFvA0G.s:2063   .debug_str:00000000000006ac .LASF44
     /tmp/ccUFvA0G.s:2039   .debug_str:00000000000005f2 .LASF45
GAS LISTING /tmp/ccUFvA0G.s 			page 9


     /tmp/ccUFvA0G.s:2067   .debug_str:00000000000006c3 .LASF46
     /tmp/ccUFvA0G.s:1877   .debug_str:00000000000000df .LASF47
     /tmp/ccUFvA0G.s:1899   .debug_str:0000000000000199 .LASF48
     /tmp/ccUFvA0G.s:2033   .debug_str:00000000000005dc .LASF49
     /tmp/ccUFvA0G.s:1959   .debug_str:00000000000003ba .LASF50
     /tmp/ccUFvA0G.s:1967   .debug_str:00000000000003ee .LASF51
     /tmp/ccUFvA0G.s:2035   .debug_str:00000000000005e8 .LASF129
     /tmp/ccUFvA0G.s:1887   .debug_str:000000000000011d .LASF62
     /tmp/ccUFvA0G.s:1973   .debug_str:0000000000000433 .LASF64
     /tmp/ccUFvA0G.s:1851   .debug_str:000000000000004d .LASF53
     /tmp/ccUFvA0G.s:1889   .debug_str:000000000000012d .LASF55
     /tmp/ccUFvA0G.s:2013   .debug_str:000000000000055d .LASF57
     /tmp/ccUFvA0G.s:1927   .debug_str:000000000000026c .LASF59
     /tmp/ccUFvA0G.s:1977   .debug_str:000000000000045c .LASF60
     /tmp/ccUFvA0G.s:1941   .debug_str:0000000000000319 .LASF61
     /tmp/ccUFvA0G.s:2045   .debug_str:0000000000000620 .LASF63
     /tmp/ccUFvA0G.s:1981   .debug_str:000000000000046f .LASF65
     /tmp/ccUFvA0G.s:2005   .debug_str:000000000000050e .LASF130
     /tmp/ccUFvA0G.s:1951   .debug_str:000000000000037d .LASF66
     /tmp/ccUFvA0G.s:1997   .debug_str:00000000000004cb .LASF67
     /tmp/ccUFvA0G.s:1955   .debug_str:000000000000038d .LASF68
     /tmp/ccUFvA0G.s:1949   .debug_str:0000000000000374 .LASF69
     /tmp/ccUFvA0G.s:2103   .debug_str:00000000000008c1 .LASF70
     /tmp/ccUFvA0G.s:1971   .debug_str:0000000000000425 .LASF71
     /tmp/ccUFvA0G.s:1935   .debug_str:00000000000002e1 .LASF73
     /tmp/ccUFvA0G.s:2097   .debug_str:00000000000008a1 .LASF131
     /tmp/ccUFvA0G.s:1943   .debug_str:0000000000000330 .LASF132
     /tmp/ccUFvA0G.s:1995   .debug_str:00000000000004c2 .LASF72
     /tmp/ccUFvA0G.s:1909   .debug_str:00000000000001e0 .LASF74
     /tmp/ccUFvA0G.s:2055   .debug_str:0000000000000668 .LASF75
     /tmp/ccUFvA0G.s:1937   .debug_str:00000000000002fa .LASF133
     /tmp/ccUFvA0G.s:1911   .debug_str:00000000000001f3 .LASF76
     /tmp/ccUFvA0G.s:1873   .debug_str:00000000000000d1 .LASF77
     /tmp/ccUFvA0G.s:2041   .debug_str:00000000000005ff .LASF78
     /tmp/ccUFvA0G.s:2073   .debug_str:00000000000006ec .LASF79
     /tmp/ccUFvA0G.s:1861   .debug_str:0000000000000082 .LASF80
     /tmp/ccUFvA0G.s:2091   .debug_str:0000000000000861 .LASF81
     /tmp/ccUFvA0G.s:1917   .debug_str:000000000000021e .LASF82
     /tmp/ccUFvA0G.s:2047   .debug_str:0000000000000626 .LASF83
     /tmp/ccUFvA0G.s:1845   .debug_str:0000000000000032 .LASF84
     /tmp/ccUFvA0G.s:1923   .debug_str:0000000000000247 .LASF85
     /tmp/ccUFvA0G.s:1901   .debug_str:000000000000019e .LASF86
     /tmp/ccUFvA0G.s:2025   .debug_str:00000000000005aa .LASF87
     /tmp/ccUFvA0G.s:1979   .debug_str:0000000000000468 .LASF88
     /tmp/ccUFvA0G.s:1885   .debug_str:000000000000010a .LASF89
     /tmp/ccUFvA0G.s:2065   .debug_str:00000000000006bc .LASF90
     /tmp/ccUFvA0G.s:1969   .debug_str:0000000000000412 .LASF91
     /tmp/ccUFvA0G.s:1921   .debug_str:000000000000023f .LASF92
     /tmp/ccUFvA0G.s:1919   .debug_str:000000000000022b .LASF93
     /tmp/ccUFvA0G.s:2049   .debug_str:0000000000000640 .LASF94
     /tmp/ccUFvA0G.s:1965   .debug_str:00000000000003da .LASF95
     /tmp/ccUFvA0G.s:1907   .debug_str:00000000000001d8 .LASF96
     /tmp/ccUFvA0G.s:1897   .debug_str:0000000000000185 .LASF97
     /tmp/ccUFvA0G.s:1871   .debug_str:00000000000000c9 .LASF98
     /tmp/ccUFvA0G.s:1939   .debug_str:0000000000000305 .LASF99
     /tmp/ccUFvA0G.s:2031   .debug_str:00000000000005d5 .LASF100
     /tmp/ccUFvA0G.s:1859   .debug_str:000000000000006f .LASF101
GAS LISTING /tmp/ccUFvA0G.s 			page 10


     /tmp/ccUFvA0G.s:1857   .debug_str:0000000000000068 .LASF102
     /tmp/ccUFvA0G.s:2095   .debug_str:000000000000088e .LASF103
     /tmp/ccUFvA0G.s:1983   .debug_str:000000000000047f .LASF104
     /tmp/ccUFvA0G.s:2081   .debug_str:00000000000007e3 .LASF105
     /tmp/ccUFvA0G.s:1855   .debug_str:0000000000000062 .LASF106
     /tmp/ccUFvA0G.s:2093   .debug_str:000000000000087c .LASF107
     /tmp/ccUFvA0G.s:1989   .debug_str:0000000000000497 .LASF108
     /tmp/ccUFvA0G.s:2001   .debug_str:00000000000004da .LASF109
     /tmp/ccUFvA0G.s:1953   .debug_str:0000000000000382 .LASF110
     /tmp/ccUFvA0G.s:2083   .debug_str:00000000000007f5 .LASF111
     /tmp/ccUFvA0G.s:1881   .debug_str:00000000000000f4 .LASF112
     /tmp/ccUFvA0G.s:1839   .debug_str:0000000000000000 .LASF113
     /tmp/ccUFvA0G.s:1849   .debug_str:0000000000000043 .LASF114
     /tmp/ccUFvA0G.s:1865   .debug_str:000000000000009c .LASF115
     /tmp/ccUFvA0G.s:2061   .debug_str:000000000000069d .LASF116
     /tmp/ccUFvA0G.s:2003   .debug_str:00000000000004f2 .LASF117
     /tmp/ccUFvA0G.s:1947   .debug_str:000000000000035f .LASF118
     /tmp/ccUFvA0G.s:2087   .debug_str:000000000000082f .LASF119
     /tmp/ccUFvA0G.s:2019   .debug_str:000000000000058c .LASF120
     /tmp/ccUFvA0G.s:10     .text:0000000000000000 .LFB44
     /tmp/ccUFvA0G.s:117    .text:00000000000000a8 .LFE44
     /tmp/ccUFvA0G.s:1987   .debug_str:000000000000048f .LASF134
     /tmp/ccUFvA0G.s:2015   .debug_str:0000000000000568 .LASF121
     /tmp/ccUFvA0G.s:26     .text:0000000000000010 .LBB8
     /tmp/ccUFvA0G.s:1829   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccUFvA0G.s:86     .text:000000000000006c .LBB10
     /tmp/ccUFvA0G.s:113    .text:00000000000000a8 .LBE10
     /tmp/ccUFvA0G.s:40     .text:0000000000000028 .LBB12
     /tmp/ccUFvA0G.s:52     .text:000000000000002c .LBE12
     /tmp/ccUFvA0G.s:60     .text:0000000000000040 .LVL2
     /tmp/ccUFvA0G.s:69     .text:0000000000000058 .LVL3
     /tmp/ccUFvA0G.s:1963   .debug_str:00000000000003d4 .LASF135
     /tmp/ccUFvA0G.s:1933   .debug_str:00000000000002b1 .LASF136
     /tmp/ccUFvA0G.s:2009   .debug_str:0000000000000529 .LASF122
     /tmp/ccUFvA0G.s:1895   .debug_str:0000000000000177 .LASF124
     /tmp/ccUFvA0G.s:2029   .debug_str:00000000000005c8 .LASF123
     /tmp/ccUFvA0G.s:1853   .debug_str:0000000000000059 .LASF125
     /tmp/ccUFvA0G.s:124    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccUFvA0G.s:35     .text:0000000000000020 .LBE8
     /tmp/ccUFvA0G.s:84     .text:000000000000006c .LBB14
     /tmp/ccUFvA0G.s:115    .text:00000000000000a8 .LBE14

UNDEFINED SYMBOLS
_ZN16MemoryAllocation8instanceE
_ZN5RiscV14supervisorTrapEv
_Z13thread_createPP3TCBPFvPvES2_
_ZN3TCB7runningE
_Z8userMainv
HEAP_START_ADDR
_ZN16MemoryAllocation9fmem_headE
HEAP_END_ADDR
