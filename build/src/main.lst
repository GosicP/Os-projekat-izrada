GAS LISTING /tmp/cctvq58S.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	main
   9              	main:
  10              	.LFB44:
  11              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../lib/hw.h"
   2:src/main.cpp  **** #include "../lib/console.h"
   3:src/main.cpp  **** #include "../h/tcb.hpp"
   4:src/main.cpp  **** #include "../h/workers.hpp"
   5:src/main.cpp  **** #include "../h/Print.hpp"
   6:src/main.cpp  **** #include "../h/MemoryAllocation.hpp"
   7:src/main.cpp  **** #include "../h/RiscV.hpp"
   8:src/main.cpp  **** #include "../h/syscall_c.hpp"
   9:src/main.cpp  **** //#include "../src/userMain.cpp"
  10:src/main.cpp  **** //#include "../test/Threads_C_API_test.hpp"
  11:src/main.cpp  **** extern void userMain();
  12:src/main.cpp  **** int main(){
  12              		.loc 1 12 11
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23341100 		sd	ra,8(sp)
  17 0008 23308100 		sd	s0,0(sp)
  18              		.cfi_offset 1, -8
  19              		.cfi_offset 8, -16
  20 000c 13040101 		addi	s0,sp,16
  21              		.cfi_def_cfa 8, 0
  13:src/main.cpp  ****     MemoryAllocation* mem_obj;
  22              		.loc 1 13 5
  14:src/main.cpp  ****     mem_obj = mem_obj->getInstance();
  23              		.loc 1 14 5
  24              		.file 2 "src/../h/../h/../h/MemoryAllocation.hpp"
   1:src/../h/../h/../h/MemoryAllocation.hpp **** #include "../lib/hw.h"
   2:src/../h/../h/../h/MemoryAllocation.hpp **** 
   3:src/../h/../h/../h/MemoryAllocation.hpp **** 
   4:src/../h/../h/../h/MemoryAllocation.hpp **** #ifndef PROJECT_BASE_MEMORYALLOCATION_HPP
   5:src/../h/../h/../h/MemoryAllocation.hpp **** #define PROJECT_BASE_MEMORYALLOCATION_HPP
   6:src/../h/../h/../h/MemoryAllocation.hpp **** 
   7:src/../h/../h/../h/MemoryAllocation.hpp **** 
   8:src/../h/../h/../h/MemoryAllocation.hpp **** class MemoryAllocation {
   9:src/../h/../h/../h/MemoryAllocation.hpp **** 
  10:src/../h/../h/../h/MemoryAllocation.hpp ****     //===========================DEFINICIJA SINGLETON KLASE POCETAK=======================k
  11:src/../h/../h/../h/MemoryAllocation.hpp **** private:
  12:src/../h/../h/../h/MemoryAllocation.hpp **** 
  13:src/../h/../h/../h/MemoryAllocation.hpp ****     struct FreeMem {
  14:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *next;
  15:src/../h/../h/../h/MemoryAllocation.hpp ****         FreeMem *prev;
  16:src/../h/../h/../h/MemoryAllocation.hpp ****         size_t size;
  17:src/../h/../h/../h/MemoryAllocation.hpp ****     };
  18:src/../h/../h/../h/MemoryAllocation.hpp **** 
  19:src/../h/../h/../h/MemoryAllocation.hpp **** 
  20:src/../h/../h/../h/MemoryAllocation.hpp ****     static FreeMem *fmem_head; //koja pocetna vrednost?
GAS LISTING /tmp/cctvq58S.s 			page 2


  21:src/../h/../h/../h/MemoryAllocation.hpp **** 
  22:src/../h/../h/../h/MemoryAllocation.hpp **** 
  23:src/../h/../h/../h/MemoryAllocation.hpp **** 
  24:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *instance;
  25:src/../h/../h/../h/MemoryAllocation.hpp ****     int data;
  26:src/../h/../h/../h/MemoryAllocation.hpp **** 
  27:src/../h/../h/../h/MemoryAllocation.hpp **** 
  28:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation() { //OVO SE SADA NIGGDE
  29:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  30:src/../h/../h/../h/MemoryAllocation.hpp ****                                     (char *) HEAP_START_ADDR); //da li smem ovo da castujem u size_
  31:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->next = nullptr;
  32:src/../h/../h/../h/MemoryAllocation.hpp ****         fmem_head->prev = nullptr;
  33:src/../h/../h/../h/MemoryAllocation.hpp ****         data = 0;
  34:src/../h/../h/../h/MemoryAllocation.hpp ****     }
  35:src/../h/../h/../h/MemoryAllocation.hpp **** 
  36:src/../h/../h/../h/MemoryAllocation.hpp ****     MemoryAllocation(MemoryAllocation const &);
  37:src/../h/../h/../h/MemoryAllocation.hpp **** 
  38:src/../h/../h/../h/MemoryAllocation.hpp ****     void operator=(MemoryAllocation const &);
  39:src/../h/../h/../h/MemoryAllocation.hpp **** 
  40:src/../h/../h/../h/MemoryAllocation.hpp **** public:
  41:src/../h/../h/../h/MemoryAllocation.hpp **** 
  42:src/../h/../h/../h/MemoryAllocation.hpp **** 
  43:src/../h/../h/../h/MemoryAllocation.hpp ****     static MemoryAllocation *getInstance() {
  44:src/../h/../h/../h/MemoryAllocation.hpp ****         if (!instance) {
  25              		.loc 2 44 9
  26              	.LBB8:
  27              	.LBB9:
  28              		.loc 2 44 13 is_stmt 0
  29 0010 97070000 		la	a5,_ZN16MemoryAllocation8instanceE
  29      83B70700 
  30 0018 83B70700 		ld	a5,0(a5)
  31              		.loc 2 44 9
  32 001c 63860702 		beqz	a5,.L4
  33              	.L2:
  34              	.LBE9:
  35              	.LBE8:
  15:src/main.cpp  ****     RiscV::w_stvec((uint64) &RiscV::supervisorTrap);
  36              		.loc 1 15 5 is_stmt 1
  37              		.loc 1 15 19 is_stmt 0
  38 0020 97070000 		la	a5,_ZN5RiscV14supervisorTrapEv
  38      83B70700 
  39              	.LVL0:
  40              	.LBB12:
  41              	.LBB13:
  42              		.file 3 "src/../h/RiscV.hpp"
   1:src/../h/RiscV.hpp **** //
   2:src/../h/RiscV.hpp **** // Created by os on 8/14/22.
   3:src/../h/RiscV.hpp **** //
   4:src/../h/RiscV.hpp **** 
   5:src/../h/RiscV.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/RiscV.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/RiscV.hpp **** #include "../lib/hw.h"
   8:src/../h/RiscV.hpp **** 
   9:src/../h/RiscV.hpp **** class RiscV {
  10:src/../h/RiscV.hpp **** public:
  11:src/../h/RiscV.hpp ****     //pop sstatus.spp and sstatus.spie bits(mora da bude ne inline funkcija)
  12:src/../h/RiscV.hpp ****     static void popSppSpie();
GAS LISTING /tmp/cctvq58S.s 			page 3


  13:src/../h/RiscV.hpp **** 
  14:src/../h/RiscV.hpp ****     //push x3...x31 registers on stack
  15:src/../h/RiscV.hpp ****     static void pushRegisters();
  16:src/../h/RiscV.hpp **** 
  17:src/../h/RiscV.hpp ****     //pop x3...x31 registers on stack
  18:src/../h/RiscV.hpp ****     static void popRegisters();
  19:src/../h/RiscV.hpp **** 
  20:src/../h/RiscV.hpp ****     //read register scause
  21:src/../h/RiscV.hpp ****     static uint64 r_scause();
  22:src/../h/RiscV.hpp **** 
  23:src/../h/RiscV.hpp ****     //write register scause
  24:src/../h/RiscV.hpp ****     static void w_scause(uint64 scause);
  25:src/../h/RiscV.hpp **** 
  26:src/../h/RiscV.hpp ****     //read register sepc
  27:src/../h/RiscV.hpp ****     static uint64 r_sepc();
  28:src/../h/RiscV.hpp **** 
  29:src/../h/RiscV.hpp ****     //write register sepc
  30:src/../h/RiscV.hpp ****     static void w_sepc(uint64 sepc);
  31:src/../h/RiscV.hpp **** 
  32:src/../h/RiscV.hpp ****     //read register stvec
  33:src/../h/RiscV.hpp ****     static uint64 r_stvec();
  34:src/../h/RiscV.hpp **** 
  35:src/../h/RiscV.hpp ****     //write register stvec
  36:src/../h/RiscV.hpp ****     static void w_stvec(uint64 stvec);
  37:src/../h/RiscV.hpp **** 
  38:src/../h/RiscV.hpp ****     //write register stval
  39:src/../h/RiscV.hpp ****     static uint64 r_stval();
  40:src/../h/RiscV.hpp **** 
  41:src/../h/RiscV.hpp ****     //write register stval
  42:src/../h/RiscV.hpp ****     static void w_stval(uint64 stval);
  43:src/../h/RiscV.hpp **** 
  44:src/../h/RiscV.hpp ****     enum BitMaskSip{
  45:src/../h/RiscV.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/RiscV.hpp ****         SIP_STIP = (1 << 5),
  47:src/../h/RiscV.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/RiscV.hpp ****     };
  49:src/../h/RiscV.hpp **** 
  50:src/../h/RiscV.hpp ****     //mask set register sip
  51:src/../h/RiscV.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/RiscV.hpp **** 
  53:src/../h/RiscV.hpp ****     //mask clear register sip
  54:src/../h/RiscV.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/RiscV.hpp **** 
  56:src/../h/RiscV.hpp ****     //read register sip
  57:src/../h/RiscV.hpp ****     static uint64 r_sip();
  58:src/../h/RiscV.hpp **** 
  59:src/../h/RiscV.hpp ****     //write register sip
  60:src/../h/RiscV.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/RiscV.hpp **** 
  62:src/../h/RiscV.hpp ****     enum BitMaskSstatus{
  63:src/../h/RiscV.hpp ****         SSTATUS_SIE = (1<<1),
  64:src/../h/RiscV.hpp ****         SSTATUS_SPIE = (1<<5),
  65:src/../h/RiscV.hpp ****         SSTATUS_SPP=  (1<<8),
  66:src/../h/RiscV.hpp ****     };
  67:src/../h/RiscV.hpp **** 
  68:src/../h/RiscV.hpp ****     //mask set register sstatus
  69:src/../h/RiscV.hpp ****     static void ms_sstatus(uint64 mask);
GAS LISTING /tmp/cctvq58S.s 			page 4


  70:src/../h/RiscV.hpp **** 
  71:src/../h/RiscV.hpp ****     //mask clear register sstatus
  72:src/../h/RiscV.hpp ****     static void mc_sstatus(uint64 mask);
  73:src/../h/RiscV.hpp **** 
  74:src/../h/RiscV.hpp ****     //read register sstatus
  75:src/../h/RiscV.hpp ****     static uint64 r_sstatus();
  76:src/../h/RiscV.hpp **** 
  77:src/../h/RiscV.hpp ****     //write register sstatus
  78:src/../h/RiscV.hpp ****     static void w_sstatus(uint64 sstatus);
  79:src/../h/RiscV.hpp **** 
  80:src/../h/RiscV.hpp ****     static void supervisorTrap();
  81:src/../h/RiscV.hpp **** 
  82:src/../h/RiscV.hpp **** private:
  83:src/../h/RiscV.hpp ****     //obradjuje trap handler
  84:src/../h/RiscV.hpp ****     static void handleSupervisorTrap();
  85:src/../h/RiscV.hpp **** };
  86:src/../h/RiscV.hpp **** 
  87:src/../h/RiscV.hpp **** inline uint64 RiscV::r_scause() {
  88:src/../h/RiscV.hpp ****     uint64 volatile scause;
  89:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[scause], scause" : [scause] "=r"(scause));
  90:src/../h/RiscV.hpp ****     return scause;
  91:src/../h/RiscV.hpp **** 
  92:src/../h/RiscV.hpp **** }
  93:src/../h/RiscV.hpp **** 
  94:src/../h/RiscV.hpp **** inline void RiscV::w_scause(uint64 scause){
  95:src/../h/RiscV.hpp ****     __asm__ volatile("csrw scause, %[scause]": : [scause] "r"(scause));
  96:src/../h/RiscV.hpp **** 
  97:src/../h/RiscV.hpp **** }
  98:src/../h/RiscV.hpp **** 
  99:src/../h/RiscV.hpp **** inline uint64 RiscV::r_sepc(){
 100:src/../h/RiscV.hpp ****     uint64  sepc;
 101:src/../h/RiscV.hpp ****     __asm__ volatile("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 102:src/../h/RiscV.hpp ****     return sepc;
 103:src/../h/RiscV.hpp **** }
 104:src/../h/RiscV.hpp **** 
 105:src/../h/RiscV.hpp **** inline void RiscV::w_sepc(uint64 volatile sepc){
 106:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]": : [sepc] "r"(sepc));
 107:src/../h/RiscV.hpp **** }
 108:src/../h/RiscV.hpp **** 
 109:src/../h/RiscV.hpp **** inline uint64 RiscV::r_stvec() {
 110:src/../h/RiscV.hpp ****     uint64 volatile stvec;
 111:src/../h/RiscV.hpp ****     __asm__ volatile ("csrr %[stvec], stvec": [stvec] "=r"(stvec));
 112:src/../h/RiscV.hpp ****     return stvec;
 113:src/../h/RiscV.hpp **** }
 114:src/../h/RiscV.hpp **** 
 115:src/../h/RiscV.hpp **** inline void RiscV::w_stvec(uint64 stvec){
 116:src/../h/RiscV.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]": : [stvec] "r"(stvec));
  43              		.loc 3 116 5 is_stmt 1
  44              		.loc 3 116 68 is_stmt 0
  45              	#APP
  46              	# 116 "src/../h/RiscV.hpp" 1
 117              	}
  47              		csrw stvec, a5
  48              	# 0 "" 2
  49              	.LVL1:
  50              	#NO_APP
  51              	.LBE13:
GAS LISTING /tmp/cctvq58S.s 			page 5


  52              	.LBE12:
  16:src/main.cpp  ****      //__asm__ volatile ("csrs sstatus, 0x2");
  17:src/main.cpp  ****      /*TCB *threads[3];
  18:src/main.cpp  **** 
  19:src/main.cpp  ****      thread_create( &threads[0], nullptr, nullptr);
  20:src/main.cpp  ****      TCB::running=threads[0];
  21:src/main.cpp  ****     thread_create(&threads[1], workerBodyA,  nullptr); //ovde su neki workeri, prepisi to ako te ne
  22:src/main.cpp  ****      printString("Thread A created\n");
  23:src/main.cpp  ****     thread_create(&threads[2], workerBodyB, nullptr); //ovde su neki workeri, prepisi to ako te ne 
  24:src/main.cpp  ****      printString("Thread B created\n");
  25:src/main.cpp  **** 
  26:src/main.cpp  **** 
  27:src/main.cpp  ****      //RiscV::ms_sstatus(RiscV::SSTATUS_SIE); //omogucava prekide, probaj i sa i bez toga, ali misl
  28:src/main.cpp  ****      //__asm__ volatile ("csrs sstatus, 0x2");
  29:src/main.cpp  **** 
  30:src/main.cpp  ****      while(!(threads[1]->isFinished() && threads[2]->isFinished())){
  31:src/main.cpp  ****          thread_dispatch();
  32:src/main.cpp  ****      }
  33:src/main.cpp  ****      for (auto &coroutine : threads){
  34:src/main.cpp  ****          delete coroutine;
  35:src/main.cpp  ****      }
  36:src/main.cpp  ****     printString("finished\n");*/
  37:src/main.cpp  **** 
  38:src/main.cpp  ****     userMain();
  53              		.loc 1 38 5 is_stmt 1
  54              		.loc 1 38 13 is_stmt 0
  55 002c 97000000 		call	_Z8userMainv@plt
  55      E7800000 
  56              	.LVL2:
  39:src/main.cpp  ****     return 0;
  57              		.loc 1 39 5 is_stmt 1
  40:src/main.cpp  **** }...
  58              		.loc 1 40 1 is_stmt 0
  59 0034 13050000 		li	a0,0
  60 0038 83308100 		ld	ra,8(sp)
  61              		.cfi_remember_state
  62              		.cfi_restore 1
  63 003c 03340100 		ld	s0,0(sp)
  64              		.cfi_restore 8
  65              		.cfi_def_cfa 2, 16
  66 0040 13010101 		addi	sp,sp,16
  67              		.cfi_def_cfa_offset 0
  68 0044 67800000 		jr	ra
  69              	.L4:
  70              		.cfi_restore_state
  71              	.LBB14:
  72              	.LBB11:
  73              	.LBB10:
  45:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head =  (FreeMem*) HEAP_START_ADDR;
  74              		.loc 2 45 13 is_stmt 1
  75              		.loc 2 45 23 is_stmt 0
  76 0048 97070000 		la	a5,HEAP_START_ADDR
  76      83B70700 
  77 0050 83B70700 		ld	a5,0(a5)
  78 0054 97060000 		la	a3,_ZN16MemoryAllocation9fmem_headE
  78      83B60600 
  79 005c 23B0F600 		sd	a5,0(a3)
GAS LISTING /tmp/cctvq58S.s 			page 6


  46:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->size = (size_t) ((char *) HEAP_END_ADDR -
  80              		.loc 2 46 13 is_stmt 1
  81              		.loc 2 46 41 is_stmt 0
  82 0060 17070000 		la	a4,HEAP_END_ADDR
  82      03370700 
  83 0068 03370700 		ld	a4,0(a4)
  84              		.loc 2 46 64
  85 006c 3307F740 		sub	a4,a4,a5
  86              		.loc 2 46 29
  87 0070 23B8E700 		sd	a4,16(a5)
  47:src/../h/../h/../h/MemoryAllocation.hpp ****                                         (char *) HEAP_START_ADDR); //da li smem ovo da castujem u s
  48:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->next = nullptr;
  88              		.loc 2 48 13 is_stmt 1
  89              		.loc 2 48 29 is_stmt 0
  90 0074 23B00700 		sd	zero,0(a5)
  49:src/../h/../h/../h/MemoryAllocation.hpp ****             fmem_head->prev = nullptr;
  91              		.loc 2 49 13 is_stmt 1
  92              		.loc 2 49 24 is_stmt 0
  93 0078 83B70600 		ld	a5,0(a3)
  94              		.loc 2 49 29
  95 007c 23B40700 		sd	zero,8(a5)
  50:src/../h/../h/../h/MemoryAllocation.hpp ****             static MemoryAllocation* instance;
  96              		.loc 2 50 13 is_stmt 1
  51:src/../h/../h/../h/MemoryAllocation.hpp ****             return instance;
  97              		.loc 2 51 13
  98              		.loc 2 51 20 is_stmt 0
  99 0080 6FF01FFA 		j	.L2
 100              	.LBE10:
 101              	.LBE11:
 102              	.LBE14:
 103              		.cfi_endproc
 104              	.LFE44:
 106              	.Letext0:
 107              		.file 4 "src/../lib/hw.h"
GAS LISTING /tmp/cctvq58S.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cctvq58S.s:9      .text:0000000000000000 main
     /tmp/cctvq58S.s:13     .text:0000000000000000 .L0 
     /tmp/cctvq58S.s:14     .text:0000000000000000 .L0 
     /tmp/cctvq58S.s:15     .text:0000000000000004 .L0 
     /tmp/cctvq58S.s:18     .text:000000000000000c .L0 
     /tmp/cctvq58S.s:19     .text:000000000000000c .L0 
     /tmp/cctvq58S.s:21     .text:0000000000000010 .L0 
     /tmp/cctvq58S.s:23     .text:0000000000000010 .L0 
     /tmp/cctvq58S.s:25     .text:0000000000000010 .L0 
     /tmp/cctvq58S.s:28     .text:0000000000000010 .L0 
     /tmp/cctvq58S.s:29     .text:0000000000000010 .L0 
     /tmp/cctvq58S.s:32     .text:000000000000001c .L0 
     /tmp/cctvq58S.s:37     .text:0000000000000020 .L0 
     /tmp/cctvq58S.s:38     .text:0000000000000020 .L0 
     /tmp/cctvq58S.s:44     .text:0000000000000028 .L0 
  src/../h/RiscV.hpp:116    .text:0000000000000028 .L0 
     /tmp/cctvq58S.s:54     .text:000000000000002c .L0 
     /tmp/cctvq58S.s:55     .text:000000000000002c .L0 
     /tmp/cctvq58S.s:58     .text:0000000000000034 .L0 
     /tmp/cctvq58S.s:59     .text:0000000000000034 .L0 
     /tmp/cctvq58S.s:61     .text:000000000000003c .L0 
     /tmp/cctvq58S.s:62     .text:000000000000003c .L0 
     /tmp/cctvq58S.s:64     .text:0000000000000040 .L0 
     /tmp/cctvq58S.s:65     .text:0000000000000040 .L0 
     /tmp/cctvq58S.s:67     .text:0000000000000044 .L0 
     /tmp/cctvq58S.s:70     .text:0000000000000048 .L0 
     /tmp/cctvq58S.s:75     .text:0000000000000048 .L0 
     /tmp/cctvq58S.s:76     .text:0000000000000048 .L0 
     /tmp/cctvq58S.s:81     .text:0000000000000060 .L0 
     /tmp/cctvq58S.s:82     .text:0000000000000060 .L0 
     /tmp/cctvq58S.s:85     .text:000000000000006c .L0 
     /tmp/cctvq58S.s:87     .text:0000000000000070 .L0 
     /tmp/cctvq58S.s:89     .text:0000000000000074 .L0 
     /tmp/cctvq58S.s:90     .text:0000000000000074 .L0 
     /tmp/cctvq58S.s:92     .text:0000000000000078 .L0 
     /tmp/cctvq58S.s:93     .text:0000000000000078 .L0 
     /tmp/cctvq58S.s:95     .text:000000000000007c .L0 
     /tmp/cctvq58S.s:97     .text:0000000000000080 .L0 
     /tmp/cctvq58S.s:98     .text:0000000000000080 .L0 
     /tmp/cctvq58S.s:99     .text:0000000000000080 .L0 
     /tmp/cctvq58S.s:103    .text:0000000000000084 .L0 
     /tmp/cctvq58S.s:108    .text:0000000000000084 .L0 
     /tmp/cctvq58S.s:29     .text:0000000000000010 .L0 
     /tmp/cctvq58S.s:38     .text:0000000000000020 .L0 
     /tmp/cctvq58S.s:76     .text:0000000000000048 .L0 
     /tmp/cctvq58S.s:78     .text:0000000000000054 .L0 
     /tmp/cctvq58S.s:82     .text:0000000000000060 .L0 
     /tmp/cctvq58S.s:69     .text:0000000000000048 .L4
     /tmp/cctvq58S.s:33     .text:0000000000000020 .L2
     /tmp/cctvq58S.s:705    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cctvq58S.s:1524   .debug_str:00000000000004d8 .LASF84
     /tmp/cctvq58S.s:1442   .debug_str:000000000000027f .LASF85
     /tmp/cctvq58S.s:1414   .debug_str:0000000000000163 .LASF86
     /tmp/cctvq58S.s:5      .text:0000000000000000 .Ltext0
     /tmp/cctvq58S.s:106    .text:0000000000000084 .Letext0
GAS LISTING /tmp/cctvq58S.s 			page 8


     /tmp/cctvq58S.s:1360   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cctvq58S.s:1466   .debug_str:0000000000000317 .LASF0
     /tmp/cctvq58S.s:1476   .debug_str:0000000000000373 .LASF1
     /tmp/cctvq58S.s:1454   .debug_str:00000000000002d2 .LASF2
     /tmp/cctvq58S.s:1432   .debug_str:000000000000021d .LASF4
     /tmp/cctvq58S.s:1508   .debug_str:0000000000000469 .LASF3
     /tmp/cctvq58S.s:1382   .debug_str:0000000000000078 .LASF5
     /tmp/cctvq58S.s:1478   .debug_str:0000000000000386 .LASF6
     /tmp/cctvq58S.s:1464   .debug_str:0000000000000304 .LASF7
     /tmp/cctvq58S.s:1536   .debug_str:0000000000000613 .LASF8
     /tmp/cctvq58S.s:1422   .debug_str:00000000000001a3 .LASF9
     /tmp/cctvq58S.s:1486   .debug_str:00000000000003c5 .LASF10
     /tmp/cctvq58S.s:1528   .debug_str:00000000000005a8 .LASF11
     /tmp/cctvq58S.s:1384   .debug_str:000000000000007f .LASF12
     /tmp/cctvq58S.s:1364   .debug_str:0000000000000008 .LASF13
     /tmp/cctvq58S.s:1394   .debug_str:00000000000000c1 .LASF14
     /tmp/cctvq58S.s:1502   .debug_str:000000000000042b .LASF15
     /tmp/cctvq58S.s:1396   .debug_str:00000000000000cd .LASF16
     /tmp/cctvq58S.s:1520   .debug_str:00000000000004c2 .LASF23
     /tmp/cctvq58S.s:1412   .debug_str:000000000000015b .LASF87
     /tmp/cctvq58S.s:1552   .debug_str:00000000000006d8 .LASF17
     /tmp/cctvq58S.s:1544   .debug_str:0000000000000663 .LASF18
     /tmp/cctvq58S.s:1522   .debug_str:00000000000004d3 .LASF19
     /tmp/cctvq58S.s:1484   .debug_str:00000000000003bb .LASF20
     /tmp/cctvq58S.s:1468   .debug_str:0000000000000324 .LASF21
     /tmp/cctvq58S.s:1498   .debug_str:000000000000041b .LASF22
     /tmp/cctvq58S.s:1512   .debug_str:0000000000000485 .LASF24
     /tmp/cctvq58S.s:1480   .debug_str:0000000000000399 .LASF25
     /tmp/cctvq58S.s:1458   .debug_str:00000000000002e7 .LASF26
     /tmp/cctvq58S.s:1398   .debug_str:00000000000000e3 .LASF27
     /tmp/cctvq58S.s:1526   .debug_str:000000000000059c .LASF46
     /tmp/cctvq58S.s:1438   .debug_str:0000000000000244 .LASF48
     /tmp/cctvq58S.s:1388   .debug_str:00000000000000a7 .LASF82
     /tmp/cctvq58S.s:1546   .debug_str:0000000000000668 .LASF88
     /tmp/cctvq58S.s:1390   .debug_str:00000000000000af .LASF28
     /tmp/cctvq58S.s:1424   .debug_str:00000000000001b1 .LASF30
     /tmp/cctvq58S.s:1506   .debug_str:000000000000045b .LASF29
     /tmp/cctvq58S.s:1404   .debug_str:000000000000011d .LASF31
     /tmp/cctvq58S.s:1406   .debug_str:0000000000000144 .LASF32
     /tmp/cctvq58S.s:1548   .debug_str:0000000000000688 .LASF33
     /tmp/cctvq58S.s:1490   .debug_str:00000000000003e9 .LASF34
     /tmp/cctvq58S.s:1550   .debug_str:00000000000006b6 .LASF35
     /tmp/cctvq58S.s:1510   .debug_str:000000000000047b .LASF36
     /tmp/cctvq58S.s:1532   .debug_str:00000000000005cf .LASF37
     /tmp/cctvq58S.s:1410   .debug_str:0000000000000156 .LASF38
     /tmp/cctvq58S.s:1452   .debug_str:00000000000002cc .LASF39
     /tmp/cctvq58S.s:1500   .debug_str:0000000000000420 .LASF40
     /tmp/cctvq58S.s:1386   .debug_str:000000000000008f .LASF42
     /tmp/cctvq58S.s:1378   .debug_str:0000000000000054 .LASF41
     /tmp/cctvq58S.s:1538   .debug_str:0000000000000623 .LASF43
     /tmp/cctvq58S.s:1518   .debug_str:00000000000004b5 .LASF44
     /tmp/cctvq58S.s:1504   .debug_str:0000000000000441 .LASF45
     /tmp/cctvq58S.s:1366   .debug_str:0000000000000018 .LASF47
     /tmp/cctvq58S.s:1496   .debug_str:0000000000000406 .LASF49
     /tmp/cctvq58S.s:1402   .debug_str:0000000000000114 .LASF50
     /tmp/cctvq58S.s:1488   .debug_str:00000000000003d4 .LASF51
     /tmp/cctvq58S.s:1456   .debug_str:00000000000002e0 .LASF52
GAS LISTING /tmp/cctvq58S.s 			page 9


     /tmp/cctvq58S.s:1448   .debug_str:00000000000002a6 .LASF53
     /tmp/cctvq58S.s:1516   .debug_str:00000000000004ae .LASF54
     /tmp/cctvq58S.s:1450   .debug_str:00000000000002b9 .LASF55
     /tmp/cctvq58S.s:1418   .debug_str:0000000000000195 .LASF56
     /tmp/cctvq58S.s:1416   .debug_str:0000000000000181 .LASF57
     /tmp/cctvq58S.s:1362   .debug_str:0000000000000000 .LASF58
     /tmp/cctvq58S.s:1446   .debug_str:0000000000000292 .LASF59
     /tmp/cctvq58S.s:1408   .debug_str:000000000000014e .LASF60
     /tmp/cctvq58S.s:1400   .debug_str:0000000000000100 .LASF61
     /tmp/cctvq58S.s:1428   .debug_str:0000000000000201 .LASF62
     /tmp/cctvq58S.s:1430   .debug_str:0000000000000209 .LASF63
     /tmp/cctvq58S.s:1494   .debug_str:00000000000003ff .LASF64
     /tmp/cctvq58S.s:1376   .debug_str:0000000000000041 .LASF65
     /tmp/cctvq58S.s:1374   .debug_str:000000000000003a .LASF66
     /tmp/cctvq58S.s:1542   .debug_str:0000000000000650 .LASF67
     /tmp/cctvq58S.s:1420   .debug_str:000000000000019d .LASF68
     /tmp/cctvq58S.s:1474   .debug_str:0000000000000361 .LASF69
     /tmp/cctvq58S.s:1372   .debug_str:0000000000000034 .LASF70
     /tmp/cctvq58S.s:1540   .debug_str:000000000000063e .LASF71
     /tmp/cctvq58S.s:1462   .debug_str:00000000000002f9 .LASF72
     /tmp/cctvq58S.s:1470   .debug_str:000000000000032d .LASF73
     /tmp/cctvq58S.s:1436   .debug_str:0000000000000239 .LASF74
     /tmp/cctvq58S.s:1530   .debug_str:00000000000005b7 .LASF75
     /tmp/cctvq58S.s:1392   .debug_str:00000000000000b7 .LASF76
     /tmp/cctvq58S.s:1440   .debug_str:0000000000000269 .LASF77
     /tmp/cctvq58S.s:1368   .debug_str:0000000000000021 .LASF78
     /tmp/cctvq58S.s:1380   .debug_str:0000000000000062 .LASF79
     /tmp/cctvq58S.s:1514   .debug_str:000000000000049f .LASF80
     /tmp/cctvq58S.s:1472   .debug_str:0000000000000345 .LASF81
     /tmp/cctvq58S.s:1434   .debug_str:0000000000000224 .LASF89
     /tmp/cctvq58S.s:1534   .debug_str:00000000000005f1 .LASF90
     /tmp/cctvq58S.s:1482   .debug_str:00000000000003b6 .LASF83
     /tmp/cctvq58S.s:10     .text:0000000000000000 .LFB44
     /tmp/cctvq58S.s:104    .text:0000000000000084 .LFE44
     /tmp/cctvq58S.s:1460   .debug_str:00000000000002f1 .LASF91
     /tmp/cctvq58S.s:26     .text:0000000000000010 .LBB8
     /tmp/cctvq58S.s:1352   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cctvq58S.s:73     .text:0000000000000048 .LBB10
     /tmp/cctvq58S.s:100    .text:0000000000000084 .LBE10
     /tmp/cctvq58S.s:40     .text:0000000000000028 .LBB12
     /tmp/cctvq58S.s:52     .text:000000000000002c .LBE12
     /tmp/cctvq58S.s:56     .text:0000000000000034 .LVL2
     /tmp/cctvq58S.s:1444   .debug_str:000000000000028c .LASF92
     /tmp/cctvq58S.s:1426   .debug_str:00000000000001d1 .LASF93
     /tmp/cctvq58S.s:1492   .debug_str:00000000000003f2 .LASF94
     /tmp/cctvq58S.s:1370   .debug_str:000000000000002b .LASF95
     /tmp/cctvq58S.s:109    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cctvq58S.s:35     .text:0000000000000020 .LBE8
     /tmp/cctvq58S.s:71     .text:0000000000000048 .LBB14
     /tmp/cctvq58S.s:102    .text:0000000000000084 .LBE14

UNDEFINED SYMBOLS
_ZN16MemoryAllocation8instanceE
_ZN5RiscV14supervisorTrapEv
_Z8userMainv
HEAP_START_ADDR
_ZN16MemoryAllocation9fmem_headE
GAS LISTING /tmp/cctvq58S.s 			page 10


HEAP_END_ADDR
